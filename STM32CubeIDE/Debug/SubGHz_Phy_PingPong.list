
SubGHz_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9a8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002558  0800eae8  0800eae8  0000fae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011040  08011040  000132c0  2**0
                  CONTENTS
  4 .ARM          00000008  08011040  08011040  00012040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011048  08011048  000132c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011048  08011048  00012048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08011050  08011050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  08011058  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bb0  200002c0  08011318  000132c0  2**2
                  ALLOC
 10 RAM1_region   00000000  20005e70  20005e70  000132c0  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  000132c0  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20005e70  20005e70  00013e70  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  000132c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003c460  00000000  00000000  000132ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007fec  00000000  00000000  0004f74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00014eb6  00000000  00000000  00057736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000021e8  00000000  00000000  0006c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001ad6  00000000  00000000  0006e7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026d54  00000000  00000000  000702ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000377c1  00000000  00000000  00097002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d6563  00000000  00000000  000ce7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001a4d26  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00006e78  00000000  00000000  001a4d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000cb  00000000  00000000  001abbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002c0 	.word	0x200002c0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ead0 	.word	0x0800ead0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002c4 	.word	0x200002c4
 800017c:	0800ead0 	.word	0x0800ead0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_uldivmod>:
 8001014:	b953      	cbnz	r3, 800102c <__aeabi_uldivmod+0x18>
 8001016:	b94a      	cbnz	r2, 800102c <__aeabi_uldivmod+0x18>
 8001018:	2900      	cmp	r1, #0
 800101a:	bf08      	it	eq
 800101c:	2800      	cmpeq	r0, #0
 800101e:	bf1c      	itt	ne
 8001020:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001024:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001028:	f000 b988 	b.w	800133c <__aeabi_idiv0>
 800102c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001034:	f000 f806 	bl	8001044 <__udivmoddi4>
 8001038:	f8dd e004 	ldr.w	lr, [sp, #4]
 800103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr

08001044 <__udivmoddi4>:
 8001044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	9d08      	ldr	r5, [sp, #32]
 800104a:	468e      	mov	lr, r1
 800104c:	4604      	mov	r4, r0
 800104e:	4688      	mov	r8, r1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d14a      	bne.n	80010ea <__udivmoddi4+0xa6>
 8001054:	428a      	cmp	r2, r1
 8001056:	4617      	mov	r7, r2
 8001058:	d962      	bls.n	8001120 <__udivmoddi4+0xdc>
 800105a:	fab2 f682 	clz	r6, r2
 800105e:	b14e      	cbz	r6, 8001074 <__udivmoddi4+0x30>
 8001060:	f1c6 0320 	rsb	r3, r6, #32
 8001064:	fa01 f806 	lsl.w	r8, r1, r6
 8001068:	fa20 f303 	lsr.w	r3, r0, r3
 800106c:	40b7      	lsls	r7, r6
 800106e:	ea43 0808 	orr.w	r8, r3, r8
 8001072:	40b4      	lsls	r4, r6
 8001074:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001078:	fa1f fc87 	uxth.w	ip, r7
 800107c:	fbb8 f1fe 	udiv	r1, r8, lr
 8001080:	0c23      	lsrs	r3, r4, #16
 8001082:	fb0e 8811 	mls	r8, lr, r1, r8
 8001086:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800108a:	fb01 f20c 	mul.w	r2, r1, ip
 800108e:	429a      	cmp	r2, r3
 8001090:	d909      	bls.n	80010a6 <__udivmoddi4+0x62>
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001098:	f080 80ea 	bcs.w	8001270 <__udivmoddi4+0x22c>
 800109c:	429a      	cmp	r2, r3
 800109e:	f240 80e7 	bls.w	8001270 <__udivmoddi4+0x22c>
 80010a2:	3902      	subs	r1, #2
 80010a4:	443b      	add	r3, r7
 80010a6:	1a9a      	subs	r2, r3, r2
 80010a8:	b2a3      	uxth	r3, r4
 80010aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80010ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80010b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80010ba:	459c      	cmp	ip, r3
 80010bc:	d909      	bls.n	80010d2 <__udivmoddi4+0x8e>
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80010c4:	f080 80d6 	bcs.w	8001274 <__udivmoddi4+0x230>
 80010c8:	459c      	cmp	ip, r3
 80010ca:	f240 80d3 	bls.w	8001274 <__udivmoddi4+0x230>
 80010ce:	443b      	add	r3, r7
 80010d0:	3802      	subs	r0, #2
 80010d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010d6:	eba3 030c 	sub.w	r3, r3, ip
 80010da:	2100      	movs	r1, #0
 80010dc:	b11d      	cbz	r5, 80010e6 <__udivmoddi4+0xa2>
 80010de:	40f3      	lsrs	r3, r6
 80010e0:	2200      	movs	r2, #0
 80010e2:	e9c5 3200 	strd	r3, r2, [r5]
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d905      	bls.n	80010fa <__udivmoddi4+0xb6>
 80010ee:	b10d      	cbz	r5, 80010f4 <__udivmoddi4+0xb0>
 80010f0:	e9c5 0100 	strd	r0, r1, [r5]
 80010f4:	2100      	movs	r1, #0
 80010f6:	4608      	mov	r0, r1
 80010f8:	e7f5      	b.n	80010e6 <__udivmoddi4+0xa2>
 80010fa:	fab3 f183 	clz	r1, r3
 80010fe:	2900      	cmp	r1, #0
 8001100:	d146      	bne.n	8001190 <__udivmoddi4+0x14c>
 8001102:	4573      	cmp	r3, lr
 8001104:	d302      	bcc.n	800110c <__udivmoddi4+0xc8>
 8001106:	4282      	cmp	r2, r0
 8001108:	f200 8105 	bhi.w	8001316 <__udivmoddi4+0x2d2>
 800110c:	1a84      	subs	r4, r0, r2
 800110e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001112:	2001      	movs	r0, #1
 8001114:	4690      	mov	r8, r2
 8001116:	2d00      	cmp	r5, #0
 8001118:	d0e5      	beq.n	80010e6 <__udivmoddi4+0xa2>
 800111a:	e9c5 4800 	strd	r4, r8, [r5]
 800111e:	e7e2      	b.n	80010e6 <__udivmoddi4+0xa2>
 8001120:	2a00      	cmp	r2, #0
 8001122:	f000 8090 	beq.w	8001246 <__udivmoddi4+0x202>
 8001126:	fab2 f682 	clz	r6, r2
 800112a:	2e00      	cmp	r6, #0
 800112c:	f040 80a4 	bne.w	8001278 <__udivmoddi4+0x234>
 8001130:	1a8a      	subs	r2, r1, r2
 8001132:	0c03      	lsrs	r3, r0, #16
 8001134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001138:	b280      	uxth	r0, r0
 800113a:	b2bc      	uxth	r4, r7
 800113c:	2101      	movs	r1, #1
 800113e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001142:	fb0e 221c 	mls	r2, lr, ip, r2
 8001146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800114a:	fb04 f20c 	mul.w	r2, r4, ip
 800114e:	429a      	cmp	r2, r3
 8001150:	d907      	bls.n	8001162 <__udivmoddi4+0x11e>
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8001158:	d202      	bcs.n	8001160 <__udivmoddi4+0x11c>
 800115a:	429a      	cmp	r2, r3
 800115c:	f200 80e0 	bhi.w	8001320 <__udivmoddi4+0x2dc>
 8001160:	46c4      	mov	ip, r8
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	fbb3 f2fe 	udiv	r2, r3, lr
 8001168:	fb0e 3312 	mls	r3, lr, r2, r3
 800116c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001170:	fb02 f404 	mul.w	r4, r2, r4
 8001174:	429c      	cmp	r4, r3
 8001176:	d907      	bls.n	8001188 <__udivmoddi4+0x144>
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800117e:	d202      	bcs.n	8001186 <__udivmoddi4+0x142>
 8001180:	429c      	cmp	r4, r3
 8001182:	f200 80ca 	bhi.w	800131a <__udivmoddi4+0x2d6>
 8001186:	4602      	mov	r2, r0
 8001188:	1b1b      	subs	r3, r3, r4
 800118a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800118e:	e7a5      	b.n	80010dc <__udivmoddi4+0x98>
 8001190:	f1c1 0620 	rsb	r6, r1, #32
 8001194:	408b      	lsls	r3, r1
 8001196:	fa22 f706 	lsr.w	r7, r2, r6
 800119a:	431f      	orrs	r7, r3
 800119c:	fa0e f401 	lsl.w	r4, lr, r1
 80011a0:	fa20 f306 	lsr.w	r3, r0, r6
 80011a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80011a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80011ac:	4323      	orrs	r3, r4
 80011ae:	fa00 f801 	lsl.w	r8, r0, r1
 80011b2:	fa1f fc87 	uxth.w	ip, r7
 80011b6:	fbbe f0f9 	udiv	r0, lr, r9
 80011ba:	0c1c      	lsrs	r4, r3, #16
 80011bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80011c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80011c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80011c8:	45a6      	cmp	lr, r4
 80011ca:	fa02 f201 	lsl.w	r2, r2, r1
 80011ce:	d909      	bls.n	80011e4 <__udivmoddi4+0x1a0>
 80011d0:	193c      	adds	r4, r7, r4
 80011d2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80011d6:	f080 809c 	bcs.w	8001312 <__udivmoddi4+0x2ce>
 80011da:	45a6      	cmp	lr, r4
 80011dc:	f240 8099 	bls.w	8001312 <__udivmoddi4+0x2ce>
 80011e0:	3802      	subs	r0, #2
 80011e2:	443c      	add	r4, r7
 80011e4:	eba4 040e 	sub.w	r4, r4, lr
 80011e8:	fa1f fe83 	uxth.w	lr, r3
 80011ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80011f0:	fb09 4413 	mls	r4, r9, r3, r4
 80011f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80011f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80011fc:	45a4      	cmp	ip, r4
 80011fe:	d908      	bls.n	8001212 <__udivmoddi4+0x1ce>
 8001200:	193c      	adds	r4, r7, r4
 8001202:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8001206:	f080 8082 	bcs.w	800130e <__udivmoddi4+0x2ca>
 800120a:	45a4      	cmp	ip, r4
 800120c:	d97f      	bls.n	800130e <__udivmoddi4+0x2ca>
 800120e:	3b02      	subs	r3, #2
 8001210:	443c      	add	r4, r7
 8001212:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001216:	eba4 040c 	sub.w	r4, r4, ip
 800121a:	fba0 ec02 	umull	lr, ip, r0, r2
 800121e:	4564      	cmp	r4, ip
 8001220:	4673      	mov	r3, lr
 8001222:	46e1      	mov	r9, ip
 8001224:	d362      	bcc.n	80012ec <__udivmoddi4+0x2a8>
 8001226:	d05f      	beq.n	80012e8 <__udivmoddi4+0x2a4>
 8001228:	b15d      	cbz	r5, 8001242 <__udivmoddi4+0x1fe>
 800122a:	ebb8 0203 	subs.w	r2, r8, r3
 800122e:	eb64 0409 	sbc.w	r4, r4, r9
 8001232:	fa04 f606 	lsl.w	r6, r4, r6
 8001236:	fa22 f301 	lsr.w	r3, r2, r1
 800123a:	431e      	orrs	r6, r3
 800123c:	40cc      	lsrs	r4, r1
 800123e:	e9c5 6400 	strd	r6, r4, [r5]
 8001242:	2100      	movs	r1, #0
 8001244:	e74f      	b.n	80010e6 <__udivmoddi4+0xa2>
 8001246:	fbb1 fcf2 	udiv	ip, r1, r2
 800124a:	0c01      	lsrs	r1, r0, #16
 800124c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001250:	b280      	uxth	r0, r0
 8001252:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001256:	463b      	mov	r3, r7
 8001258:	4638      	mov	r0, r7
 800125a:	463c      	mov	r4, r7
 800125c:	46b8      	mov	r8, r7
 800125e:	46be      	mov	lr, r7
 8001260:	2620      	movs	r6, #32
 8001262:	fbb1 f1f7 	udiv	r1, r1, r7
 8001266:	eba2 0208 	sub.w	r2, r2, r8
 800126a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800126e:	e766      	b.n	800113e <__udivmoddi4+0xfa>
 8001270:	4601      	mov	r1, r0
 8001272:	e718      	b.n	80010a6 <__udivmoddi4+0x62>
 8001274:	4610      	mov	r0, r2
 8001276:	e72c      	b.n	80010d2 <__udivmoddi4+0x8e>
 8001278:	f1c6 0220 	rsb	r2, r6, #32
 800127c:	fa2e f302 	lsr.w	r3, lr, r2
 8001280:	40b7      	lsls	r7, r6
 8001282:	40b1      	lsls	r1, r6
 8001284:	fa20 f202 	lsr.w	r2, r0, r2
 8001288:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800128c:	430a      	orrs	r2, r1
 800128e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001292:	b2bc      	uxth	r4, r7
 8001294:	fb0e 3318 	mls	r3, lr, r8, r3
 8001298:	0c11      	lsrs	r1, r2, #16
 800129a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800129e:	fb08 f904 	mul.w	r9, r8, r4
 80012a2:	40b0      	lsls	r0, r6
 80012a4:	4589      	cmp	r9, r1
 80012a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80012aa:	b280      	uxth	r0, r0
 80012ac:	d93e      	bls.n	800132c <__udivmoddi4+0x2e8>
 80012ae:	1879      	adds	r1, r7, r1
 80012b0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80012b4:	d201      	bcs.n	80012ba <__udivmoddi4+0x276>
 80012b6:	4589      	cmp	r9, r1
 80012b8:	d81f      	bhi.n	80012fa <__udivmoddi4+0x2b6>
 80012ba:	eba1 0109 	sub.w	r1, r1, r9
 80012be:	fbb1 f9fe 	udiv	r9, r1, lr
 80012c2:	fb09 f804 	mul.w	r8, r9, r4
 80012c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80012ca:	b292      	uxth	r2, r2
 80012cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012d0:	4542      	cmp	r2, r8
 80012d2:	d229      	bcs.n	8001328 <__udivmoddi4+0x2e4>
 80012d4:	18ba      	adds	r2, r7, r2
 80012d6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80012da:	d2c4      	bcs.n	8001266 <__udivmoddi4+0x222>
 80012dc:	4542      	cmp	r2, r8
 80012de:	d2c2      	bcs.n	8001266 <__udivmoddi4+0x222>
 80012e0:	f1a9 0102 	sub.w	r1, r9, #2
 80012e4:	443a      	add	r2, r7
 80012e6:	e7be      	b.n	8001266 <__udivmoddi4+0x222>
 80012e8:	45f0      	cmp	r8, lr
 80012ea:	d29d      	bcs.n	8001228 <__udivmoddi4+0x1e4>
 80012ec:	ebbe 0302 	subs.w	r3, lr, r2
 80012f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012f4:	3801      	subs	r0, #1
 80012f6:	46e1      	mov	r9, ip
 80012f8:	e796      	b.n	8001228 <__udivmoddi4+0x1e4>
 80012fa:	eba7 0909 	sub.w	r9, r7, r9
 80012fe:	4449      	add	r1, r9
 8001300:	f1a8 0c02 	sub.w	ip, r8, #2
 8001304:	fbb1 f9fe 	udiv	r9, r1, lr
 8001308:	fb09 f804 	mul.w	r8, r9, r4
 800130c:	e7db      	b.n	80012c6 <__udivmoddi4+0x282>
 800130e:	4673      	mov	r3, lr
 8001310:	e77f      	b.n	8001212 <__udivmoddi4+0x1ce>
 8001312:	4650      	mov	r0, sl
 8001314:	e766      	b.n	80011e4 <__udivmoddi4+0x1a0>
 8001316:	4608      	mov	r0, r1
 8001318:	e6fd      	b.n	8001116 <__udivmoddi4+0xd2>
 800131a:	443b      	add	r3, r7
 800131c:	3a02      	subs	r2, #2
 800131e:	e733      	b.n	8001188 <__udivmoddi4+0x144>
 8001320:	f1ac 0c02 	sub.w	ip, ip, #2
 8001324:	443b      	add	r3, r7
 8001326:	e71c      	b.n	8001162 <__udivmoddi4+0x11e>
 8001328:	4649      	mov	r1, r9
 800132a:	e79c      	b.n	8001266 <__udivmoddi4+0x222>
 800132c:	eba1 0109 	sub.w	r1, r1, r9
 8001330:	46c4      	mov	ip, r8
 8001332:	fbb1 f9fe 	udiv	r9, r1, lr
 8001336:	fb09 f804 	mul.w	r8, r9, r4
 800133a:	e7c4      	b.n	80012c6 <__udivmoddi4+0x282>

0800133c <__aeabi_idiv0>:
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <MQTT_DebugPrint>:
#include <string.h>

// LPUART1 Debug Helper (ESP32 UART - Logic Analyzer için)
extern UART_HandleTypeDef hlpuart1;
static void MQTT_DebugPrint(const char* msg) {
    if (msg) {
 8001340:	b1c8      	cbz	r0, 8001376 <MQTT_DebugPrint+0x36>
static void MQTT_DebugPrint(const char* msg) {
 8001342:	b538      	push	{r3, r4, r5, lr}
 8001344:	4605      	mov	r5, r0
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)"[MQTT]", 6, 100);
 8001346:	4c0c      	ldr	r4, [pc, #48]	@ (8001378 <MQTT_DebugPrint+0x38>)
 8001348:	2364      	movs	r3, #100	@ 0x64
 800134a:	2206      	movs	r2, #6
 800134c:	490b      	ldr	r1, [pc, #44]	@ (800137c <MQTT_DebugPrint+0x3c>)
 800134e:	4620      	mov	r0, r4
 8001350:	f007 f8e5 	bl	800851e <HAL_UART_Transmit>
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), 1000);
 8001354:	4628      	mov	r0, r5
 8001356:	f7fe ff63 	bl	8000220 <strlen>
 800135a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135e:	b282      	uxth	r2, r0
 8001360:	4629      	mov	r1, r5
 8001362:	4620      	mov	r0, r4
 8001364:	f007 f8db 	bl	800851e <HAL_UART_Transmit>
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r\n", 2, 100);
 8001368:	2364      	movs	r3, #100	@ 0x64
 800136a:	2202      	movs	r2, #2
 800136c:	4904      	ldr	r1, [pc, #16]	@ (8001380 <MQTT_DebugPrint+0x40>)
 800136e:	4620      	mov	r0, r4
 8001370:	f007 f8d5 	bl	800851e <HAL_UART_Transmit>
    }
}
 8001374:	bd38      	pop	{r3, r4, r5, pc}
 8001376:	4770      	bx	lr
 8001378:	2000111c 	.word	0x2000111c
 800137c:	0800eb14 	.word	0x0800eb14
 8001380:	0800f0f0 	.word	0x0800f0f0

08001384 <HandleConfigMessage>:
	.subtopic = "devices/GW-001/cmd/config",      // Config commands from cloud
	.pubtopic = "devices/GW-001/tele/data_batch"  // Batch data to cloud
};

// Config message handler function
void HandleConfigMessage(const char* message) {
 8001384:	b530      	push	{r4, r5, lr}
 8001386:	b087      	sub	sp, #28
 8001388:	4604      	mov	r4, r0
	MQTT_DebugPrint("HNDL_CFG");
 800138a:	4829      	ldr	r0, [pc, #164]	@ (8001430 <HandleConfigMessage+0xac>)
 800138c:	f7ff ffd8 	bl	8001340 <MQTT_DebugPrint>
	if (!message) {
 8001390:	b1f4      	cbz	r4, 80013d0 <HandleConfigMessage+0x4c>
		MQTT_DebugPrint("ERR_NULL");
		return;
	}

	/* OTA Update format: {"type":150,"version":1} */
	if (strstr(message, "\"type\"") && strstr(message, "150")) {
 8001392:	4928      	ldr	r1, [pc, #160]	@ (8001434 <HandleConfigMessage+0xb0>)
 8001394:	4620      	mov	r0, r4
 8001396:	f00b fb27 	bl	800c9e8 <strstr>
 800139a:	4605      	mov	r5, r0
 800139c:	b120      	cbz	r0, 80013a8 <HandleConfigMessage+0x24>
 800139e:	4926      	ldr	r1, [pc, #152]	@ (8001438 <HandleConfigMessage+0xb4>)
 80013a0:	4620      	mov	r0, r4
 80013a2:	f00b fb21 	bl	800c9e8 <strstr>
 80013a6:	b9b8      	cbnz	r0, 80013d8 <HandleConfigMessage+0x54>
		MQTT_DebugPrint("OTA_TODO");
		return;
	}

	/* Legacy numeric config format: {"type":161,"version":X,"period":Y} */
	if (strstr(message, "\"type\"") && (strstr(message, "161")||strstr(message, "162")||strstr(message, "163"))) {
 80013a8:	2d00      	cmp	r5, #0
 80013aa:	d03c      	beq.n	8001426 <HandleConfigMessage+0xa2>
 80013ac:	4923      	ldr	r1, [pc, #140]	@ (800143c <HandleConfigMessage+0xb8>)
 80013ae:	4620      	mov	r0, r4
 80013b0:	f00b fb1a 	bl	800c9e8 <strstr>
 80013b4:	b920      	cbnz	r0, 80013c0 <HandleConfigMessage+0x3c>
 80013b6:	4922      	ldr	r1, [pc, #136]	@ (8001440 <HandleConfigMessage+0xbc>)
 80013b8:	4620      	mov	r0, r4
 80013ba:	f00b fb15 	bl	800c9e8 <strstr>
 80013be:	b360      	cbz	r0, 800141a <HandleConfigMessage+0x96>
		MQTT_DebugPrint("TYPE161");
 80013c0:	4820      	ldr	r0, [pc, #128]	@ (8001444 <HandleConfigMessage+0xc0>)
 80013c2:	f7ff ffbd 	bl	8001340 <MQTT_DebugPrint>
		ParseConfigMessage(message); // Bu fonksiyon broadcast'i tetiklemeyecek şekilde ayarlandı
 80013c6:	4620      	mov	r0, r4
 80013c8:	f003 f908 	bl	80045dc <ParseConfigMessage>
		return;
	}

	MQTT_DebugPrint("UNKNW_TYPE");
}
 80013cc:	b007      	add	sp, #28
 80013ce:	bd30      	pop	{r4, r5, pc}
		MQTT_DebugPrint("ERR_NULL");
 80013d0:	481d      	ldr	r0, [pc, #116]	@ (8001448 <HandleConfigMessage+0xc4>)
 80013d2:	f7ff ffb5 	bl	8001340 <MQTT_DebugPrint>
		return;
 80013d6:	e7f9      	b.n	80013cc <HandleConfigMessage+0x48>
		MQTT_DebugPrint("TYPE150");
 80013d8:	481c      	ldr	r0, [pc, #112]	@ (800144c <HandleConfigMessage+0xc8>)
 80013da:	f7ff ffb1 	bl	8001340 <MQTT_DebugPrint>
		char* version_ptr = strstr(message, "\"version\":");
 80013de:	491c      	ldr	r1, [pc, #112]	@ (8001450 <HandleConfigMessage+0xcc>)
 80013e0:	4620      	mov	r0, r4
 80013e2:	f00b fb01 	bl	800c9e8 <strstr>
		if (version_ptr) {
 80013e6:	b1b0      	cbz	r0, 8001416 <HandleConfigMessage+0x92>
			version_ptr += 10; // Skip "version":
 80013e8:	300a      	adds	r0, #10
			while (*version_ptr == ' ' || *version_ptr == ':') version_ptr++;
 80013ea:	e000      	b.n	80013ee <HandleConfigMessage+0x6a>
 80013ec:	3001      	adds	r0, #1
 80013ee:	7803      	ldrb	r3, [r0, #0]
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d0fb      	beq.n	80013ec <HandleConfigMessage+0x68>
 80013f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80013f6:	d0f9      	beq.n	80013ec <HandleConfigMessage+0x68>
			version = (uint8_t)atoi(version_ptr);
 80013f8:	f00a fb70 	bl	800badc <atoi>
 80013fc:	b2c3      	uxtb	r3, r0
		snprintf(ver_buf, sizeof(ver_buf), "VER=%d", version);
 80013fe:	4a15      	ldr	r2, [pc, #84]	@ (8001454 <HandleConfigMessage+0xd0>)
 8001400:	2114      	movs	r1, #20
 8001402:	a801      	add	r0, sp, #4
 8001404:	f00b f982 	bl	800c70c <sniprintf>
		MQTT_DebugPrint(ver_buf);
 8001408:	a801      	add	r0, sp, #4
 800140a:	f7ff ff99 	bl	8001340 <MQTT_DebugPrint>
		MQTT_DebugPrint("OTA_TODO");
 800140e:	4812      	ldr	r0, [pc, #72]	@ (8001458 <HandleConfigMessage+0xd4>)
 8001410:	f7ff ff96 	bl	8001340 <MQTT_DebugPrint>
		return;
 8001414:	e7da      	b.n	80013cc <HandleConfigMessage+0x48>
		uint8_t version = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	e7f1      	b.n	80013fe <HandleConfigMessage+0x7a>
	if (strstr(message, "\"type\"") && (strstr(message, "161")||strstr(message, "162")||strstr(message, "163"))) {
 800141a:	4910      	ldr	r1, [pc, #64]	@ (800145c <HandleConfigMessage+0xd8>)
 800141c:	4620      	mov	r0, r4
 800141e:	f00b fae3 	bl	800c9e8 <strstr>
 8001422:	2800      	cmp	r0, #0
 8001424:	d1cc      	bne.n	80013c0 <HandleConfigMessage+0x3c>
	MQTT_DebugPrint("UNKNW_TYPE");
 8001426:	480e      	ldr	r0, [pc, #56]	@ (8001460 <HandleConfigMessage+0xdc>)
 8001428:	f7ff ff8a 	bl	8001340 <MQTT_DebugPrint>
 800142c:	e7ce      	b.n	80013cc <HandleConfigMessage+0x48>
 800142e:	bf00      	nop
 8001430:	0800eb1c 	.word	0x0800eb1c
 8001434:	0800eb34 	.word	0x0800eb34
 8001438:	0800eb40 	.word	0x0800eb40
 800143c:	0800eb70 	.word	0x0800eb70
 8001440:	0800eb64 	.word	0x0800eb64
 8001444:	0800eb6c 	.word	0x0800eb6c
 8001448:	0800eb28 	.word	0x0800eb28
 800144c:	0800eb3c 	.word	0x0800eb3c
 8001450:	0800eb44 	.word	0x0800eb44
 8001454:	0800eb50 	.word	0x0800eb50
 8001458:	0800eb58 	.word	0x0800eb58
 800145c:	0800eb68 	.word	0x0800eb68
 8001460:	0800eb74 	.word	0x0800eb74

08001464 <MY_MqttAwsProcess>:

void MY_MqttAwsProcess(void)
{
 8001464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	EMPA_Section = EMPA_SECTION_MQTT;
 8001466:	4b66      	ldr	r3, [pc, #408]	@ (8001600 <MY_MqttAwsProcess+0x19c>)
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]

	// Task yapısına uyarlandı - her çağrıda bir state işle
	switch (mainState)
 800146c:	4b65      	ldr	r3, [pc, #404]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 800146e:	781c      	ldrb	r4, [r3, #0]
 8001470:	2c05      	cmp	r4, #5
 8001472:	d85b      	bhi.n	800152c <MY_MqttAwsProcess+0xc8>
 8001474:	e8df f004 	tbb	[pc, r4]
 8001478:	b7601c5b 	.word	0xb7601c5b
 800147c:	03bb      	.short	0x03bb
	{
	case STATE_MQTT_COLLECT:
		flag_waitMqttData = SET;
 800147e:	4b62      	ldr	r3, [pc, #392]	@ (8001608 <MY_MqttAwsProcess+0x1a4>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]

		// KRITIK: Her COLLECT state'inde UART interrupt'i başlat
		Wifi_WaitMqttData();
 8001484:	f001 fc56 	bl	8002d34 <Wifi_WaitMqttData>

		if (flag_mqtt_rx_done == 1)
 8001488:	4b60      	ldr	r3, [pc, #384]	@ (800160c <MY_MqttAwsProcess+0x1a8>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d007      	beq.n	80014a2 <MY_MqttAwsProcess+0x3e>
			// Only retrigger when we have work to do
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
		}
		else
		{
			mainState = STATE_MQTT_PUB_TX_MSG;
 8001492:	4b5c      	ldr	r3, [pc, #368]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 8001494:	2203      	movs	r2, #3
 8001496:	701a      	strb	r2, [r3, #0]
			// Only retrigger when we have work to do
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
 8001498:	2100      	movs	r1, #0
 800149a:	2002      	movs	r0, #2
 800149c:	f009 ff36 	bl	800b30c <UTIL_SEQ_SetTask>
 80014a0:	e044      	b.n	800152c <MY_MqttAwsProcess+0xc8>
			mainState = STATE_MQTT_SUB_RX_MSG;
 80014a2:	2002      	movs	r0, #2
 80014a4:	4b57      	ldr	r3, [pc, #348]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 80014a6:	7018      	strb	r0, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
 80014a8:	2100      	movs	r1, #0
 80014aa:	f009 ff2f 	bl	800b30c <UTIL_SEQ_SetTask>
 80014ae:	e03d      	b.n	800152c <MY_MqttAwsProcess+0xc8>
		}
		break;
	case STATE_MQTT_INIT:
		printf("[DEBUG] *** ENTERED STATE_MQTT_INIT - Starting MQTT initialization ***\n");
 80014b0:	4857      	ldr	r0, [pc, #348]	@ (8001610 <MY_MqttAwsProcess+0x1ac>)
 80014b2:	f00b f923 	bl	800c6fc <puts>
		if (MQTT_Init(&mqttConfig) == FUNC_SUCCESSFUL)
 80014b6:	4857      	ldr	r0, [pc, #348]	@ (8001614 <MY_MqttAwsProcess+0x1b0>)
 80014b8:	f000 feb2 	bl	8002220 <MQTT_Init>
 80014bc:	bb60      	cbnz	r0, 8001518 <MY_MqttAwsProcess+0xb4>
		{
			printf("[DEBUG] MQTT_Init SUCCESSFUL!\n");
 80014be:	4856      	ldr	r0, [pc, #344]	@ (8001618 <MY_MqttAwsProcess+0x1b4>)
 80014c0:	f00b f91c 	bl	800c6fc <puts>
			flag_mqtt_connected = SET;  // MQTT connection established
 80014c4:	4b55      	ldr	r3, [pc, #340]	@ (800161c <MY_MqttAwsProcess+0x1b8>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
			if (Wifi_MqttSubInit(mqttPacketBuffer, mqttConfig.subtopic, QOS_0) == FUNC_OK)
 80014ca:	2200      	movs	r2, #0
 80014cc:	4954      	ldr	r1, [pc, #336]	@ (8001620 <MY_MqttAwsProcess+0x1bc>)
 80014ce:	4855      	ldr	r0, [pc, #340]	@ (8001624 <MY_MqttAwsProcess+0x1c0>)
 80014d0:	f001 fade 	bl	8002a90 <Wifi_MqttSubInit>
 80014d4:	b988      	cbnz	r0, 80014fa <MY_MqttAwsProcess+0x96>
			{
				printf("[DEBUG] Wifi_MqttSubInit SUCCESSFUL!\n");
 80014d6:	4854      	ldr	r0, [pc, #336]	@ (8001628 <MY_MqttAwsProcess+0x1c4>)
 80014d8:	f00b f910 	bl	800c6fc <puts>
				cntTryFunc = 0;
 80014dc:	4b53      	ldr	r3, [pc, #332]	@ (800162c <MY_MqttAwsProcess+0x1c8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]

				// KRITIK: UART interrupt'i başlat - subscription mesajlarını dinlemeye başla
				printf("[DEBUG] MQTT subscription successful - starting UART interrupt...\n");
 80014e2:	4853      	ldr	r0, [pc, #332]	@ (8001630 <MY_MqttAwsProcess+0x1cc>)
 80014e4:	f00b f90a 	bl	800c6fc <puts>
				Wifi_WaitMqttData();
 80014e8:	f001 fc24 	bl	8002d34 <Wifi_WaitMqttData>
				printf("[DEBUG] Wifi_WaitMqttData called - switching to COLLECT state\n");
 80014ec:	4851      	ldr	r0, [pc, #324]	@ (8001634 <MY_MqttAwsProcess+0x1d0>)
 80014ee:	f00b f905 	bl	800c6fc <puts>

				mainState = STATE_MQTT_COLLECT; //buraya kadar geliyor
 80014f2:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 80014f4:	2205      	movs	r2, #5
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e014      	b.n	8001524 <MY_MqttAwsProcess+0xc0>
			}
			else
			{
				printf("[DEBUG] Wifi_MqttSubInit FAILED!\n");
 80014fa:	484f      	ldr	r0, [pc, #316]	@ (8001638 <MY_MqttAwsProcess+0x1d4>)
 80014fc:	f00b f8fe 	bl	800c6fc <puts>
				cntTryFunc++;
 8001500:	4a4a      	ldr	r2, [pc, #296]	@ (800162c <MY_MqttAwsProcess+0x1c8>)
 8001502:	7813      	ldrb	r3, [r2, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	7013      	strb	r3, [r2, #0]
				mainState =
					(cntTryFunc == MAX_TRY_FUNC) ? STATE_MQTT_ERROR : STATE_MQTT_INIT;
 800150a:	2b03      	cmp	r3, #3
 800150c:	d002      	beq.n	8001514 <MY_MqttAwsProcess+0xb0>
				mainState =
 800150e:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 8001510:	701c      	strb	r4, [r3, #0]
 8001512:	e007      	b.n	8001524 <MY_MqttAwsProcess+0xc0>
					(cntTryFunc == MAX_TRY_FUNC) ? STATE_MQTT_ERROR : STATE_MQTT_INIT;
 8001514:	2404      	movs	r4, #4
 8001516:	e7fa      	b.n	800150e <MY_MqttAwsProcess+0xaa>
			}
		}
		else
		{
			printf("[DEBUG] MQTT_Init FAILED! Retrying...\n");
 8001518:	4848      	ldr	r0, [pc, #288]	@ (800163c <MY_MqttAwsProcess+0x1d8>)
 800151a:	f00b f8ef 	bl	800c6fc <puts>
			mainState = STATE_MQTT_INIT;
 800151e:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
		}
		// Retry task for next state
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
 8001524:	2100      	movs	r1, #0
 8001526:	2002      	movs	r0, #2
 8001528:	f009 fef0 	bl	800b30c <UTIL_SEQ_SetTask>
		mainState = STATE_MQTT_IDLE;
		// Continue processing
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
		break;
	}
}
 800152c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
 800152e:	2100      	movs	r1, #0
 8001530:	2002      	movs	r0, #2
 8001532:	f009 feeb 	bl	800b30c <UTIL_SEQ_SetTask>
		break;
 8001536:	e7f9      	b.n	800152c <MY_MqttAwsProcess+0xc8>
		if (flag_waitMqttData)
 8001538:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <MY_MqttAwsProcess+0x1a4>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b9c3      	cbnz	r3, 8001570 <MY_MqttAwsProcess+0x10c>
		if (flag_mqtt_rx_done == SET)
 800153e:	4b33      	ldr	r3, [pc, #204]	@ (800160c <MY_MqttAwsProcess+0x1a8>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d019      	beq.n	800157c <MY_MqttAwsProcess+0x118>
		counter_mqtt--;
 8001548:	4a3d      	ldr	r2, [pc, #244]	@ (8001640 <MY_MqttAwsProcess+0x1dc>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	6013      	str	r3, [r2, #0]
		if (counter_mqtt == 0)
 8001550:	b913      	cbnz	r3, 8001558 <MY_MqttAwsProcess+0xf4>
			mainState = STATE_MQTT_COLLECT;
 8001552:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 8001554:	2105      	movs	r1, #5
 8001556:	7011      	strb	r1, [r2, #0]
		if (flag_mqtt_rx_done == SET || counter_mqtt > 0) {
 8001558:	4a2c      	ldr	r2, [pc, #176]	@ (800160c <MY_MqttAwsProcess+0x1a8>)
 800155a:	7812      	ldrb	r2, [r2, #0]
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	2a01      	cmp	r2, #1
 8001560:	d001      	beq.n	8001566 <MY_MqttAwsProcess+0x102>
 8001562:	2b00      	cmp	r3, #0
 8001564:	dde2      	ble.n	800152c <MY_MqttAwsProcess+0xc8>
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
 8001566:	2100      	movs	r1, #0
 8001568:	2002      	movs	r0, #2
 800156a:	f009 fecf 	bl	800b30c <UTIL_SEQ_SetTask>
 800156e:	e7dd      	b.n	800152c <MY_MqttAwsProcess+0xc8>
			Wifi_WaitMqttData();
 8001570:	f001 fbe0 	bl	8002d34 <Wifi_WaitMqttData>
			flag_waitMqttData = RESET;
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <MY_MqttAwsProcess+0x1a4>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	e7e0      	b.n	800153e <MY_MqttAwsProcess+0xda>
			flag_mqtt_rx_done = RESET;
 800157c:	2100      	movs	r1, #0
 800157e:	4b23      	ldr	r3, [pc, #140]	@ (800160c <MY_MqttAwsProcess+0x1a8>)
 8001580:	7019      	strb	r1, [r3, #0]
			mqttPacketBuffer[MQTT_DATA_PACKET_BUFF_SIZE-1] = '\0';
 8001582:	4e28      	ldr	r6, [pc, #160]	@ (8001624 <MY_MqttAwsProcess+0x1c0>)
 8001584:	f886 1257 	strb.w	r1, [r6, #599]	@ 0x257
			memset(mqttMsgData.data, 0, sizeof(mqttMsgData.data));
 8001588:	4c2e      	ldr	r4, [pc, #184]	@ (8001644 <MY_MqttAwsProcess+0x1e0>)
 800158a:	f240 2263 	movw	r2, #611	@ 0x263
 800158e:	4620      	mov	r0, r4
 8001590:	f00b f9ec 	bl	800c96c <memset>
			uint16_t rawLen = (uint16_t)strlen(mqttPacketBuffer);
 8001594:	4630      	mov	r0, r6
 8001596:	f7fe fe43 	bl	8000220 <strlen>
 800159a:	4605      	mov	r5, r0
			UART_MqttPacketParser(&mqttMsgData, mqttPacketBuffer, rawLen);
 800159c:	f1a4 0765 	sub.w	r7, r4, #101	@ 0x65
 80015a0:	b282      	uxth	r2, r0
 80015a2:	4631      	mov	r1, r6
 80015a4:	4638      	mov	r0, r7
 80015a6:	f001 fb93 	bl	8002cd0 <UART_MqttPacketParser>
			printf("\n[MQTT RX] rawLen=%u topic=%s\r\n", rawLen, mqttMsgData.topic_id);
 80015aa:	463a      	mov	r2, r7
 80015ac:	4629      	mov	r1, r5
 80015ae:	4826      	ldr	r0, [pc, #152]	@ (8001648 <MY_MqttAwsProcess+0x1e4>)
 80015b0:	f00b f834 	bl	800c61c <iprintf>
			printf("[MQTT RX] payload: %s\r\n", mqttMsgData.data);
 80015b4:	4621      	mov	r1, r4
 80015b6:	4825      	ldr	r0, [pc, #148]	@ (800164c <MY_MqttAwsProcess+0x1e8>)
 80015b8:	f00b f830 	bl	800c61c <iprintf>
			if (strstr(mqttMsgData.data, "\"type\"") && strstr(mqttMsgData.data, "161")) {
 80015bc:	4924      	ldr	r1, [pc, #144]	@ (8001650 <MY_MqttAwsProcess+0x1ec>)
 80015be:	4620      	mov	r0, r4
 80015c0:	f00b fa12 	bl	800c9e8 <strstr>
 80015c4:	b140      	cbz	r0, 80015d8 <MY_MqttAwsProcess+0x174>
 80015c6:	4923      	ldr	r1, [pc, #140]	@ (8001654 <MY_MqttAwsProcess+0x1f0>)
 80015c8:	4620      	mov	r0, r4
 80015ca:	f00b fa0d 	bl	800c9e8 <strstr>
 80015ce:	b118      	cbz	r0, 80015d8 <MY_MqttAwsProcess+0x174>
				ParseConfigMessage(mqttMsgData.data);
 80015d0:	4620      	mov	r0, r4
 80015d2:	f003 f803 	bl	80045dc <ParseConfigMessage>
			if (strstr(mqttMsgData.data, "\"type\"") && strstr(mqttMsgData.data, "161")) {
 80015d6:	e002      	b.n	80015de <MY_MqttAwsProcess+0x17a>
				HandleConfigMessage(mqttMsgData.data);
 80015d8:	481a      	ldr	r0, [pc, #104]	@ (8001644 <MY_MqttAwsProcess+0x1e0>)
 80015da:	f7ff fed3 	bl	8001384 <HandleConfigMessage>
			mainState = STATE_MQTT_SUB_RX_MSG;
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e7b0      	b.n	8001548 <MY_MqttAwsProcess+0xe4>
		mainState = STATE_MQTT_COLLECT;
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 80015e8:	2205      	movs	r2, #5
 80015ea:	701a      	strb	r2, [r3, #0]
		break;
 80015ec:	e79e      	b.n	800152c <MY_MqttAwsProcess+0xc8>
		cntTryFunc = 0;
 80015ee:	2100      	movs	r1, #0
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MY_MqttAwsProcess+0x1c8>)
 80015f2:	7019      	strb	r1, [r3, #0]
		mainState = STATE_MQTT_IDLE;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <MY_MqttAwsProcess+0x1a0>)
 80015f6:	7019      	strb	r1, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f009 fe87 	bl	800b30c <UTIL_SEQ_SetTask>
}
 80015fe:	e795      	b.n	800152c <MY_MqttAwsProcess+0xc8>
 8001600:	20000d13 	.word	0x20000d13
 8001604:	200000a0 	.word	0x200000a0
 8001608:	200005aa 	.word	0x200005aa
 800160c:	20000d22 	.word	0x20000d22
 8001610:	0800eb80 	.word	0x0800eb80
 8001614:	20000000 	.word	0x20000000
 8001618:	0800ebc8 	.word	0x0800ebc8
 800161c:	200005a9 	.word	0x200005a9
 8001620:	2000003c 	.word	0x2000003c
 8001624:	200005ac 	.word	0x200005ac
 8001628:	0800ebe8 	.word	0x0800ebe8
 800162c:	200005a8 	.word	0x200005a8
 8001630:	0800ec10 	.word	0x0800ec10
 8001634:	0800ec54 	.word	0x0800ec54
 8001638:	0800ec94 	.word	0x0800ec94
 800163c:	0800ecb8 	.word	0x0800ecb8
 8001640:	200002dc 	.word	0x200002dc
 8001644:	20000345 	.word	0x20000345
 8001648:	0800ece0 	.word	0x0800ece0
 800164c:	0800ed00 	.word	0x0800ed00
 8001650:	0800eb34 	.word	0x0800eb34
 8001654:	0800eb70 	.word	0x0800eb70

08001658 <MQTT_PrintDebugBuffer>:
    printf("[DEBUG] Buffer cleared\n");
}

void MQTT_PrintDebugBuffer(void)
{
    if(debugBufferLen > 0) {
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MQTT_PrintDebugBuffer+0x40>)
 800165a:	8819      	ldrh	r1, [r3, #0]
 800165c:	b901      	cbnz	r1, 8001660 <MQTT_PrintDebugBuffer+0x8>
 800165e:	4770      	bx	lr
{
 8001660:	b510      	push	{r4, lr}
        debugBuffer[debugBufferLen] = 0; // null terminate
 8001662:	4a0e      	ldr	r2, [pc, #56]	@ (800169c <MQTT_PrintDebugBuffer+0x44>)
 8001664:	2400      	movs	r4, #0
 8001666:	5454      	strb	r4, [r2, r1]
        printf("[DEBUG_BUFFER] Total %d bytes:\n%s\n", debugBufferLen, debugBuffer);
 8001668:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <MQTT_PrintDebugBuffer+0x48>)
 800166a:	f00a ffd7 	bl	800c61c <iprintf>
        printf("[DEBUG_BUFFER] HEX: ");
 800166e:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <MQTT_PrintDebugBuffer+0x4c>)
 8001670:	f00a ffd4 	bl	800c61c <iprintf>
        for(int i = 0; i < debugBufferLen && i < 100; i++) {
 8001674:	e005      	b.n	8001682 <MQTT_PrintDebugBuffer+0x2a>
            printf("%02X ", (uint8_t)debugBuffer[i]);
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MQTT_PrintDebugBuffer+0x44>)
 8001678:	5d19      	ldrb	r1, [r3, r4]
 800167a:	480b      	ldr	r0, [pc, #44]	@ (80016a8 <MQTT_PrintDebugBuffer+0x50>)
 800167c:	f00a ffce 	bl	800c61c <iprintf>
        for(int i = 0; i < debugBufferLen && i < 100; i++) {
 8001680:	3401      	adds	r4, #1
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <MQTT_PrintDebugBuffer+0x40>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	42a3      	cmp	r3, r4
 8001688:	dd01      	ble.n	800168e <MQTT_PrintDebugBuffer+0x36>
 800168a:	2c63      	cmp	r4, #99	@ 0x63
 800168c:	ddf3      	ble.n	8001676 <MQTT_PrintDebugBuffer+0x1e>
        }
        printf("\n");
 800168e:	200a      	movs	r0, #10
 8001690:	f00a ffd6 	bl	800c640 <putchar>
    }
}
 8001694:	bd10      	pop	{r4, pc}
 8001696:	bf00      	nop
 8001698:	20000804 	.word	0x20000804
 800169c:	20000808 	.word	0x20000808
 80016a0:	0800ed8c 	.word	0x0800ed8c
 80016a4:	0800edb0 	.word	0x0800edb0
 80016a8:	0800edc8 	.word	0x0800edc8

080016ac <MQTT_LineAssembler_Byte>:

void MQTT_LineAssembler_Byte(uint8_t ch)
{
 80016ac:	b530      	push	{r4, r5, lr}
 80016ae:	b0e5      	sub	sp, #404	@ 0x194
 80016b0:	4604      	mov	r4, r0
    // Debug buffer'a ekle (overflow kontrolü ile)
    if(debugBufferLen < sizeof(debugBuffer) - 1) {
 80016b2:	4b64      	ldr	r3, [pc, #400]	@ (8001844 <MQTT_LineAssembler_Byte+0x198>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d804      	bhi.n	80016c8 <MQTT_LineAssembler_Byte+0x1c>
        debugBuffer[debugBufferLen++] = ch;
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	4a60      	ldr	r2, [pc, #384]	@ (8001844 <MQTT_LineAssembler_Byte+0x198>)
 80016c2:	8011      	strh	r1, [r2, #0]
 80016c4:	4a60      	ldr	r2, [pc, #384]	@ (8001848 <MQTT_LineAssembler_Byte+0x19c>)
 80016c6:	54d0      	strb	r0, [r2, r3]
    }

    // Her byte için debug print (hex ve karakter)
    printf("[B]%02X", ch);
 80016c8:	4621      	mov	r1, r4
 80016ca:	4860      	ldr	r0, [pc, #384]	@ (800184c <MQTT_LineAssembler_Byte+0x1a0>)
 80016cc:	f00a ffa6 	bl	800c61c <iprintf>
    if(ch >= 32 && ch <= 126) printf("(%c)", ch);
 80016d0:	f1a4 0320 	sub.w	r3, r4, #32
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80016d8:	d915      	bls.n	8001706 <MQTT_LineAssembler_Byte+0x5a>
    if(ch == '\r') printf("(CR)");
 80016da:	2c0d      	cmp	r4, #13
 80016dc:	d018      	beq.n	8001710 <MQTT_LineAssembler_Byte+0x64>
    if(ch == '\n') printf("(LF)\n");
 80016de:	2c0a      	cmp	r4, #10
 80016e0:	d01a      	beq.n	8001718 <MQTT_LineAssembler_Byte+0x6c>
    else printf(" ");
 80016e2:	2020      	movs	r0, #32
 80016e4:	f00a ffac 	bl	800c640 <putchar>

    if(mqttLineLen < sizeof(mqttLineBuf)-1) {
 80016e8:	4b59      	ldr	r3, [pc, #356]	@ (8001850 <MQTT_LineAssembler_Byte+0x1a4>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	2bfe      	cmp	r3, #254	@ 0xfe
 80016ee:	f200 80a2 	bhi.w	8001836 <MQTT_LineAssembler_Byte+0x18a>
        if(ch != '\r' && ch != '\n') {
 80016f2:	2c0d      	cmp	r4, #13
 80016f4:	d014      	beq.n	8001720 <MQTT_LineAssembler_Byte+0x74>
 80016f6:	2c0a      	cmp	r4, #10
 80016f8:	d012      	beq.n	8001720 <MQTT_LineAssembler_Byte+0x74>
            mqttLineBuf[mqttLineLen++] = (char)ch;
 80016fa:	1c59      	adds	r1, r3, #1
 80016fc:	4a54      	ldr	r2, [pc, #336]	@ (8001850 <MQTT_LineAssembler_Byte+0x1a4>)
 80016fe:	8011      	strh	r1, [r2, #0]
 8001700:	4a54      	ldr	r2, [pc, #336]	@ (8001854 <MQTT_LineAssembler_Byte+0x1a8>)
 8001702:	54d4      	strb	r4, [r2, r3]
 8001704:	e010      	b.n	8001728 <MQTT_LineAssembler_Byte+0x7c>
    if(ch >= 32 && ch <= 126) printf("(%c)", ch);
 8001706:	4621      	mov	r1, r4
 8001708:	4853      	ldr	r0, [pc, #332]	@ (8001858 <MQTT_LineAssembler_Byte+0x1ac>)
 800170a:	f00a ff87 	bl	800c61c <iprintf>
 800170e:	e7e4      	b.n	80016da <MQTT_LineAssembler_Byte+0x2e>
    if(ch == '\r') printf("(CR)");
 8001710:	4852      	ldr	r0, [pc, #328]	@ (800185c <MQTT_LineAssembler_Byte+0x1b0>)
 8001712:	f00a ff83 	bl	800c61c <iprintf>
 8001716:	e7e2      	b.n	80016de <MQTT_LineAssembler_Byte+0x32>
    if(ch == '\n') printf("(LF)\n");
 8001718:	4851      	ldr	r0, [pc, #324]	@ (8001860 <MQTT_LineAssembler_Byte+0x1b4>)
 800171a:	f00a ffef 	bl	800c6fc <puts>
 800171e:	e7e3      	b.n	80016e8 <MQTT_LineAssembler_Byte+0x3c>
        } else {
            if(mqttLineLen > 0) {
 8001720:	b923      	cbnz	r3, 800172c <MQTT_LineAssembler_Byte+0x80>
                    // Debug buffer'ı yazdır ve temizle
                    MQTT_PrintDebugBuffer();
                    debugBufferLen = 0;
                }
            }
            mqttLineLen = 0;
 8001722:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <MQTT_LineAssembler_Byte+0x1a4>)
 8001724:	2200      	movs	r2, #0
 8001726:	801a      	strh	r2, [r3, #0]
        }
    } else {
        printf("[OVERFLOW] Line too long, resetting\n");
        mqttLineLen = 0; // overflow reset
    }
}// Callback sadece yeniden silahlamak için minimal bırakıldı (şu an IRQ doğrudan RDR okuyacak)
 8001728:	b065      	add	sp, #404	@ 0x194
 800172a:	bd30      	pop	{r4, r5, pc}
                mqttLineBuf[mqttLineLen] = 0;
 800172c:	4c49      	ldr	r4, [pc, #292]	@ (8001854 <MQTT_LineAssembler_Byte+0x1a8>)
 800172e:	2200      	movs	r2, #0
 8001730:	54e2      	strb	r2, [r4, r3]
                printf("[LINE] %s\n", mqttLineBuf);
 8001732:	4621      	mov	r1, r4
 8001734:	484b      	ldr	r0, [pc, #300]	@ (8001864 <MQTT_LineAssembler_Byte+0x1b8>)
 8001736:	f00a ff71 	bl	800c61c <iprintf>
                if(strstr(mqttLineBuf, "MQTTSUBRECV") && strchr(mqttLineBuf,'{') && strrchr(mqttLineBuf,'}')) {
 800173a:	494b      	ldr	r1, [pc, #300]	@ (8001868 <MQTT_LineAssembler_Byte+0x1bc>)
 800173c:	4620      	mov	r0, r4
 800173e:	f00b f953 	bl	800c9e8 <strstr>
 8001742:	2800      	cmp	r0, #0
 8001744:	d0ed      	beq.n	8001722 <MQTT_LineAssembler_Byte+0x76>
 8001746:	217b      	movs	r1, #123	@ 0x7b
 8001748:	4620      	mov	r0, r4
 800174a:	f00b f917 	bl	800c97c <strchr>
 800174e:	2800      	cmp	r0, #0
 8001750:	d0e7      	beq.n	8001722 <MQTT_LineAssembler_Byte+0x76>
 8001752:	217d      	movs	r1, #125	@ 0x7d
 8001754:	4620      	mov	r0, r4
 8001756:	f00b f931 	bl	800c9bc <strrchr>
 800175a:	2800      	cmp	r0, #0
 800175c:	d0e1      	beq.n	8001722 <MQTT_LineAssembler_Byte+0x76>
                    memset(mqttPacketBuffer,0,MQTT_DATA_PACKET_BUFF_SIZE);
 800175e:	4c43      	ldr	r4, [pc, #268]	@ (800186c <MQTT_LineAssembler_Byte+0x1c0>)
 8001760:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001764:	2100      	movs	r1, #0
 8001766:	4620      	mov	r0, r4
 8001768:	f00b f900 	bl	800c96c <memset>
                    strncpy(mqttPacketBuffer, mqttLineBuf, MQTT_DATA_PACKET_BUFF_SIZE-1);
 800176c:	4d39      	ldr	r5, [pc, #228]	@ (8001854 <MQTT_LineAssembler_Byte+0x1a8>)
 800176e:	f240 128f 	movw	r2, #399	@ 0x18f
 8001772:	4629      	mov	r1, r5
 8001774:	4620      	mov	r0, r4
 8001776:	f00b f90e 	bl	800c996 <strncpy>
                    flag_mqtt_rx_done = SET;
 800177a:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <MQTT_LineAssembler_Byte+0x1c4>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
                    printf("[UART][MQTT] COMPLETE LINE: %s\n", mqttPacketBuffer);
 8001780:	4621      	mov	r1, r4
 8001782:	483c      	ldr	r0, [pc, #240]	@ (8001874 <MQTT_LineAssembler_Byte+0x1c8>)
 8001784:	f00a ff4a 	bl	800c61c <iprintf>
                    char *json_start = strchr(mqttLineBuf, '{');
 8001788:	217b      	movs	r1, #123	@ 0x7b
 800178a:	4628      	mov	r0, r5
 800178c:	f00b f8f6 	bl	800c97c <strchr>
 8001790:	4604      	mov	r4, r0
                    char *json_end = strrchr(mqttLineBuf, '}');
 8001792:	217d      	movs	r1, #125	@ 0x7d
 8001794:	4628      	mov	r0, r5
 8001796:	f00b f911 	bl	800c9bc <strrchr>
                    if(json_start && json_end && json_end > json_start) {
 800179a:	b134      	cbz	r4, 80017aa <MQTT_LineAssembler_Byte+0xfe>
 800179c:	b128      	cbz	r0, 80017aa <MQTT_LineAssembler_Byte+0xfe>
 800179e:	4284      	cmp	r4, r0
 80017a0:	d203      	bcs.n	80017aa <MQTT_LineAssembler_Byte+0xfe>
                        size_t len = (size_t)(json_end - json_start + 1);
 80017a2:	1b05      	subs	r5, r0, r4
 80017a4:	3501      	adds	r5, #1
                        if(len < 200) {
 80017a6:	2dc7      	cmp	r5, #199	@ 0xc7
 80017a8:	d905      	bls.n	80017b6 <MQTT_LineAssembler_Byte+0x10a>
                    MQTT_PrintDebugBuffer();
 80017aa:	f7ff ff55 	bl	8001658 <MQTT_PrintDebugBuffer>
                    debugBufferLen = 0;
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <MQTT_LineAssembler_Byte+0x198>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	801a      	strh	r2, [r3, #0]
 80017b4:	e7b5      	b.n	8001722 <MQTT_LineAssembler_Byte+0x76>
                            memset(json_clean, 0, sizeof(json_clean));
 80017b6:	22c8      	movs	r2, #200	@ 0xc8
 80017b8:	2100      	movs	r1, #0
 80017ba:	4668      	mov	r0, sp
 80017bc:	f00b f8d6 	bl	800c96c <memset>
                            memcpy(json_clean, json_start, len);
 80017c0:	462a      	mov	r2, r5
 80017c2:	4621      	mov	r1, r4
 80017c4:	4668      	mov	r0, sp
 80017c6:	f00b f99c 	bl	800cb02 <memcpy>
                            json_clean[len] = 0;
 80017ca:	2400      	movs	r4, #0
 80017cc:	f80d 4005 	strb.w	r4, [sp, r5]
                            printf("[JSON_EXTRACT] %s\n", json_clean);
 80017d0:	4669      	mov	r1, sp
 80017d2:	4829      	ldr	r0, [pc, #164]	@ (8001878 <MQTT_LineAssembler_Byte+0x1cc>)
 80017d4:	f00a ff22 	bl	800c61c <iprintf>
                            for(int i = 0; i < len && j < sizeof(json_final)-1; i++) {
 80017d8:	4623      	mov	r3, r4
                            int j = 0;
 80017da:	4622      	mov	r2, r4
                            for(int i = 0; i < len && j < sizeof(json_final)-1; i++) {
 80017dc:	e006      	b.n	80017ec <MQTT_LineAssembler_Byte+0x140>
                                    json_final[j++] = json_clean[i];
 80017de:	f502 70c8 	add.w	r0, r2, #400	@ 0x190
 80017e2:	4468      	add	r0, sp
 80017e4:	f800 1cc8 	strb.w	r1, [r0, #-200]
 80017e8:	3201      	adds	r2, #1
                            for(int i = 0; i < len && j < sizeof(json_final)-1; i++) {
 80017ea:	3301      	adds	r3, #1
 80017ec:	42ab      	cmp	r3, r5
 80017ee:	d213      	bcs.n	8001818 <MQTT_LineAssembler_Byte+0x16c>
 80017f0:	2ac6      	cmp	r2, #198	@ 0xc6
 80017f2:	d811      	bhi.n	8001818 <MQTT_LineAssembler_Byte+0x16c>
                                if(json_clean[i] == '\\' && json_clean[i+1] == '"') {
 80017f4:	f81d 1003 	ldrb.w	r1, [sp, r3]
 80017f8:	295c      	cmp	r1, #92	@ 0x5c
 80017fa:	d1f0      	bne.n	80017de <MQTT_LineAssembler_Byte+0x132>
 80017fc:	1c58      	adds	r0, r3, #1
 80017fe:	f81d 4000 	ldrb.w	r4, [sp, r0]
 8001802:	2c22      	cmp	r4, #34	@ 0x22
 8001804:	d1eb      	bne.n	80017de <MQTT_LineAssembler_Byte+0x132>
                                    json_final[j++] = '"';
 8001806:	f502 73c8 	add.w	r3, r2, #400	@ 0x190
 800180a:	446b      	add	r3, sp
 800180c:	2122      	movs	r1, #34	@ 0x22
 800180e:	f803 1cc8 	strb.w	r1, [r3, #-200]
                                    i++; // skip next char
 8001812:	4603      	mov	r3, r0
                                    json_final[j++] = '"';
 8001814:	3201      	adds	r2, #1
                                    i++; // skip next char
 8001816:	e7e8      	b.n	80017ea <MQTT_LineAssembler_Byte+0x13e>
                            json_final[j] = 0;
 8001818:	f502 73c8 	add.w	r3, r2, #400	@ 0x190
 800181c:	eb0d 0203 	add.w	r2, sp, r3
 8001820:	2300      	movs	r3, #0
 8001822:	f802 3cc8 	strb.w	r3, [r2, #-200]
                            printf("[JSON_CLEAN] %s\n", json_final);
 8001826:	a932      	add	r1, sp, #200	@ 0xc8
 8001828:	4814      	ldr	r0, [pc, #80]	@ (800187c <MQTT_LineAssembler_Byte+0x1d0>)
 800182a:	f00a fef7 	bl	800c61c <iprintf>
                            ParseConfigMessage(json_final);
 800182e:	a832      	add	r0, sp, #200	@ 0xc8
 8001830:	f002 fed4 	bl	80045dc <ParseConfigMessage>
 8001834:	e7b9      	b.n	80017aa <MQTT_LineAssembler_Byte+0xfe>
        printf("[OVERFLOW] Line too long, resetting\n");
 8001836:	4812      	ldr	r0, [pc, #72]	@ (8001880 <MQTT_LineAssembler_Byte+0x1d4>)
 8001838:	f00a ff60 	bl	800c6fc <puts>
        mqttLineLen = 0; // overflow reset
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <MQTT_LineAssembler_Byte+0x1a4>)
 800183e:	2200      	movs	r2, #0
 8001840:	801a      	strh	r2, [r3, #0]
}// Callback sadece yeniden silahlamak için minimal bırakıldı (şu an IRQ doğrudan RDR okuyacak)
 8001842:	e771      	b.n	8001728 <MQTT_LineAssembler_Byte+0x7c>
 8001844:	20000804 	.word	0x20000804
 8001848:	20000808 	.word	0x20000808
 800184c:	0800edd0 	.word	0x0800edd0
 8001850:	20000c08 	.word	0x20000c08
 8001854:	20000c0c 	.word	0x20000c0c
 8001858:	0800edd8 	.word	0x0800edd8
 800185c:	0800ede0 	.word	0x0800ede0
 8001860:	0800ede8 	.word	0x0800ede8
 8001864:	0800edf0 	.word	0x0800edf0
 8001868:	0800edfc 	.word	0x0800edfc
 800186c:	200005ac 	.word	0x200005ac
 8001870:	20000d22 	.word	0x20000d22
 8001874:	0800ee08 	.word	0x0800ee08
 8001878:	0800ee28 	.word	0x0800ee28
 800187c:	0800ee3c 	.word	0x0800ee3c
 8001880:	0800ee50 	.word	0x0800ee50

08001884 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  cnt_callback++;
 8001884:	4a0b      	ldr	r2, [pc, #44]	@ (80018b4 <HAL_UART_RxCpltCallback+0x30>)
 8001886:	6813      	ldr	r3, [r2, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	6013      	str	r3, [r2, #0]
  if(huart->Instance == LPUART1) {
 800188c:	6802      	ldr	r2, [r0, #0]
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_UART_RxCpltCallback+0x34>)
 8001890:	429a      	cmp	r2, r3
 8001892:	d000      	beq.n	8001896 <HAL_UART_RxCpltCallback+0x12>
 8001894:	4770      	bx	lr
{
 8001896:	b510      	push	{r4, lr}
 8001898:	4604      	mov	r4, r0
    // Eğer HAL kendi bufferına aldıysa (kullanılmıyor ama güvenlik)
    if(mqttDataBuffer[0] != 0) {
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_UART_RxCpltCallback+0x38>)
 800189c:	7818      	ldrb	r0, [r3, #0]
 800189e:	b928      	cbnz	r0, 80018ac <HAL_UART_RxCpltCallback+0x28>
      MQTT_LineAssembler_Byte((uint8_t)mqttDataBuffer[0]);
    }
    HAL_UART_Receive_IT(huart, (uint8_t*)mqttDataBuffer, 1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	4906      	ldr	r1, [pc, #24]	@ (80018bc <HAL_UART_RxCpltCallback+0x38>)
 80018a4:	4620      	mov	r0, r4
 80018a6:	f007 f831 	bl	800890c <HAL_UART_Receive_IT>
  }
}
 80018aa:	bd10      	pop	{r4, pc}
      MQTT_LineAssembler_Byte((uint8_t)mqttDataBuffer[0]);
 80018ac:	f7ff fefe 	bl	80016ac <MQTT_LineAssembler_Byte>
 80018b0:	e7f6      	b.n	80018a0 <HAL_UART_RxCpltCallback+0x1c>
 80018b2:	bf00      	nop
 80018b4:	20000d0c 	.word	0x20000d0c
 80018b8:	40008000 	.word	0x40008000
 80018bc:	20000d10 	.word	0x20000d10

080018c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018c0:	b500      	push	{lr}
 80018c2:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80018ca:	f042 0204 	orr.w	r2, r2, #4
 80018ce:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80018d2:	f002 0204 	and.w	r2, r2, #4
 80018d6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80018d8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80018da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80018ea:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	4611      	mov	r1, r2
 80018f0:	200b      	movs	r0, #11
 80018f2:	f003 fb19 	bl	8004f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018f6:	200b      	movs	r0, #11
 80018f8:	f003 fb26 	bl	8004f48 <HAL_NVIC_EnableIRQ>

}
 80018fc:	b003      	add	sp, #12
 80018fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001904 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001908:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	2400      	movs	r4, #0
 800190c:	9403      	str	r4, [sp, #12]
 800190e:	9404      	str	r4, [sp, #16]
 8001910:	9405      	str	r4, [sp, #20]
 8001912:	9406      	str	r4, [sp, #24]
 8001914:	9407      	str	r4, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800191c:	f042 0202 	orr.w	r2, r2, #2
 8001920:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001922:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001924:	f002 0202 	and.w	r2, r2, #2
 8001928:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800192a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800192c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800192e:	f042 0204 	orr.w	r2, r2, #4
 8001932:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001934:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001936:	f002 0204 	and.w	r2, r2, #4
 800193a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800193c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800193e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800194e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin, GPIO_PIN_RESET);
 8001950:	4f23      	ldr	r7, [pc, #140]	@ (80019e0 <MX_GPIO_Init+0xdc>)
 8001952:	4622      	mov	r2, r4
 8001954:	f44f 4132 	mov.w	r1, #45568	@ 0xb200
 8001958:	4638      	mov	r0, r7
 800195a:	f003 fed1 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDY_GPIO_Port, LEDY_Pin, GPIO_PIN_RESET);
 800195e:	4e21      	ldr	r6, [pc, #132]	@ (80019e4 <MX_GPIO_Init+0xe0>)
 8001960:	4622      	mov	r2, r4
 8001962:	2108      	movs	r1, #8
 8001964:	4630      	mov	r0, r6
 8001966:	f003 fecb 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800196a:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 800196e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2501      	movs	r5, #1
 8001972:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001976:	2302      	movs	r3, #2
 8001978:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	a903      	add	r1, sp, #12
 800197c:	4638      	mov	r0, r7
 800197e:	f003 fd6f 	bl	8005460 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDY_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin;
 8001982:	2308      	movs	r3, #8
 8001984:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LEDY_GPIO_Port, &GPIO_InitStruct);
 800198c:	a903      	add	r1, sp, #12
 800198e:	4630      	mov	r0, r6
 8001990:	f003 fd66 	bl	8005460 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8001994:	f04f 0903 	mov.w	r9, #3
 8001998:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800199c:	f44f 1804 	mov.w	r8, #2162688	@ 0x210000
 80019a0:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	a903      	add	r1, sp, #12
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ac:	f003 fd58 	bl	8005460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROB2_Pin PROB1_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80019b0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019b4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	f8cd 9018 	str.w	r9, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	a903      	add	r1, sp, #12
 80019c0:	4638      	mov	r0, r7
 80019c2:	f003 fd4d 	bl	8005460 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT3_Pin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80019c6:	2340      	movs	r3, #64	@ 0x40
 80019c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ca:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ce:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80019d0:	a903      	add	r1, sp, #12
 80019d2:	4630      	mov	r0, r6
 80019d4:	f003 fd44 	bl	8005460 <HAL_GPIO_Init>

}
 80019d8:	b009      	add	sp, #36	@ 0x24
 80019da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019de:	bf00      	nop
 80019e0:	48000400 	.word	0x48000400
 80019e4:	48000800 	.word	0x48000800

080019e8 <Custom_Delay_ms>:

void Custom_Delay_ms(uint32_t delay_ms) {

	uint32_t cycles_per_ms = 4362;

	for (uint32_t ms = 0; ms < delay_ms; ms++) {
 80019e8:	2100      	movs	r1, #0
 80019ea:	4281      	cmp	r1, r0
 80019ec:	d212      	bcs.n	8001a14 <Custom_Delay_ms+0x2c>
void Custom_Delay_ms(uint32_t delay_ms) {
 80019ee:	b082      	sub	sp, #8
 80019f0:	e00b      	b.n	8001a0a <Custom_Delay_ms+0x22>
		for (volatile uint32_t i = 0; i < cycles_per_ms; i++) {
			__NOP();
 80019f2:	bf00      	nop
		for (volatile uint32_t i = 0; i < cycles_per_ms; i++) {
 80019f4:	9b01      	ldr	r3, [sp, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	9a01      	ldr	r2, [sp, #4]
 80019fc:	f241 1309 	movw	r3, #4361	@ 0x1109
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d9f6      	bls.n	80019f2 <Custom_Delay_ms+0xa>
	for (uint32_t ms = 0; ms < delay_ms; ms++) {
 8001a04:	3101      	adds	r1, #1
 8001a06:	4281      	cmp	r1, r0
 8001a08:	d202      	bcs.n	8001a10 <Custom_Delay_ms+0x28>
		for (volatile uint32_t i = 0; i < cycles_per_ms; i++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	e7f4      	b.n	80019fa <Custom_Delay_ms+0x12>
		}
	}
}
 8001a10:	b002      	add	sp, #8
 8001a12:	4770      	bx	lr
 8001a14:	4770      	bx	lr

08001a16 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a16:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a18:	e7fe      	b.n	8001a18 <Error_Handler+0x2>

08001a1a <SystemClock_Config>:
{
 8001a1a:	b510      	push	{r4, lr}
 8001a1c:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1e:	2248      	movs	r2, #72	@ 0x48
 8001a20:	2100      	movs	r1, #0
 8001a22:	a808      	add	r0, sp, #32
 8001a24:	f00a ffa2 	bl	800c96c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a28:	2400      	movs	r4, #0
 8001a2a:	9401      	str	r4, [sp, #4]
 8001a2c:	9402      	str	r4, [sp, #8]
 8001a2e:	9403      	str	r4, [sp, #12]
 8001a30:	9404      	str	r4, [sp, #16]
 8001a32:	9405      	str	r4, [sp, #20]
 8001a34:	9406      	str	r4, [sp, #24]
 8001a36:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001a38:	f003 fe70 	bl	800571c <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a40:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001a44:	f023 0318 	bic.w	r3, r3, #24
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a50:	6813      	ldr	r3, [r2, #0]
 8001a52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a66:	2324      	movs	r3, #36	@ 0x24
 8001a68:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a6a:	2381      	movs	r3, #129	@ 0x81
 8001a6c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a72:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001a74:	23b0      	movs	r3, #176	@ 0xb0
 8001a76:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a78:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7a:	a808      	add	r0, sp, #32
 8001a7c:	f003 ffe8 	bl	8005a50 <HAL_RCC_OscConfig>
 8001a80:	b970      	cbnz	r0, 8001aa0 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001a82:	234f      	movs	r3, #79	@ 0x4f
 8001a84:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a86:	2300      	movs	r3, #0
 8001a88:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001a90:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a92:	2102      	movs	r1, #2
 8001a94:	a801      	add	r0, sp, #4
 8001a96:	f004 fb0d 	bl	80060b4 <HAL_RCC_ClockConfig>
 8001a9a:	b918      	cbnz	r0, 8001aa4 <SystemClock_Config+0x8a>
}
 8001a9c:	b01a      	add	sp, #104	@ 0x68
 8001a9e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001aa0:	f7ff ffb9 	bl	8001a16 <Error_Handler>
    Error_Handler();
 8001aa4:	f7ff ffb7 	bl	8001a16 <Error_Handler>

08001aa8 <main>:
{
 8001aa8:	b500      	push	{lr}
 8001aaa:	b0a5      	sub	sp, #148	@ 0x94
  HAL_Init();
 8001aac:	f003 f99a 	bl	8004de4 <HAL_Init>
  SystemClock_Config();
 8001ab0:	f7ff ffb3 	bl	8001a1a <SystemClock_Config>
  MX_GPIO_Init();
 8001ab4:	f7ff ff26 	bl	8001904 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8001ab8:	f001 ff45 	bl	8003946 <MX_SubGHz_Phy_Init>
  MX_LPUART1_UART_Init();
 8001abc:	f001 fd50 	bl	8003560 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001ac0:	f001 fbe0 	bl	8003284 <MX_TIM1_Init>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_MQTT_Process), UTIL_SEQ_RFU, MY_MqttAwsProcess);
 8001ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8001b70 <main+0xc8>)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f009 fce9 	bl	800b4a0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f009 fc1b 	bl	800b30c <UTIL_SEQ_SetTask>
 8001ad6:	e020      	b.n	8001b1a <main+0x72>
				printf("*** MQTT test message failed ***\n\r");
 8001ad8:	4826      	ldr	r0, [pc, #152]	@ (8001b74 <main+0xcc>)
 8001ada:	f00a fd9f 	bl	800c61c <iprintf>
			StartLoRaGateway();
 8001ade:	f002 fd11 	bl	8004504 <StartLoRaGateway>
			lora_started = 1;
 8001ae2:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <main+0xd0>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
			printf("*** LoRa Gateway Started Successfully ***\n\r");
 8001ae8:	4824      	ldr	r0, [pc, #144]	@ (8001b7c <main+0xd4>)
 8001aea:	f00a fd97 	bl	800c61c <iprintf>
		if (lora_started) {
 8001aee:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <main+0xd0>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d138      	bne.n	8001b68 <main+0xc0>
		mqtt_periodic_trigger++;
 8001af6:	4a22      	ldr	r2, [pc, #136]	@ (8001b80 <main+0xd8>)
 8001af8:	6813      	ldr	r3, [r2, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	6013      	str	r3, [r2, #0]
		if (mqtt_periodic_trigger > 5000) {
 8001afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d905      	bls.n	8001b12 <main+0x6a>
			mqtt_periodic_trigger = 0;
 8001b06:	2100      	movs	r1, #0
 8001b08:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <main+0xd8>)
 8001b0a:	6019      	str	r1, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f009 fbfd 	bl	800b30c <UTIL_SEQ_SetTask>
		UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b16:	f009 fc2d 	bl	800b374 <UTIL_SEQ_Run>
		if (flag_mqtt_connected == SET && lora_started == 0) {
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <main+0xdc>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d1e4      	bne.n	8001aee <main+0x46>
 8001b24:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <main+0xd0>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e0      	bne.n	8001aee <main+0x46>
			printf("*** MQTT Connected - Starting LoRa Gateway ***\n\r");
 8001b2c:	4816      	ldr	r0, [pc, #88]	@ (8001b88 <main+0xe0>)
 8001b2e:	f00a fd75 	bl	800c61c <iprintf>
			char test_message[] = "{\"type\":\"gateway_status\",\"status\":\"connected\",\"gw\":\"GW-001\",\"timestamp\":0,\"message\":\"Gateway MQTT connection successful\"}";
 8001b32:	227a      	movs	r2, #122	@ 0x7a
 8001b34:	4915      	ldr	r1, [pc, #84]	@ (8001b8c <main+0xe4>)
 8001b36:	a805      	add	r0, sp, #20
 8001b38:	f00a ffe3 	bl	800cb02 <memcpy>
			printf("*** Sending MQTT test message ***\n\r");
 8001b3c:	4814      	ldr	r0, [pc, #80]	@ (8001b90 <main+0xe8>)
 8001b3e:	f00a fd6d 	bl	800c61c <iprintf>
			if (Wifi_MqttPubRaw2(mqttPacketBuffer, mqttConfig.pubtopic, strlen(test_message), test_message, QOS_0, RTN_0, POLLING_MODE) == FUNC_OK) {
 8001b42:	a805      	add	r0, sp, #20
 8001b44:	f7fe fb6c 	bl	8000220 <strlen>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	ab05      	add	r3, sp, #20
 8001b52:	b282      	uxth	r2, r0
 8001b54:	490f      	ldr	r1, [pc, #60]	@ (8001b94 <main+0xec>)
 8001b56:	4810      	ldr	r0, [pc, #64]	@ (8001b98 <main+0xf0>)
 8001b58:	f000 fee0 	bl	800291c <Wifi_MqttPubRaw2>
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d1bb      	bne.n	8001ad8 <main+0x30>
				printf("*** MQTT test message sent successfully ***\n\r");
 8001b60:	480e      	ldr	r0, [pc, #56]	@ (8001b9c <main+0xf4>)
 8001b62:	f00a fd5b 	bl	800c61c <iprintf>
 8001b66:	e7ba      	b.n	8001ade <main+0x36>
			MX_SubGHz_Phy_Process();
 8001b68:	f001 fef3 	bl	8003952 <MX_SubGHz_Phy_Process>
 8001b6c:	e7c3      	b.n	8001af6 <main+0x4e>
 8001b6e:	bf00      	nop
 8001b70:	08001465 	.word	0x08001465
 8001b74:	0800eefc 	.word	0x0800eefc
 8001b78:	20000d18 	.word	0x20000d18
 8001b7c:	0800ef20 	.word	0x0800ef20
 8001b80:	20000d14 	.word	0x20000d14
 8001b84:	200005a9 	.word	0x200005a9
 8001b88:	0800ee74 	.word	0x0800ee74
 8001b8c:	0800ef4c 	.word	0x0800ef4c
 8001b90:	0800eea8 	.word	0x0800eea8
 8001b94:	2000006e 	.word	0x2000006e
 8001b98:	200005ac 	.word	0x200005ac
 8001b9c:	0800eecc 	.word	0x0800eecc

08001ba0 <Wifi_CheckResponse>:
  return halStatusCheck;
}


WIFI_RespMsgTypeDef Wifi_CheckResponse(char *buffer, char *response)
{
 8001ba0:	b510      	push	{r4, lr}
 8001ba2:	4604      	mov	r4, r0
  WIFI_RespMsgTypeDef checkResponse;

  if(strstr(buffer, response) != NULL)
 8001ba4:	f00a ff20 	bl	800c9e8 <strstr>
 8001ba8:	b108      	cbz	r0, 8001bae <Wifi_CheckResponse+0xe>
    checkResponse = RESP_MSG_OK;
 8001baa:	2000      	movs	r0, #0
    else
      checkResponse = RESP_MSG_NONE;
  }

  return checkResponse;
}
 8001bac:	bd10      	pop	{r4, pc}
    if(strstr(buffer, RESP_BUSY))
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <Wifi_CheckResponse+0x50>)
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f00a ff18 	bl	800c9e8 <strstr>
 8001bb8:	b108      	cbz	r0, 8001bbe <Wifi_CheckResponse+0x1e>
      checkResponse = RESP_MSG_BUSY;
 8001bba:	2001      	movs	r0, #1
 8001bbc:	e7f6      	b.n	8001bac <Wifi_CheckResponse+0xc>
    else if(strstr(buffer, RESP_ERROR))
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <Wifi_CheckResponse+0x54>)
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f00a ff10 	bl	800c9e8 <strstr>
 8001bc8:	b108      	cbz	r0, 8001bce <Wifi_CheckResponse+0x2e>
      checkResponse = RESP_MSG_ERROR;
 8001bca:	2002      	movs	r0, #2
 8001bcc:	e7ee      	b.n	8001bac <Wifi_CheckResponse+0xc>
    else if(strstr(buffer, "+"))
 8001bce:	212b      	movs	r1, #43	@ 0x2b
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f00a fed3 	bl	800c97c <strchr>
 8001bd6:	b108      	cbz	r0, 8001bdc <Wifi_CheckResponse+0x3c>
      checkResponse = RESP_MSG_CMD;
 8001bd8:	2003      	movs	r0, #3
 8001bda:	e7e7      	b.n	8001bac <Wifi_CheckResponse+0xc>
    else if(strstr(buffer, RESP_FAIL))
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <Wifi_CheckResponse+0x58>)
 8001bde:	6819      	ldr	r1, [r3, #0]
 8001be0:	4620      	mov	r0, r4
 8001be2:	f00a ff01 	bl	800c9e8 <strstr>
 8001be6:	b108      	cbz	r0, 8001bec <Wifi_CheckResponse+0x4c>
      checkResponse = RESP_MSG_FAIL;
 8001be8:	2004      	movs	r0, #4
 8001bea:	e7df      	b.n	8001bac <Wifi_CheckResponse+0xc>
      checkResponse = RESP_MSG_NONE;
 8001bec:	2005      	movs	r0, #5
 8001bee:	e7dd      	b.n	8001bac <Wifi_CheckResponse+0xc>
 8001bf0:	200000b4 	.word	0x200000b4
 8001bf4:	200000bc 	.word	0x200000bc
 8001bf8:	200000a4 	.word	0x200000a4

08001bfc <parse_wifi_info>:

void parse_wifi_info(char *buffer, char *ssid, char *password) {
 8001bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c00:	4681      	mov	r9, r0
 8001c02:	460f      	mov	r7, r1
 8001c04:	4616      	mov	r6, r2
  char *ssid_start = strstr(buffer, "ssid:") + 5;
 8001c06:	4913      	ldr	r1, [pc, #76]	@ (8001c54 <parse_wifi_info+0x58>)
 8001c08:	f00a feee 	bl	800c9e8 <strstr>
 8001c0c:	1d44      	adds	r4, r0, #5
  char *ssid_end = strstr(ssid_start, "\n");
 8001c0e:	210a      	movs	r1, #10
 8001c10:	4620      	mov	r0, r4
 8001c12:	f00a feb3 	bl	800c97c <strchr>
  strncpy(ssid, ssid_start, ssid_end - ssid_start);
 8001c16:	1b05      	subs	r5, r0, r4
 8001c18:	462a      	mov	r2, r5
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	4638      	mov	r0, r7
 8001c1e:	f00a feba 	bl	800c996 <strncpy>
  ssid[ssid_end - ssid_start] = '\0';
 8001c22:	f04f 0800 	mov.w	r8, #0
 8001c26:	f807 8005 	strb.w	r8, [r7, r5]

  char *password_start = strstr(buffer, "password:") + 9;
 8001c2a:	490b      	ldr	r1, [pc, #44]	@ (8001c58 <parse_wifi_info+0x5c>)
 8001c2c:	4648      	mov	r0, r9
 8001c2e:	f00a fedb 	bl	800c9e8 <strstr>
 8001c32:	f100 0409 	add.w	r4, r0, #9
  char *password_end = strstr(password_start, "\n");
 8001c36:	210a      	movs	r1, #10
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f00a fe9f 	bl	800c97c <strchr>
  strncpy(password, password_start, password_end - password_start);
 8001c3e:	1b05      	subs	r5, r0, r4
 8001c40:	462a      	mov	r2, r5
 8001c42:	4621      	mov	r1, r4
 8001c44:	4630      	mov	r0, r6
 8001c46:	f00a fea6 	bl	800c996 <strncpy>
  password[password_end - password_start] = '\0';
 8001c4a:	f806 8005 	strb.w	r8, [r6, r5]
}
 8001c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c52:	bf00      	nop
 8001c54:	0800efc8 	.word	0x0800efc8
 8001c58:	0800efd0 	.word	0x0800efd0

08001c5c <Wifi_SendCommand>:

  return FUNC_OK;
}

HAL_StatusTypeDef Wifi_SendCommand(const char* cmd)
{
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	4604      	mov	r4, r0
  HAL_StatusTypeDef checkStatus;
  //while(UART_CheckResponse() != TX_READY);

  checkStatus = HAL_UART_Transmit(&UART_WIFI, (uint8_t*) cmd, strlen (cmd), 300);
 8001c60:	f7fe fade 	bl	8000220 <strlen>
 8001c64:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001c68:	b282      	uxth	r2, r0
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	4801      	ldr	r0, [pc, #4]	@ (8001c74 <Wifi_SendCommand+0x18>)
 8001c6e:	f006 fc56 	bl	800851e <HAL_UART_Transmit>

  return checkStatus;
}
 8001c72:	bd10      	pop	{r4, pc}
 8001c74:	2000111c 	.word	0x2000111c

08001c78 <UART_CheckResponse>:

UART_RespMsgTypeDef UART_CheckResponse()
{
  UART_RespMsgTypeDef checkUART;

  if(__HAL_UART_GET_FLAG(&UART_WIFI, UART_FLAG_TXE) && !__HAL_UART_GET_FLAG(&UART_WIFI, UART_FLAG_RXNE))
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <UART_CheckResponse+0x34>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001c82:	d003      	beq.n	8001c8c <UART_CheckResponse+0x14>
 8001c84:	69da      	ldr	r2, [r3, #28]
 8001c86:	f012 0f20 	tst.w	r2, #32
 8001c8a:	d008      	beq.n	8001c9e <UART_CheckResponse+0x26>
  {
      checkUART = TX_READY;
  }
  else if(!__HAL_UART_GET_FLAG(&UART_WIFI, UART_FLAG_TXE))
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001c92:	d006      	beq.n	8001ca2 <UART_CheckResponse+0x2a>
  {
      checkUART = TX_BUSY;
  }
  else if (__HAL_UART_GET_FLAG(&UART_WIFI, UART_FLAG_RXNE))
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f013 0f20 	tst.w	r3, #32
 8001c9a:	d104      	bne.n	8001ca6 <UART_CheckResponse+0x2e>
  {
      checkUART = RX_BUSY;
  }

  return checkUART;
}
 8001c9c:	4770      	bx	lr
      checkUART = TX_READY;
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	4770      	bx	lr
      checkUART = TX_BUSY;
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	4770      	bx	lr
      checkUART = RX_BUSY;
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	e7f8      	b.n	8001c9c <UART_CheckResponse+0x24>
 8001caa:	bf00      	nop
 8001cac:	2000111c 	.word	0x2000111c

08001cb0 <Wifi_Receive>:
{
 8001cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	460e      	mov	r6, r1
 8001cb8:	4690      	mov	r8, r2
 8001cba:	461c      	mov	r4, r3
  memset(mqttPacketBuffer, 0, sizeof(mqttPacketBuffer));
 8001cbc:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	480d      	ldr	r0, [pc, #52]	@ (8001cf8 <Wifi_Receive+0x48>)
 8001cc4:	f00a fe52 	bl	800c96c <memset>
  while(UART_CheckResponse() == TX_BUSY);
 8001cc8:	f7ff ffd6 	bl	8001c78 <UART_CheckResponse>
 8001ccc:	2801      	cmp	r0, #1
 8001cce:	d0fb      	beq.n	8001cc8 <Wifi_Receive+0x18>
  switch(mode)
 8001cd0:	b144      	cbz	r4, 8001ce4 <Wifi_Receive+0x34>
 8001cd2:	2c01      	cmp	r4, #1
 8001cd4:	d10d      	bne.n	8001cf2 <Wifi_Receive+0x42>
    halStatusCheck = HAL_UART_Receive_IT(&UART_WIFI , (uint8_t*)buffer, len);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4629      	mov	r1, r5
 8001cda:	4808      	ldr	r0, [pc, #32]	@ (8001cfc <Wifi_Receive+0x4c>)
 8001cdc:	f006 fe16 	bl	800890c <HAL_UART_Receive_IT>
 8001ce0:	4607      	mov	r7, r0
    break;
 8001ce2:	e006      	b.n	8001cf2 <Wifi_Receive+0x42>
    halStatusCheck = HAL_UART_Receive(&UART_WIFI , (uint8_t*)buffer, len, timeout);
 8001ce4:	4643      	mov	r3, r8
 8001ce6:	4632      	mov	r2, r6
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4804      	ldr	r0, [pc, #16]	@ (8001cfc <Wifi_Receive+0x4c>)
 8001cec:	f006 fc79 	bl	80085e2 <HAL_UART_Receive>
 8001cf0:	4607      	mov	r7, r0
}
 8001cf2:	4638      	mov	r0, r7
 8001cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cf8:	200005ac 	.word	0x200005ac
 8001cfc:	2000111c 	.word	0x2000111c

08001d00 <Wifi_Reset2>:
{
 8001d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
  checkCmd = Wifi_SendCommand("AT+RST\r\n");
 8001d08:	4818      	ldr	r0, [pc, #96]	@ (8001d6c <Wifi_Reset2+0x6c>)
 8001d0a:	f7ff ffa7 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 8001d0e:	bb28      	cbnz	r0, 8001d5c <Wifi_Reset2+0x5c>
 8001d10:	4606      	mov	r6, r0
    checkRcv = Wifi_Receive(buffer, WIFI_FUNCS_STD_BUFF_SIZE, 4000, mode);
 8001d12:	462b      	mov	r3, r5
 8001d14:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001d18:	215a      	movs	r1, #90	@ 0x5a
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff ffc8 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8001d20:	4607      	mov	r7, r0
 8001d22:	b108      	cbz	r0, 8001d28 <Wifi_Reset2+0x28>
 8001d24:	2803      	cmp	r0, #3
 8001d26:	d11d      	bne.n	8001d64 <Wifi_Reset2+0x64>
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <Wifi_Reset2+0x70>)
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff ff37 	bl	8001ba0 <Wifi_CheckResponse>
      if(checkResp == RESP_MSG_OK)
 8001d32:	4680      	mov	r8, r0
 8001d34:	b148      	cbz	r0, 8001d4a <Wifi_Reset2+0x4a>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 8001d36:	1e83      	subs	r3, r0, #2
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d914      	bls.n	8001d68 <Wifi_Reset2+0x68>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8001d3e:	2805      	cmp	r0, #5
 8001d40:	d10d      	bne.n	8001d5e <Wifi_Reset2+0x5e>
 8001d42:	2f03      	cmp	r7, #3
 8001d44:	d10b      	bne.n	8001d5e <Wifi_Reset2+0x5e>
        return FUNC_TIMEOUT;
 8001d46:	463e      	mov	r6, r7
 8001d48:	e009      	b.n	8001d5e <Wifi_Reset2+0x5e>
    	  Wifi_Receive(buffer, WIFI_FUNCS_STD_BUFF_SIZE, 4000, mode);
 8001d4a:	462b      	mov	r3, r5
 8001d4c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001d50:	215a      	movs	r1, #90	@ 0x5a
 8001d52:	4620      	mov	r0, r4
 8001d54:	f7ff ffac 	bl	8001cb0 <Wifi_Receive>
    	  return FUNC_OK;
 8001d58:	4646      	mov	r6, r8
 8001d5a:	e000      	b.n	8001d5e <Wifi_Reset2+0x5e>
    return FUNC_TX_ERROR;
 8001d5c:	2604      	movs	r6, #4
}
 8001d5e:	4630      	mov	r0, r6
 8001d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 8001d64:	4606      	mov	r6, r0
 8001d66:	e7fa      	b.n	8001d5e <Wifi_Reset2+0x5e>
        return FUNC_RX_ERROR;
 8001d68:	2601      	movs	r6, #1
 8001d6a:	e7f8      	b.n	8001d5e <Wifi_Reset2+0x5e>
 8001d6c:	0800efdc 	.word	0x0800efdc
 8001d70:	200000c4 	.word	0x200000c4

08001d74 <Wifi_SetWifiMode2>:
{
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	4605      	mov	r5, r0
 8001d7a:	4616      	mov	r6, r2
  char cmd[14] = {0};
 8001d7c:	2400      	movs	r4, #0
 8001d7e:	9400      	str	r4, [sp, #0]
 8001d80:	9401      	str	r4, [sp, #4]
 8001d82:	9402      	str	r4, [sp, #8]
 8001d84:	f8ad 400c 	strh.w	r4, [sp, #12]
  sprintf(cmd, "AT+CWMODE=%d\r\n", mode);
 8001d88:	460a      	mov	r2, r1
 8001d8a:	4917      	ldr	r1, [pc, #92]	@ (8001de8 <Wifi_SetWifiMode2+0x74>)
 8001d8c:	4668      	mov	r0, sp
 8001d8e:	f00a fcf3 	bl	800c778 <siprintf>
  checkCmd = Wifi_SendCommand(cmd);
 8001d92:	4668      	mov	r0, sp
 8001d94:	f7ff ff62 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 8001d98:	b9d8      	cbnz	r0, 8001dd2 <Wifi_SetWifiMode2+0x5e>
 8001d9a:	4604      	mov	r4, r0
    checkRcv = Wifi_Receive(buffer, WIFI_FUNCS_STD_BUFF_SIZE, WIFI_FUNCS_STD_TIMEOUT, recvMode);
 8001d9c:	4633      	mov	r3, r6
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	215a      	movs	r1, #90	@ 0x5a
 8001da4:	4628      	mov	r0, r5
 8001da6:	f7ff ff83 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8001daa:	4606      	mov	r6, r0
 8001dac:	b108      	cbz	r0, 8001db2 <Wifi_SetWifiMode2+0x3e>
 8001dae:	2803      	cmp	r0, #3
 8001db0:	d113      	bne.n	8001dda <Wifi_SetWifiMode2+0x66>
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 8001db2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <Wifi_SetWifiMode2+0x78>)
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	4628      	mov	r0, r5
 8001db8:	f7ff fef2 	bl	8001ba0 <Wifi_CheckResponse>
      if(checkResp == RESP_MSG_OK)
 8001dbc:	b178      	cbz	r0, 8001dde <Wifi_SetWifiMode2+0x6a>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 8001dbe:	1e83      	subs	r3, r0, #2
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d90d      	bls.n	8001de2 <Wifi_SetWifiMode2+0x6e>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8001dc6:	2805      	cmp	r0, #5
 8001dc8:	d104      	bne.n	8001dd4 <Wifi_SetWifiMode2+0x60>
 8001dca:	2e03      	cmp	r6, #3
 8001dcc:	d102      	bne.n	8001dd4 <Wifi_SetWifiMode2+0x60>
        return FUNC_TIMEOUT;
 8001dce:	4634      	mov	r4, r6
 8001dd0:	e000      	b.n	8001dd4 <Wifi_SetWifiMode2+0x60>
    return FUNC_TX_ERROR;
 8001dd2:	2404      	movs	r4, #4
}
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	b004      	add	sp, #16
 8001dd8:	bd70      	pop	{r4, r5, r6, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 8001dda:	4604      	mov	r4, r0
 8001ddc:	e7fa      	b.n	8001dd4 <Wifi_SetWifiMode2+0x60>
        return FUNC_OK;
 8001dde:	4604      	mov	r4, r0
 8001de0:	e7f8      	b.n	8001dd4 <Wifi_SetWifiMode2+0x60>
        return FUNC_RX_ERROR;
 8001de2:	2401      	movs	r4, #1
 8001de4:	e7f6      	b.n	8001dd4 <Wifi_SetWifiMode2+0x60>
 8001de6:	bf00      	nop
 8001de8:	0800efe8 	.word	0x0800efe8
 8001dec:	200000c4 	.word	0x200000c4

08001df0 <Wifi_StartSmartConfig2>:
{
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	4604      	mov	r4, r0
 8001df4:	460d      	mov	r5, r1
  checkCmd = Wifi_SendCommand("AT+CWSTARTSMART\r\n");
 8001df6:	4814      	ldr	r0, [pc, #80]	@ (8001e48 <Wifi_StartSmartConfig2+0x58>)
 8001df8:	f7ff ff30 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 8001dfc:	b9d8      	cbnz	r0, 8001e36 <Wifi_StartSmartConfig2+0x46>
 8001dfe:	4606      	mov	r6, r0
    checkRcv = Wifi_Receive(buffer, WIFI_FUNCS_STD_BUFF_SIZE, WIFI_FUNCS_STD_TIMEOUT, mode);
 8001e00:	462b      	mov	r3, r5
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	215a      	movs	r1, #90	@ 0x5a
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f7ff ff51 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8001e0e:	4605      	mov	r5, r0
 8001e10:	b108      	cbz	r0, 8001e16 <Wifi_StartSmartConfig2+0x26>
 8001e12:	2803      	cmp	r0, #3
 8001e14:	d112      	bne.n	8001e3c <Wifi_StartSmartConfig2+0x4c>
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <Wifi_StartSmartConfig2+0x5c>)
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7ff fec0 	bl	8001ba0 <Wifi_CheckResponse>
      if(checkResp == RESP_MSG_OK)
 8001e20:	b170      	cbz	r0, 8001e40 <Wifi_StartSmartConfig2+0x50>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 8001e22:	1e83      	subs	r3, r0, #2
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d90c      	bls.n	8001e44 <Wifi_StartSmartConfig2+0x54>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8001e2a:	2805      	cmp	r0, #5
 8001e2c:	d104      	bne.n	8001e38 <Wifi_StartSmartConfig2+0x48>
 8001e2e:	2d03      	cmp	r5, #3
 8001e30:	d102      	bne.n	8001e38 <Wifi_StartSmartConfig2+0x48>
        return FUNC_TIMEOUT;
 8001e32:	462e      	mov	r6, r5
 8001e34:	e000      	b.n	8001e38 <Wifi_StartSmartConfig2+0x48>
    return FUNC_TX_ERROR;
 8001e36:	2604      	movs	r6, #4
}
 8001e38:	4630      	mov	r0, r6
 8001e3a:	bd70      	pop	{r4, r5, r6, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 8001e3c:	4606      	mov	r6, r0
 8001e3e:	e7fb      	b.n	8001e38 <Wifi_StartSmartConfig2+0x48>
        return FUNC_OK;
 8001e40:	4606      	mov	r6, r0
 8001e42:	e7f9      	b.n	8001e38 <Wifi_StartSmartConfig2+0x48>
        return FUNC_RX_ERROR;
 8001e44:	2601      	movs	r6, #1
 8001e46:	e7f7      	b.n	8001e38 <Wifi_StartSmartConfig2+0x48>
 8001e48:	0800eff8 	.word	0x0800eff8
 8001e4c:	200000c4 	.word	0x200000c4

08001e50 <Wifi_StopSmartConfig2>:
{
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	4604      	mov	r4, r0
 8001e54:	460d      	mov	r5, r1
  checkCmd = Wifi_SendCommand("AT+CWSTOPSMART\r\n");
 8001e56:	4814      	ldr	r0, [pc, #80]	@ (8001ea8 <Wifi_StopSmartConfig2+0x58>)
 8001e58:	f7ff ff00 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 8001e5c:	b9d8      	cbnz	r0, 8001e96 <Wifi_StopSmartConfig2+0x46>
 8001e5e:	4606      	mov	r6, r0
    checkRcv = Wifi_Receive(buffer, WIFI_FUNCS_STD_BUFF_SIZE, WIFI_FUNCS_STD_TIMEOUT, mode);
 8001e60:	462b      	mov	r3, r5
 8001e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e66:	215a      	movs	r1, #90	@ 0x5a
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7ff ff21 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8001e6e:	4605      	mov	r5, r0
 8001e70:	b108      	cbz	r0, 8001e76 <Wifi_StopSmartConfig2+0x26>
 8001e72:	2803      	cmp	r0, #3
 8001e74:	d112      	bne.n	8001e9c <Wifi_StopSmartConfig2+0x4c>
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <Wifi_StopSmartConfig2+0x5c>)
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7ff fe90 	bl	8001ba0 <Wifi_CheckResponse>
      if(checkResp == RESP_MSG_OK)
 8001e80:	b170      	cbz	r0, 8001ea0 <Wifi_StopSmartConfig2+0x50>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 8001e82:	1e83      	subs	r3, r0, #2
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d90c      	bls.n	8001ea4 <Wifi_StopSmartConfig2+0x54>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8001e8a:	2805      	cmp	r0, #5
 8001e8c:	d104      	bne.n	8001e98 <Wifi_StopSmartConfig2+0x48>
 8001e8e:	2d03      	cmp	r5, #3
 8001e90:	d102      	bne.n	8001e98 <Wifi_StopSmartConfig2+0x48>
        return FUNC_TIMEOUT;
 8001e92:	462e      	mov	r6, r5
 8001e94:	e000      	b.n	8001e98 <Wifi_StopSmartConfig2+0x48>
    return  FUNC_TX_ERROR;
 8001e96:	2604      	movs	r6, #4
}
 8001e98:	4630      	mov	r0, r6
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 8001e9c:	4606      	mov	r6, r0
 8001e9e:	e7fb      	b.n	8001e98 <Wifi_StopSmartConfig2+0x48>
        return FUNC_OK;
 8001ea0:	4606      	mov	r6, r0
 8001ea2:	e7f9      	b.n	8001e98 <Wifi_StopSmartConfig2+0x48>
        return FUNC_RX_ERROR;
 8001ea4:	2601      	movs	r6, #1
 8001ea6:	e7f7      	b.n	8001e98 <Wifi_StopSmartConfig2+0x48>
 8001ea8:	0800f00c 	.word	0x0800f00c
 8001eac:	200000c4 	.word	0x200000c4

08001eb0 <Wifi_QAP2>:
{
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460d      	mov	r5, r1
  checkCmd = Wifi_SendCommand("AT+CWQAP\r\n");
 8001eb6:	4814      	ldr	r0, [pc, #80]	@ (8001f08 <Wifi_QAP2+0x58>)
 8001eb8:	f7ff fed0 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 8001ebc:	b9d8      	cbnz	r0, 8001ef6 <Wifi_QAP2+0x46>
 8001ebe:	4606      	mov	r6, r0
    checkRcv = Wifi_Receive(buffer, 120, WIFI_FUNCS_STD_TIMEOUT, mode);
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	2178      	movs	r1, #120	@ 0x78
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff fef1 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8001ece:	4605      	mov	r5, r0
 8001ed0:	b108      	cbz	r0, 8001ed6 <Wifi_QAP2+0x26>
 8001ed2:	2803      	cmp	r0, #3
 8001ed4:	d112      	bne.n	8001efc <Wifi_QAP2+0x4c>
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <Wifi_QAP2+0x5c>)
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	4620      	mov	r0, r4
 8001edc:	f7ff fe60 	bl	8001ba0 <Wifi_CheckResponse>
      if(checkResp == RESP_MSG_OK)
 8001ee0:	b170      	cbz	r0, 8001f00 <Wifi_QAP2+0x50>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 8001ee2:	1e83      	subs	r3, r0, #2
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d90c      	bls.n	8001f04 <Wifi_QAP2+0x54>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8001eea:	2805      	cmp	r0, #5
 8001eec:	d104      	bne.n	8001ef8 <Wifi_QAP2+0x48>
 8001eee:	2d03      	cmp	r5, #3
 8001ef0:	d102      	bne.n	8001ef8 <Wifi_QAP2+0x48>
        return FUNC_TIMEOUT;
 8001ef2:	462e      	mov	r6, r5
 8001ef4:	e000      	b.n	8001ef8 <Wifi_QAP2+0x48>
    return FUNC_TX_ERROR;
 8001ef6:	2604      	movs	r6, #4
}
 8001ef8:	4630      	mov	r0, r6
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 8001efc:	4606      	mov	r6, r0
 8001efe:	e7fb      	b.n	8001ef8 <Wifi_QAP2+0x48>
        return FUNC_OK;
 8001f00:	4606      	mov	r6, r0
 8001f02:	e7f9      	b.n	8001ef8 <Wifi_QAP2+0x48>
        return FUNC_RX_ERROR;
 8001f04:	2601      	movs	r6, #1
 8001f06:	e7f7      	b.n	8001ef8 <Wifi_QAP2+0x48>
 8001f08:	0800f020 	.word	0x0800f020
 8001f0c:	200000c4 	.word	0x200000c4

08001f10 <Wifi_SetAP2>:
{
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	b08f      	sub	sp, #60	@ 0x3c
 8001f14:	4605      	mov	r5, r0
 8001f16:	460c      	mov	r4, r1
 8001f18:	4616      	mov	r6, r2
 8001f1a:	461f      	mov	r7, r3
  char cmd[50] = {0};
 8001f1c:	2232      	movs	r2, #50	@ 0x32
 8001f1e:	2100      	movs	r1, #0
 8001f20:	a801      	add	r0, sp, #4
 8001f22:	f00a fd23 	bl	800c96c <memset>
  sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8001f26:	4633      	mov	r3, r6
 8001f28:	4622      	mov	r2, r4
 8001f2a:	4919      	ldr	r1, [pc, #100]	@ (8001f90 <Wifi_SetAP2+0x80>)
 8001f2c:	a801      	add	r0, sp, #4
 8001f2e:	f00a fc23 	bl	800c778 <siprintf>
  checkCmd = Wifi_SendCommand(cmd);
 8001f32:	a801      	add	r0, sp, #4
 8001f34:	f7ff fe92 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 8001f38:	bb28      	cbnz	r0, 8001f86 <Wifi_SetAP2+0x76>
    checkRcv = Wifi_Receive(buffer, 100, 6000, mode);
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001f40:	2164      	movs	r1, #100	@ 0x64
 8001f42:	4628      	mov	r0, r5
 8001f44:	f7ff feb4 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8001f48:	4606      	mov	r6, r0
 8001f4a:	b108      	cbz	r0, 8001f50 <Wifi_SetAP2+0x40>
 8001f4c:	2803      	cmp	r0, #3
 8001f4e:	d11b      	bne.n	8001f88 <Wifi_SetAP2+0x78>
      checkResp = (WIFI_RespMsgTypeDef)(Wifi_CheckResponse(buffer, RESP_WIFICONNECT) | Wifi_CheckResponse(buffer, RESP_OK));
 8001f50:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <Wifi_SetAP2+0x84>)
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	4628      	mov	r0, r5
 8001f56:	f7ff fe23 	bl	8001ba0 <Wifi_CheckResponse>
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <Wifi_SetAP2+0x88>)
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	4628      	mov	r0, r5
 8001f62:	f7ff fe1d 	bl	8001ba0 <Wifi_CheckResponse>
 8001f66:	4320      	orrs	r0, r4
      if(checkResp == RESP_MSG_OK)
 8001f68:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 8001f6c:	d00c      	beq.n	8001f88 <Wifi_SetAP2+0x78>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 8001f6e:	1e83      	subs	r3, r0, #2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d90a      	bls.n	8001f8c <Wifi_SetAP2+0x7c>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8001f76:	2805      	cmp	r0, #5
 8001f78:	d001      	beq.n	8001f7e <Wifi_SetAP2+0x6e>
  return FUNC_FAIL;
 8001f7a:	2005      	movs	r0, #5
 8001f7c:	e004      	b.n	8001f88 <Wifi_SetAP2+0x78>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8001f7e:	2e03      	cmp	r6, #3
 8001f80:	d102      	bne.n	8001f88 <Wifi_SetAP2+0x78>
        return FUNC_TIMEOUT;
 8001f82:	4630      	mov	r0, r6
 8001f84:	e000      	b.n	8001f88 <Wifi_SetAP2+0x78>
    return FUNC_TX_ERROR;
 8001f86:	2004      	movs	r0, #4
}
 8001f88:	b00f      	add	sp, #60	@ 0x3c
 8001f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return FUNC_RX_ERROR;
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	e7fb      	b.n	8001f88 <Wifi_SetAP2+0x78>
 8001f90:	0800f02c 	.word	0x0800f02c
 8001f94:	200000c0 	.word	0x200000c0
 8001f98:	200000c4 	.word	0x200000c4

08001f9c <Wifi_SetTime2>:
{
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	b08e      	sub	sp, #56	@ 0x38
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	460d      	mov	r5, r1
 8001fa4:	4616      	mov	r6, r2
  char cmd[50] = {0};
 8001fa6:	2232      	movs	r2, #50	@ 0x32
 8001fa8:	2100      	movs	r1, #0
 8001faa:	a801      	add	r0, sp, #4
 8001fac:	f00a fcde 	bl	800c96c <memset>
  sprintf(cmd, "AT+CIPSNTPCFG=1,%d,\"pool.ntp.org\"\r\n", timezone);
 8001fb0:	462a      	mov	r2, r5
 8001fb2:	4917      	ldr	r1, [pc, #92]	@ (8002010 <Wifi_SetTime2+0x74>)
 8001fb4:	a801      	add	r0, sp, #4
 8001fb6:	f00a fbdf 	bl	800c778 <siprintf>
  checkCmd = Wifi_SendCommand(cmd);
 8001fba:	a801      	add	r0, sp, #4
 8001fbc:	f7ff fe4e 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 8001fc0:	b9d8      	cbnz	r0, 8001ffa <Wifi_SetTime2+0x5e>
 8001fc2:	4605      	mov	r5, r0
    checkRcv = Wifi_Receive(buffer, WIFI_FUNCS_STD_BUFF_SIZE, WIFI_FUNCS_STD_TIMEOUT, mode);
 8001fc4:	4633      	mov	r3, r6
 8001fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fca:	215a      	movs	r1, #90	@ 0x5a
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7ff fe6f 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8001fd2:	4606      	mov	r6, r0
 8001fd4:	b108      	cbz	r0, 8001fda <Wifi_SetTime2+0x3e>
 8001fd6:	2803      	cmp	r0, #3
 8001fd8:	d113      	bne.n	8002002 <Wifi_SetTime2+0x66>
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 8001fda:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <Wifi_SetTime2+0x78>)
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff fdde 	bl	8001ba0 <Wifi_CheckResponse>
      if(checkResp == RESP_MSG_OK)
 8001fe4:	b178      	cbz	r0, 8002006 <Wifi_SetTime2+0x6a>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 8001fe6:	1e83      	subs	r3, r0, #2
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d90d      	bls.n	800200a <Wifi_SetTime2+0x6e>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8001fee:	2805      	cmp	r0, #5
 8001ff0:	d104      	bne.n	8001ffc <Wifi_SetTime2+0x60>
 8001ff2:	2e03      	cmp	r6, #3
 8001ff4:	d102      	bne.n	8001ffc <Wifi_SetTime2+0x60>
        return FUNC_TIMEOUT;
 8001ff6:	4635      	mov	r5, r6
 8001ff8:	e000      	b.n	8001ffc <Wifi_SetTime2+0x60>
    return FUNC_TX_ERROR;
 8001ffa:	2504      	movs	r5, #4
}
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	b00e      	add	sp, #56	@ 0x38
 8002000:	bd70      	pop	{r4, r5, r6, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 8002002:	4605      	mov	r5, r0
 8002004:	e7fa      	b.n	8001ffc <Wifi_SetTime2+0x60>
        return FUNC_OK;
 8002006:	4605      	mov	r5, r0
 8002008:	e7f8      	b.n	8001ffc <Wifi_SetTime2+0x60>
        return FUNC_RX_ERROR;
 800200a:	2501      	movs	r5, #1
 800200c:	e7f6      	b.n	8001ffc <Wifi_SetTime2+0x60>
 800200e:	bf00      	nop
 8002010:	0800f044 	.word	0x0800f044
 8002014:	200000c4 	.word	0x200000c4

08002018 <Wifi_MqttUserConfig2>:
{
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b095      	sub	sp, #84	@ 0x54
 800201c:	4604      	mov	r4, r0
 800201e:	460d      	mov	r5, r1
 8002020:	4616      	mov	r6, r2
 8002022:	461f      	mov	r7, r3
  char cmd[70] = {0};
 8002024:	2246      	movs	r2, #70	@ 0x46
 8002026:	2100      	movs	r1, #0
 8002028:	a802      	add	r0, sp, #8
 800202a:	f00a fc9f 	bl	800c96c <memset>
  sprintf(cmd, "AT+MQTTUSERCFG=0,%d,\"%s\",\"%s\",\"%s\",0,0,\"\"\r\n", mode, clientID, username, password);
 800202e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	9700      	str	r7, [sp, #0]
 8002034:	4633      	mov	r3, r6
 8002036:	462a      	mov	r2, r5
 8002038:	4917      	ldr	r1, [pc, #92]	@ (8002098 <Wifi_MqttUserConfig2+0x80>)
 800203a:	a802      	add	r0, sp, #8
 800203c:	f00a fb9c 	bl	800c778 <siprintf>
  checkCmd = Wifi_SendCommand(cmd);
 8002040:	a802      	add	r0, sp, #8
 8002042:	f7ff fe0b 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 8002046:	b9e0      	cbnz	r0, 8002082 <Wifi_MqttUserConfig2+0x6a>
 8002048:	4605      	mov	r5, r0
    checkRcv = Wifi_Receive(buffer, 120, WIFI_FUNCS_STD_TIMEOUT, recvMode);
 800204a:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 800204e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002052:	2178      	movs	r1, #120	@ 0x78
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff fe2b 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 800205a:	4606      	mov	r6, r0
 800205c:	b108      	cbz	r0, 8002062 <Wifi_MqttUserConfig2+0x4a>
 800205e:	2803      	cmp	r0, #3
 8002060:	d113      	bne.n	800208a <Wifi_MqttUserConfig2+0x72>
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <Wifi_MqttUserConfig2+0x84>)
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	4620      	mov	r0, r4
 8002068:	f7ff fd9a 	bl	8001ba0 <Wifi_CheckResponse>
      if(checkResp == RESP_MSG_OK)
 800206c:	b178      	cbz	r0, 800208e <Wifi_MqttUserConfig2+0x76>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 800206e:	1e83      	subs	r3, r0, #2
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d90d      	bls.n	8002092 <Wifi_MqttUserConfig2+0x7a>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8002076:	2805      	cmp	r0, #5
 8002078:	d104      	bne.n	8002084 <Wifi_MqttUserConfig2+0x6c>
 800207a:	2e03      	cmp	r6, #3
 800207c:	d102      	bne.n	8002084 <Wifi_MqttUserConfig2+0x6c>
        return FUNC_TIMEOUT;
 800207e:	4635      	mov	r5, r6
 8002080:	e000      	b.n	8002084 <Wifi_MqttUserConfig2+0x6c>
    return FUNC_TX_ERROR;
 8002082:	2504      	movs	r5, #4
}
 8002084:	4628      	mov	r0, r5
 8002086:	b015      	add	sp, #84	@ 0x54
 8002088:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 800208a:	4605      	mov	r5, r0
 800208c:	e7fa      	b.n	8002084 <Wifi_MqttUserConfig2+0x6c>
        return FUNC_OK;
 800208e:	4605      	mov	r5, r0
 8002090:	e7f8      	b.n	8002084 <Wifi_MqttUserConfig2+0x6c>
        return FUNC_RX_ERROR;
 8002092:	2501      	movs	r5, #1
 8002094:	e7f6      	b.n	8002084 <Wifi_MqttUserConfig2+0x6c>
 8002096:	bf00      	nop
 8002098:	0800f068 	.word	0x0800f068
 800209c:	200000c4 	.word	0x200000c4

080020a0 <Wifi_MqttConnConfig2>:
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	b095      	sub	sp, #84	@ 0x54
 80020a4:	4604      	mov	r4, r0
 80020a6:	460d      	mov	r5, r1
 80020a8:	4616      	mov	r6, r2
 80020aa:	461f      	mov	r7, r3
  char cmd[70] = {0};
 80020ac:	2246      	movs	r2, #70	@ 0x46
 80020ae:	2100      	movs	r1, #0
 80020b0:	a802      	add	r0, sp, #8
 80020b2:	f00a fc5b 	bl	800c96c <memset>
  sprintf(cmd, "AT+MQTTCONNCFG=0,%d,%d,\"lwtt\",\"lwtt\",%d,%d\r\n", keepAlive, cleanSession, qos, retain);
 80020b6:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	9700      	str	r7, [sp, #0]
 80020be:	4633      	mov	r3, r6
 80020c0:	462a      	mov	r2, r5
 80020c2:	4917      	ldr	r1, [pc, #92]	@ (8002120 <Wifi_MqttConnConfig2+0x80>)
 80020c4:	a802      	add	r0, sp, #8
 80020c6:	f00a fb57 	bl	800c778 <siprintf>
  checkCmd = Wifi_SendCommand(cmd);
 80020ca:	a802      	add	r0, sp, #8
 80020cc:	f7ff fdc6 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 80020d0:	b9e0      	cbnz	r0, 800210c <Wifi_MqttConnConfig2+0x6c>
 80020d2:	4605      	mov	r5, r0
    checkRcv = Wifi_Receive(buffer, WIFI_FUNCS_STD_BUFF_SIZE, WIFI_FUNCS_STD_TIMEOUT, mode);
 80020d4:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 80020d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020dc:	215a      	movs	r1, #90	@ 0x5a
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff fde6 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 80020e4:	4606      	mov	r6, r0
 80020e6:	b108      	cbz	r0, 80020ec <Wifi_MqttConnConfig2+0x4c>
 80020e8:	2803      	cmp	r0, #3
 80020ea:	d113      	bne.n	8002114 <Wifi_MqttConnConfig2+0x74>
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 80020ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <Wifi_MqttConnConfig2+0x84>)
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7ff fd55 	bl	8001ba0 <Wifi_CheckResponse>
      if(checkResp == RESP_MSG_OK)
 80020f6:	b178      	cbz	r0, 8002118 <Wifi_MqttConnConfig2+0x78>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 80020f8:	1e83      	subs	r3, r0, #2
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d90d      	bls.n	800211c <Wifi_MqttConnConfig2+0x7c>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8002100:	2805      	cmp	r0, #5
 8002102:	d104      	bne.n	800210e <Wifi_MqttConnConfig2+0x6e>
 8002104:	2e03      	cmp	r6, #3
 8002106:	d102      	bne.n	800210e <Wifi_MqttConnConfig2+0x6e>
        return FUNC_TIMEOUT;
 8002108:	4635      	mov	r5, r6
 800210a:	e000      	b.n	800210e <Wifi_MqttConnConfig2+0x6e>
    return FUNC_TX_ERROR;
 800210c:	2504      	movs	r5, #4
}
 800210e:	4628      	mov	r0, r5
 8002110:	b015      	add	sp, #84	@ 0x54
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 8002114:	4605      	mov	r5, r0
 8002116:	e7fa      	b.n	800210e <Wifi_MqttConnConfig2+0x6e>
        return FUNC_OK;
 8002118:	4605      	mov	r5, r0
 800211a:	e7f8      	b.n	800210e <Wifi_MqttConnConfig2+0x6e>
        return FUNC_RX_ERROR;
 800211c:	2501      	movs	r5, #1
 800211e:	e7f6      	b.n	800210e <Wifi_MqttConnConfig2+0x6e>
 8002120:	0800f094 	.word	0x0800f094
 8002124:	200000c4 	.word	0x200000c4

08002128 <Wifi_MqttConn2>:
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	b09b      	sub	sp, #108	@ 0x6c
 800212c:	4604      	mov	r4, r0
 800212e:	460d      	mov	r5, r1
 8002130:	4616      	mov	r6, r2
 8002132:	461f      	mov	r7, r3
  char cmd[100] = {0};
 8002134:	2264      	movs	r2, #100	@ 0x64
 8002136:	2100      	movs	r1, #0
 8002138:	a801      	add	r0, sp, #4
 800213a:	f00a fc17 	bl	800c96c <memset>
  sprintf(cmd, "AT+MQTTCONN=0,\"%s\",8883,%d\r\n", brokerAddress, reconnect);
 800213e:	4633      	mov	r3, r6
 8002140:	462a      	mov	r2, r5
 8002142:	4917      	ldr	r1, [pc, #92]	@ (80021a0 <Wifi_MqttConn2+0x78>)
 8002144:	a801      	add	r0, sp, #4
 8002146:	f00a fb17 	bl	800c778 <siprintf>
  checkCmd = Wifi_SendCommand(cmd);
 800214a:	a801      	add	r0, sp, #4
 800214c:	f7ff fd86 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 8002150:	b9d8      	cbnz	r0, 800218a <Wifi_MqttConn2+0x62>
 8002152:	4605      	mov	r5, r0
    checkRcv = Wifi_Receive(buffer, 200, WIFI_FUNCS_STD_TIMEOUT, mode);
 8002154:	463b      	mov	r3, r7
 8002156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215a:	21c8      	movs	r1, #200	@ 0xc8
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff fda7 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8002162:	4606      	mov	r6, r0
 8002164:	b108      	cbz	r0, 800216a <Wifi_MqttConn2+0x42>
 8002166:	2803      	cmp	r0, #3
 8002168:	d113      	bne.n	8002192 <Wifi_MqttConn2+0x6a>
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <Wifi_MqttConn2+0x7c>)
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	4620      	mov	r0, r4
 8002170:	f7ff fd16 	bl	8001ba0 <Wifi_CheckResponse>
      if(checkResp == RESP_MSG_OK)
 8002174:	b178      	cbz	r0, 8002196 <Wifi_MqttConn2+0x6e>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 8002176:	1e83      	subs	r3, r0, #2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d90d      	bls.n	800219a <Wifi_MqttConn2+0x72>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 800217e:	2805      	cmp	r0, #5
 8002180:	d104      	bne.n	800218c <Wifi_MqttConn2+0x64>
 8002182:	2e03      	cmp	r6, #3
 8002184:	d102      	bne.n	800218c <Wifi_MqttConn2+0x64>
        return FUNC_TIMEOUT;
 8002186:	4635      	mov	r5, r6
 8002188:	e000      	b.n	800218c <Wifi_MqttConn2+0x64>
    return FUNC_TX_ERROR;
 800218a:	2504      	movs	r5, #4
}
 800218c:	4628      	mov	r0, r5
 800218e:	b01b      	add	sp, #108	@ 0x6c
 8002190:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 8002192:	4605      	mov	r5, r0
 8002194:	e7fa      	b.n	800218c <Wifi_MqttConn2+0x64>
        return FUNC_OK;
 8002196:	4605      	mov	r5, r0
 8002198:	e7f8      	b.n	800218c <Wifi_MqttConn2+0x64>
        return FUNC_RX_ERROR;
 800219a:	2501      	movs	r5, #1
 800219c:	e7f6      	b.n	800218c <Wifi_MqttConn2+0x64>
 800219e:	bf00      	nop
 80021a0:	0800f0c4 	.word	0x0800f0c4
 80021a4:	200000c4 	.word	0x200000c4

080021a8 <Wifi_GetMqttConn2>:
{
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	4604      	mov	r4, r0
 80021ac:	460d      	mov	r5, r1
  checkCmd = Wifi_SendCommand("AT+MQTTCONN?\r\n");
 80021ae:	4819      	ldr	r0, [pc, #100]	@ (8002214 <Wifi_GetMqttConn2+0x6c>)
 80021b0:	f7ff fd54 	bl	8001c5c <Wifi_SendCommand>
  if(checkCmd == HAL_OK)
 80021b4:	bb20      	cbnz	r0, 8002200 <Wifi_GetMqttConn2+0x58>
 80021b6:	4606      	mov	r6, r0
    checkRcv = Wifi_Receive(buffer, 199, WIFI_FUNCS_STD_TIMEOUT, mode);
 80021b8:	462b      	mov	r3, r5
 80021ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021be:	21c7      	movs	r1, #199	@ 0xc7
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff fd75 	bl	8001cb0 <Wifi_Receive>
    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 80021c6:	4607      	mov	r7, r0
 80021c8:	b108      	cbz	r0, 80021ce <Wifi_GetMqttConn2+0x26>
 80021ca:	2803      	cmp	r0, #3
 80021cc:	d11b      	bne.n	8002206 <Wifi_GetMqttConn2+0x5e>
      checkResp = (WIFI_RespMsgTypeDef)(Wifi_CheckResponse(buffer, mqttConfig.brokerAddress) | Wifi_CheckResponse(buffer, RESP_OK));
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <Wifi_GetMqttConn2+0x70>)
 80021d0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80021d2:	4620      	mov	r0, r4
 80021d4:	f7ff fce4 	bl	8001ba0 <Wifi_CheckResponse>
 80021d8:	4605      	mov	r5, r0
 80021da:	4b10      	ldr	r3, [pc, #64]	@ (800221c <Wifi_GetMqttConn2+0x74>)
 80021dc:	6819      	ldr	r1, [r3, #0]
 80021de:	4620      	mov	r0, r4
 80021e0:	f7ff fcde 	bl	8001ba0 <Wifi_CheckResponse>
 80021e4:	4328      	orrs	r0, r5
      if(checkResp == RESP_MSG_OK)
 80021e6:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 80021ea:	d00e      	beq.n	800220a <Wifi_GetMqttConn2+0x62>
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 80021ec:	1e83      	subs	r3, r0, #2
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d90c      	bls.n	800220e <Wifi_GetMqttConn2+0x66>
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 80021f4:	2805      	cmp	r0, #5
 80021f6:	d104      	bne.n	8002202 <Wifi_GetMqttConn2+0x5a>
 80021f8:	2f03      	cmp	r7, #3
 80021fa:	d102      	bne.n	8002202 <Wifi_GetMqttConn2+0x5a>
        return FUNC_TIMEOUT;
 80021fc:	463e      	mov	r6, r7
 80021fe:	e000      	b.n	8002202 <Wifi_GetMqttConn2+0x5a>
    return FUNC_TX_ERROR;
 8002200:	2604      	movs	r6, #4
}
 8002202:	4630      	mov	r0, r6
 8002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 8002206:	4606      	mov	r6, r0
 8002208:	e7fb      	b.n	8002202 <Wifi_GetMqttConn2+0x5a>
        return FUNC_OK;
 800220a:	4606      	mov	r6, r0
 800220c:	e7f9      	b.n	8002202 <Wifi_GetMqttConn2+0x5a>
        return FUNC_RX_ERROR;
 800220e:	2601      	movs	r6, #1
 8002210:	e7f7      	b.n	8002202 <Wifi_GetMqttConn2+0x5a>
 8002212:	bf00      	nop
 8002214:	0800f0e4 	.word	0x0800f0e4
 8002218:	20000000 	.word	0x20000000
 800221c:	200000c4 	.word	0x200000c4

08002220 <MQTT_Init>:
FUNC_InitTypeDef MQTT_Init(MQTT_Config *config){
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	4604      	mov	r4, r0
  MQTTInitCase = MQTT_INIT_STATE_WIFI_RESET;
 8002226:	2500      	movs	r5, #0
 8002228:	4ba4      	ldr	r3, [pc, #656]	@ (80024bc <MQTT_Init+0x29c>)
 800222a:	701d      	strb	r5, [r3, #0]
  while(MQTTInitCase != MQTT_INIT_STATE_END_CASE){
 800222c:	e2cc      	b.n	80027c8 <MQTT_Init+0x5a8>
      mqtt_timer_en = SET;
 800222e:	4ba4      	ldr	r3, [pc, #656]	@ (80024c0 <MQTT_Init+0x2a0>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
      flag_mqtt_error = RESET;
 8002234:	2100      	movs	r1, #0
 8002236:	4ba3      	ldr	r3, [pc, #652]	@ (80024c4 <MQTT_Init+0x2a4>)
 8002238:	7019      	strb	r1, [r3, #0]
      checkFunc = Wifi_Reset2((char*)config->mqttPacketBuffer, POLLING_MODE);
 800223a:	6820      	ldr	r0, [r4, #0]
 800223c:	f7ff fd60 	bl	8001d00 <Wifi_Reset2>
      if(checkFunc == FUNC_OK)
 8002240:	2804      	cmp	r0, #4
 8002242:	d80a      	bhi.n	800225a <MQTT_Init+0x3a>
 8002244:	e8df f000 	tbb	[pc, r0]
 8002248:	27092003 	.word	0x27092003
 800224c:	19          	.byte	0x19
 800224d:	00          	.byte	0x00
        mqtt_timer = 0;
 800224e:	4b9e      	ldr	r3, [pc, #632]	@ (80024c8 <MQTT_Init+0x2a8>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_MODE;
 8002254:	4b99      	ldr	r3, [pc, #612]	@ (80024bc <MQTT_Init+0x29c>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
      if(mqtt_timer > 20)
 800225a:	4b9b      	ldr	r3, [pc, #620]	@ (80024c8 <MQTT_Init+0x2a8>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b14      	cmp	r3, #20
 8002262:	f240 82b1 	bls.w	80027c8 <MQTT_Init+0x5a8>
        mqtt_timer = 0;
 8002266:	4b98      	ldr	r3, [pc, #608]	@ (80024c8 <MQTT_Init+0x2a8>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
        mqttErrorData.errorCode = MQTT_INIT_ERROR_WIFI_RESET;
 800226c:	4b97      	ldr	r3, [pc, #604]	@ (80024cc <MQTT_Init+0x2ac>)
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 8002272:	4b92      	ldr	r3, [pc, #584]	@ (80024bc <MQTT_Init+0x29c>)
 8002274:	220a      	movs	r2, #10
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e2a6      	b.n	80027c8 <MQTT_Init+0x5a8>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;              // Fire an error message on OLED and save log error
 800227a:	4b94      	ldr	r3, [pc, #592]	@ (80024cc <MQTT_Init+0x2ac>)
 800227c:	220b      	movs	r2, #11
 800227e:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_RESET;
 8002280:	4b8e      	ldr	r3, [pc, #568]	@ (80024bc <MQTT_Init+0x29c>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e7e8      	b.n	800225a <MQTT_Init+0x3a>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;              // Fire an error message on OLED and save log error
 8002288:	4b90      	ldr	r3, [pc, #576]	@ (80024cc <MQTT_Init+0x2ac>)
 800228a:	220c      	movs	r2, #12
 800228c:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_RESET;
 800228e:	4b8b      	ldr	r3, [pc, #556]	@ (80024bc <MQTT_Init+0x29c>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
 8002294:	e7e1      	b.n	800225a <MQTT_Init+0x3a>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TIMEOUT;         // Fire an error message on OLED and save log error
 8002296:	4b8d      	ldr	r3, [pc, #564]	@ (80024cc <MQTT_Init+0x2ac>)
 8002298:	220d      	movs	r2, #13
 800229a:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_RESET;
 800229c:	4b87      	ldr	r3, [pc, #540]	@ (80024bc <MQTT_Init+0x29c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e7da      	b.n	800225a <MQTT_Init+0x3a>
      checkFunc = Wifi_SetWifiMode2((char*)config->mqttPacketBuffer, STATION_MODE, POLLING_MODE);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2101      	movs	r1, #1
 80022a8:	6820      	ldr	r0, [r4, #0]
 80022aa:	f7ff fd63 	bl	8001d74 <Wifi_SetWifiMode2>
      if(checkFunc == FUNC_OK)
 80022ae:	2804      	cmp	r0, #4
 80022b0:	d80a      	bhi.n	80022c8 <MQTT_Init+0xa8>
 80022b2:	e8df f000 	tbb	[pc, r0]
 80022b6:	2003      	.short	0x2003
 80022b8:	2709      	.short	0x2709
 80022ba:	19          	.byte	0x19
 80022bb:	00          	.byte	0x00
        mqtt_timer = 0;
 80022bc:	4b82      	ldr	r3, [pc, #520]	@ (80024c8 <MQTT_Init+0x2a8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_SMARTCONFIG;
 80022c2:	4b7e      	ldr	r3, [pc, #504]	@ (80024bc <MQTT_Init+0x29c>)
 80022c4:	2202      	movs	r2, #2
 80022c6:	701a      	strb	r2, [r3, #0]
      if(mqtt_timer > 20)
 80022c8:	4b7f      	ldr	r3, [pc, #508]	@ (80024c8 <MQTT_Init+0x2a8>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b14      	cmp	r3, #20
 80022d0:	f240 827a 	bls.w	80027c8 <MQTT_Init+0x5a8>
        mqtt_timer = 0;
 80022d4:	4b7c      	ldr	r3, [pc, #496]	@ (80024c8 <MQTT_Init+0x2a8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
        mqttErrorData.errorCode = MQTT_INIT_ERROR_WIFI_MODE;
 80022da:	4b7c      	ldr	r3, [pc, #496]	@ (80024cc <MQTT_Init+0x2ac>)
 80022dc:	2202      	movs	r2, #2
 80022de:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 80022e0:	4b76      	ldr	r3, [pc, #472]	@ (80024bc <MQTT_Init+0x29c>)
 80022e2:	220a      	movs	r2, #10
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e26f      	b.n	80027c8 <MQTT_Init+0x5a8>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;              // Fire an error message on OLED and save log error
 80022e8:	4b78      	ldr	r3, [pc, #480]	@ (80024cc <MQTT_Init+0x2ac>)
 80022ea:	220b      	movs	r2, #11
 80022ec:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_MODE;
 80022ee:	4b73      	ldr	r3, [pc, #460]	@ (80024bc <MQTT_Init+0x29c>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
 80022f4:	e7e8      	b.n	80022c8 <MQTT_Init+0xa8>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;              // Fire an error message on OLED and save log error
 80022f6:	4b75      	ldr	r3, [pc, #468]	@ (80024cc <MQTT_Init+0x2ac>)
 80022f8:	220c      	movs	r2, #12
 80022fa:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_MODE;
 80022fc:	4b6f      	ldr	r3, [pc, #444]	@ (80024bc <MQTT_Init+0x29c>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	e7e1      	b.n	80022c8 <MQTT_Init+0xa8>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TIMEOUT;         // Fire an error message on OLED and save log error
 8002304:	4b71      	ldr	r3, [pc, #452]	@ (80024cc <MQTT_Init+0x2ac>)
 8002306:	220d      	movs	r2, #13
 8002308:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_MODE;
 800230a:	4b6c      	ldr	r3, [pc, #432]	@ (80024bc <MQTT_Init+0x29c>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e7da      	b.n	80022c8 <MQTT_Init+0xa8>
      if (config->OSC_enable == 1)
 8002312:	7963      	ldrb	r3, [r4, #5]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d012      	beq.n	800233e <MQTT_Init+0x11e>
        MQTTInitCase = MQTT_INIT_STATE_WIFI_DISC_AP;
 8002318:	4b68      	ldr	r3, [pc, #416]	@ (80024bc <MQTT_Init+0x29c>)
 800231a:	2203      	movs	r2, #3
 800231c:	701a      	strb	r2, [r3, #0]
      if(mqtt_timer > 65)
 800231e:	4b6a      	ldr	r3, [pc, #424]	@ (80024c8 <MQTT_Init+0x2a8>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b41      	cmp	r3, #65	@ 0x41
 8002326:	f240 824f 	bls.w	80027c8 <MQTT_Init+0x5a8>
        mqtt_timer = 0;
 800232a:	4b67      	ldr	r3, [pc, #412]	@ (80024c8 <MQTT_Init+0x2a8>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
        mqttErrorData.errorCode = MQTT_INIT_ERROR_WIFI_SMARTCONFIG;
 8002330:	4b66      	ldr	r3, [pc, #408]	@ (80024cc <MQTT_Init+0x2ac>)
 8002332:	2203      	movs	r2, #3
 8002334:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 8002336:	4b61      	ldr	r3, [pc, #388]	@ (80024bc <MQTT_Init+0x29c>)
 8002338:	220a      	movs	r2, #10
 800233a:	701a      	strb	r2, [r3, #0]
 800233c:	e244      	b.n	80027c8 <MQTT_Init+0x5a8>
        if (HAL_TIM_Base_Start_IT(TMR_ONESECOND) != HAL_OK)
 800233e:	4864      	ldr	r0, [pc, #400]	@ (80024d0 <MQTT_Init+0x2b0>)
 8002340:	f004 ff60 	bl	8007204 <HAL_TIM_Base_Start_IT>
 8002344:	b990      	cbnz	r0, 800236c <MQTT_Init+0x14c>
        checkFunc = Wifi_StartSmartConfig2((char*)config->mqttPacketBuffer, POLLING_MODE);
 8002346:	2100      	movs	r1, #0
 8002348:	6820      	ldr	r0, [r4, #0]
 800234a:	f7ff fd51 	bl	8001df0 <Wifi_StartSmartConfig2>
        if(checkFunc == FUNC_OK)
 800234e:	2804      	cmp	r0, #4
 8002350:	d8e5      	bhi.n	800231e <MQTT_Init+0xfe>
 8002352:	a301      	add	r3, pc, #4	@ (adr r3, 8002358 <MQTT_Init+0x138>)
 8002354:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8002358:	08002373 	.word	0x08002373
 800235c:	0800245f 	.word	0x0800245f
 8002360:	0800231f 	.word	0x0800231f
 8002364:	0800246d 	.word	0x0800246d
 8002368:	08002451 	.word	0x08002451
          Error_Handler();
 800236c:	f7ff fb53 	bl	8001a16 <Error_Handler>
 8002370:	e7e9      	b.n	8002346 <MQTT_Init+0x126>
          mqtt_timer = 0;
 8002372:	4b55      	ldr	r3, [pc, #340]	@ (80024c8 <MQTT_Init+0x2a8>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
          while(mqtt_timer < 250 && MQTTInitCase != MQTT_INIT_STATE_WIFI_SET_TIME)
 8002378:	e007      	b.n	800238a <MQTT_Init+0x16a>
              mqtt_timer = 0;
 800237a:	4b53      	ldr	r3, [pc, #332]	@ (80024c8 <MQTT_Init+0x2a8>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
              parse_wifi_info((char*)config->mqttPacketBuffer, mqtt_osc_ssid, mqtt_osc_password);
 8002380:	4a54      	ldr	r2, [pc, #336]	@ (80024d4 <MQTT_Init+0x2b4>)
 8002382:	4955      	ldr	r1, [pc, #340]	@ (80024d8 <MQTT_Init+0x2b8>)
 8002384:	4630      	mov	r0, r6
 8002386:	f7ff fc39 	bl	8001bfc <parse_wifi_info>
          while(mqtt_timer < 250 && MQTTInitCase != MQTT_INIT_STATE_WIFI_SET_TIME)
 800238a:	4b4f      	ldr	r3, [pc, #316]	@ (80024c8 <MQTT_Init+0x2a8>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2bf9      	cmp	r3, #249	@ 0xf9
 8002392:	d851      	bhi.n	8002438 <MQTT_Init+0x218>
 8002394:	4b49      	ldr	r3, [pc, #292]	@ (80024bc <MQTT_Init+0x29c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d04d      	beq.n	8002438 <MQTT_Init+0x218>
            Wifi_Receive((char*)config->mqttPacketBuffer, 200, 5000, POLLING_MODE);
 800239c:	2300      	movs	r3, #0
 800239e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a2:	21c8      	movs	r1, #200	@ 0xc8
 80023a4:	6820      	ldr	r0, [r4, #0]
 80023a6:	f7ff fc83 	bl	8001cb0 <Wifi_Receive>
            if(Wifi_CheckResponse((char*)config->mqttPacketBuffer, "Smart get wifi info") == RESP_MSG_OK)
 80023aa:	6826      	ldr	r6, [r4, #0]
 80023ac:	494b      	ldr	r1, [pc, #300]	@ (80024dc <MQTT_Init+0x2bc>)
 80023ae:	4630      	mov	r0, r6
 80023b0:	f7ff fbf6 	bl	8001ba0 <Wifi_CheckResponse>
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d0e0      	beq.n	800237a <MQTT_Init+0x15a>
            else if(Wifi_CheckResponse((char*)config->mqttPacketBuffer, "smartconfig connected wifi") == RESP_MSG_OK)
 80023b8:	4949      	ldr	r1, [pc, #292]	@ (80024e0 <MQTT_Init+0x2c0>)
 80023ba:	4630      	mov	r0, r6
 80023bc:	f7ff fbf0 	bl	8001ba0 <Wifi_CheckResponse>
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d1e2      	bne.n	800238a <MQTT_Init+0x16a>
              mqtt_timer = 0;
 80023c4:	4b40      	ldr	r3, [pc, #256]	@ (80024c8 <MQTT_Init+0x2a8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
              HAL_Delay(1000);
 80023ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023ce:	f000 fea5 	bl	800311c <HAL_Delay>
              while(MQTTInitCase == MQTT_INIT_STATE_WIFI_SMARTCONFIG)
 80023d2:	4b3a      	ldr	r3, [pc, #232]	@ (80024bc <MQTT_Init+0x29c>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d1d7      	bne.n	800238a <MQTT_Init+0x16a>
                checkFunc = Wifi_StopSmartConfig2((char*)config->mqttPacketBuffer, POLLING_MODE);
 80023da:	2100      	movs	r1, #0
 80023dc:	6820      	ldr	r0, [r4, #0]
 80023de:	f7ff fd37 	bl	8001e50 <Wifi_StopSmartConfig2>
                if(checkFunc == FUNC_OK)
 80023e2:	2804      	cmp	r0, #4
 80023e4:	d8f5      	bhi.n	80023d2 <MQTT_Init+0x1b2>
 80023e6:	a301      	add	r3, pc, #4	@ (adr r3, 80023ec <MQTT_Init+0x1cc>)
 80023e8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80023ec:	08002401 	.word	0x08002401
 80023f0:	0800241d 	.word	0x0800241d
 80023f4:	080023d3 	.word	0x080023d3
 80023f8:	0800242b 	.word	0x0800242b
 80023fc:	0800240f 	.word	0x0800240f
                  mqtt_timer = 0;
 8002400:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <MQTT_Init+0x2a8>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
                  MQTTInitCase = MQTT_INIT_STATE_WIFI_SET_TIME;
 8002406:	4b2d      	ldr	r3, [pc, #180]	@ (80024bc <MQTT_Init+0x29c>)
 8002408:	2205      	movs	r2, #5
 800240a:	701a      	strb	r2, [r3, #0]
                  break;
 800240c:	e7bd      	b.n	800238a <MQTT_Init+0x16a>
                  mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;            // Fire an error message on OLED and save log error
 800240e:	4b2f      	ldr	r3, [pc, #188]	@ (80024cc <MQTT_Init+0x2ac>)
 8002410:	220b      	movs	r2, #11
 8002412:	701a      	strb	r2, [r3, #0]
                  MQTTInitCase = MQTT_INIT_STATE_WIFI_SMARTCONFIG;
 8002414:	4b29      	ldr	r3, [pc, #164]	@ (80024bc <MQTT_Init+0x29c>)
 8002416:	2202      	movs	r2, #2
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e7da      	b.n	80023d2 <MQTT_Init+0x1b2>
                  mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;            // Fire an error message on OLED and save log error
 800241c:	4b2b      	ldr	r3, [pc, #172]	@ (80024cc <MQTT_Init+0x2ac>)
 800241e:	220c      	movs	r2, #12
 8002420:	701a      	strb	r2, [r3, #0]
                  MQTTInitCase = MQTT_INIT_STATE_WIFI_SMARTCONFIG;
 8002422:	4b26      	ldr	r3, [pc, #152]	@ (80024bc <MQTT_Init+0x29c>)
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	e7d3      	b.n	80023d2 <MQTT_Init+0x1b2>
                  mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TIMEOUT;       // Fire an error message on OLED and save log error
 800242a:	4b28      	ldr	r3, [pc, #160]	@ (80024cc <MQTT_Init+0x2ac>)
 800242c:	220d      	movs	r2, #13
 800242e:	701a      	strb	r2, [r3, #0]
                  MQTTInitCase = MQTT_INIT_STATE_WIFI_SMARTCONFIG;
 8002430:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <MQTT_Init+0x29c>)
 8002432:	2202      	movs	r2, #2
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e7cc      	b.n	80023d2 <MQTT_Init+0x1b2>
          HAL_TIM_Base_Stop_IT(TMR_ONESECOND);
 8002438:	4825      	ldr	r0, [pc, #148]	@ (80024d0 <MQTT_Init+0x2b0>)
 800243a:	f004 ff15 	bl	8007268 <HAL_TIM_Base_Stop_IT>
          if(MQTTInitCase != MQTT_INIT_STATE_WIFI_SET_TIME)
 800243e:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <MQTT_Init+0x29c>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b05      	cmp	r3, #5
 8002444:	f43f af6b 	beq.w	800231e <MQTT_Init+0xfe>
            MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 8002448:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <MQTT_Init+0x29c>)
 800244a:	220a      	movs	r2, #10
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	e766      	b.n	800231e <MQTT_Init+0xfe>
          mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;            // Fire an error message on OLED and save log error
 8002450:	4b1e      	ldr	r3, [pc, #120]	@ (80024cc <MQTT_Init+0x2ac>)
 8002452:	220b      	movs	r2, #11
 8002454:	701a      	strb	r2, [r3, #0]
          MQTTInitCase= MQTT_INIT_STATE_WIFI_SMARTCONFIG;
 8002456:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <MQTT_Init+0x29c>)
 8002458:	2202      	movs	r2, #2
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e75f      	b.n	800231e <MQTT_Init+0xfe>
          mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;            // Fire an error message on OLED and save log error
 800245e:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <MQTT_Init+0x2ac>)
 8002460:	220c      	movs	r2, #12
 8002462:	701a      	strb	r2, [r3, #0]
          MQTTInitCase= MQTT_INIT_STATE_WIFI_SMARTCONFIG;
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <MQTT_Init+0x29c>)
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e758      	b.n	800231e <MQTT_Init+0xfe>
          mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TIMEOUT;       // Fire an error message on OLED and save log error
 800246c:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <MQTT_Init+0x2ac>)
 800246e:	220d      	movs	r2, #13
 8002470:	701a      	strb	r2, [r3, #0]
          MQTTInitCase = MQTT_INIT_STATE_WIFI_SMARTCONFIG;
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <MQTT_Init+0x29c>)
 8002474:	2202      	movs	r2, #2
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	e751      	b.n	800231e <MQTT_Init+0xfe>
      checkFunc = Wifi_QAP2((char*)config->mqttPacketBuffer, POLLING_MODE);
 800247a:	2100      	movs	r1, #0
 800247c:	6820      	ldr	r0, [r4, #0]
 800247e:	f7ff fd17 	bl	8001eb0 <Wifi_QAP2>
      if(checkFunc == FUNC_OK)
 8002482:	2804      	cmp	r0, #4
 8002484:	d80a      	bhi.n	800249c <MQTT_Init+0x27c>
 8002486:	e8df f000 	tbb	[pc, r0]
 800248a:	3403      	.short	0x3403
 800248c:	3b09      	.short	0x3b09
 800248e:	2d          	.byte	0x2d
 800248f:	00          	.byte	0x00
        mqtt_timer = 0;
 8002490:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <MQTT_Init+0x2a8>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_SET_AP;
 8002496:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <MQTT_Init+0x29c>)
 8002498:	2204      	movs	r2, #4
 800249a:	701a      	strb	r2, [r3, #0]
      if(mqtt_timer > 20)
 800249c:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <MQTT_Init+0x2a8>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b14      	cmp	r3, #20
 80024a4:	f240 8190 	bls.w	80027c8 <MQTT_Init+0x5a8>
        mqtt_timer = 0;
 80024a8:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <MQTT_Init+0x2a8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
        mqttErrorData.errorCode = MQTT_INIT_ERROR_WIFI_DISC_AP;
 80024ae:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <MQTT_Init+0x2ac>)
 80024b0:	2204      	movs	r2, #4
 80024b2:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 80024b4:	4b01      	ldr	r3, [pc, #4]	@ (80024bc <MQTT_Init+0x29c>)
 80024b6:	220a      	movs	r2, #10
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e185      	b.n	80027c8 <MQTT_Init+0x5a8>
 80024bc:	20000d20 	.word	0x20000d20
 80024c0:	20000d12 	.word	0x20000d12
 80024c4:	20000d26 	.word	0x20000d26
 80024c8:	20000d11 	.word	0x20000d11
 80024cc:	20000d24 	.word	0x20000d24
 80024d0:	20000fd4 	.word	0x20000fd4
 80024d4:	20000d28 	.word	0x20000d28
 80024d8:	20000d48 	.word	0x20000d48
 80024dc:	0800f0f4 	.word	0x0800f0f4
 80024e0:	0800f108 	.word	0x0800f108
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;              // Fire an error message on OLED and save log error
 80024e4:	4b9b      	ldr	r3, [pc, #620]	@ (8002754 <MQTT_Init+0x534>)
 80024e6:	220b      	movs	r2, #11
 80024e8:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_DISC_AP;
 80024ea:	4b9b      	ldr	r3, [pc, #620]	@ (8002758 <MQTT_Init+0x538>)
 80024ec:	2203      	movs	r2, #3
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	e7d4      	b.n	800249c <MQTT_Init+0x27c>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;              // Fire an error message on OLED and save log error
 80024f2:	4b98      	ldr	r3, [pc, #608]	@ (8002754 <MQTT_Init+0x534>)
 80024f4:	220c      	movs	r2, #12
 80024f6:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_DISC_AP;
 80024f8:	4b97      	ldr	r3, [pc, #604]	@ (8002758 <MQTT_Init+0x538>)
 80024fa:	2203      	movs	r2, #3
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e7cd      	b.n	800249c <MQTT_Init+0x27c>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TIMEOUT;         // Fire an error message on OLED and save log error
 8002500:	4b94      	ldr	r3, [pc, #592]	@ (8002754 <MQTT_Init+0x534>)
 8002502:	220d      	movs	r2, #13
 8002504:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_DISC_AP;
 8002506:	4b94      	ldr	r3, [pc, #592]	@ (8002758 <MQTT_Init+0x538>)
 8002508:	2203      	movs	r2, #3
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e7c6      	b.n	800249c <MQTT_Init+0x27c>
      checkFunc = Wifi_SetAP2((char*)config->mqttPacketBuffer, config->wifiID, config->wifiPassword, POLLING_MODE);
 800250e:	2300      	movs	r3, #0
 8002510:	68e2      	ldr	r2, [r4, #12]
 8002512:	68a1      	ldr	r1, [r4, #8]
 8002514:	6820      	ldr	r0, [r4, #0]
 8002516:	f7ff fcfb 	bl	8001f10 <Wifi_SetAP2>
      if(checkFunc == FUNC_OK)
 800251a:	2804      	cmp	r0, #4
 800251c:	d80a      	bhi.n	8002534 <MQTT_Init+0x314>
 800251e:	e8df f000 	tbb	[pc, r0]
 8002522:	2003      	.short	0x2003
 8002524:	2709      	.short	0x2709
 8002526:	19          	.byte	0x19
 8002527:	00          	.byte	0x00
        mqtt_timer = 0;
 8002528:	4b8c      	ldr	r3, [pc, #560]	@ (800275c <MQTT_Init+0x53c>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_SET_TIME;
 800252e:	4b8a      	ldr	r3, [pc, #552]	@ (8002758 <MQTT_Init+0x538>)
 8002530:	2205      	movs	r2, #5
 8002532:	701a      	strb	r2, [r3, #0]
      if(mqtt_timer > 20)
 8002534:	4b89      	ldr	r3, [pc, #548]	@ (800275c <MQTT_Init+0x53c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b14      	cmp	r3, #20
 800253c:	f240 8144 	bls.w	80027c8 <MQTT_Init+0x5a8>
        mqtt_timer = 0;
 8002540:	4b86      	ldr	r3, [pc, #536]	@ (800275c <MQTT_Init+0x53c>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
        mqttErrorData.errorCode = MQTT_INIT_ERROR_WIFI_SET_AP;
 8002546:	4b83      	ldr	r3, [pc, #524]	@ (8002754 <MQTT_Init+0x534>)
 8002548:	2205      	movs	r2, #5
 800254a:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 800254c:	4b82      	ldr	r3, [pc, #520]	@ (8002758 <MQTT_Init+0x538>)
 800254e:	220a      	movs	r2, #10
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e139      	b.n	80027c8 <MQTT_Init+0x5a8>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;              // Fire an error message on OLED and save log error
 8002554:	4b7f      	ldr	r3, [pc, #508]	@ (8002754 <MQTT_Init+0x534>)
 8002556:	220b      	movs	r2, #11
 8002558:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_SET_AP;
 800255a:	4b7f      	ldr	r3, [pc, #508]	@ (8002758 <MQTT_Init+0x538>)
 800255c:	2204      	movs	r2, #4
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e7e8      	b.n	8002534 <MQTT_Init+0x314>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;              // Fire an error message on OLED and save log error
 8002562:	4b7c      	ldr	r3, [pc, #496]	@ (8002754 <MQTT_Init+0x534>)
 8002564:	220c      	movs	r2, #12
 8002566:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_SET_AP;
 8002568:	4b7b      	ldr	r3, [pc, #492]	@ (8002758 <MQTT_Init+0x538>)
 800256a:	2204      	movs	r2, #4
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e7e1      	b.n	8002534 <MQTT_Init+0x314>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TIMEOUT;         // Fire an error message on OLED and save log error
 8002570:	4b78      	ldr	r3, [pc, #480]	@ (8002754 <MQTT_Init+0x534>)
 8002572:	220d      	movs	r2, #13
 8002574:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_SET_AP;
 8002576:	4b78      	ldr	r3, [pc, #480]	@ (8002758 <MQTT_Init+0x538>)
 8002578:	2204      	movs	r2, #4
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e7da      	b.n	8002534 <MQTT_Init+0x314>
      checkFunc = Wifi_SetTime2((char*)config->mqttPacketBuffer, config->timezone, POLLING_MODE);
 800257e:	2200      	movs	r2, #0
 8002580:	7c21      	ldrb	r1, [r4, #16]
 8002582:	6820      	ldr	r0, [r4, #0]
 8002584:	f7ff fd0a 	bl	8001f9c <Wifi_SetTime2>
      if(checkFunc == FUNC_OK)
 8002588:	2804      	cmp	r0, #4
 800258a:	d80a      	bhi.n	80025a2 <MQTT_Init+0x382>
 800258c:	e8df f000 	tbb	[pc, r0]
 8002590:	27092003 	.word	0x27092003
 8002594:	19          	.byte	0x19
 8002595:	00          	.byte	0x00
        mqtt_timer = 0;
 8002596:	4b71      	ldr	r3, [pc, #452]	@ (800275c <MQTT_Init+0x53c>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_USER_CONFIG;
 800259c:	4b6e      	ldr	r3, [pc, #440]	@ (8002758 <MQTT_Init+0x538>)
 800259e:	2206      	movs	r2, #6
 80025a0:	701a      	strb	r2, [r3, #0]
      if(mqtt_timer > 20)
 80025a2:	4b6e      	ldr	r3, [pc, #440]	@ (800275c <MQTT_Init+0x53c>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b14      	cmp	r3, #20
 80025aa:	f240 810d 	bls.w	80027c8 <MQTT_Init+0x5a8>
        mqtt_timer = 0;
 80025ae:	4b6b      	ldr	r3, [pc, #428]	@ (800275c <MQTT_Init+0x53c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
        mqttErrorData.errorCode = MQTT_INIT_ERROR_WIFI_SET_TIME;
 80025b4:	4b67      	ldr	r3, [pc, #412]	@ (8002754 <MQTT_Init+0x534>)
 80025b6:	2206      	movs	r2, #6
 80025b8:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 80025ba:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <MQTT_Init+0x538>)
 80025bc:	220a      	movs	r2, #10
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e102      	b.n	80027c8 <MQTT_Init+0x5a8>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;              // Fire an error message on OLED and save log error
 80025c2:	4b64      	ldr	r3, [pc, #400]	@ (8002754 <MQTT_Init+0x534>)
 80025c4:	220b      	movs	r2, #11
 80025c6:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_SET_TIME;
 80025c8:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <MQTT_Init+0x538>)
 80025ca:	2205      	movs	r2, #5
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e7e8      	b.n	80025a2 <MQTT_Init+0x382>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;              // Fire an error message on OLED and save log error
 80025d0:	4b60      	ldr	r3, [pc, #384]	@ (8002754 <MQTT_Init+0x534>)
 80025d2:	220c      	movs	r2, #12
 80025d4:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_SET_TIME;
 80025d6:	4b60      	ldr	r3, [pc, #384]	@ (8002758 <MQTT_Init+0x538>)
 80025d8:	2205      	movs	r2, #5
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e7e1      	b.n	80025a2 <MQTT_Init+0x382>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TIMEOUT;         // Fire an error message on OLED and save log error
 80025de:	4b5d      	ldr	r3, [pc, #372]	@ (8002754 <MQTT_Init+0x534>)
 80025e0:	220d      	movs	r2, #13
 80025e2:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_WIFI_SET_TIME;
 80025e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002758 <MQTT_Init+0x538>)
 80025e6:	2205      	movs	r2, #5
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e7da      	b.n	80025a2 <MQTT_Init+0x382>
      checkFunc = Wifi_MqttUserConfig2((char*)config->mqttPacketBuffer, config->mode_mqtt, config->clientID,
 80025ec:	2300      	movs	r3, #0
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	69e3      	ldr	r3, [r4, #28]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	69a3      	ldr	r3, [r4, #24]
 80025f6:	6962      	ldr	r2, [r4, #20]
 80025f8:	7c61      	ldrb	r1, [r4, #17]
 80025fa:	6820      	ldr	r0, [r4, #0]
 80025fc:	f7ff fd0c 	bl	8002018 <Wifi_MqttUserConfig2>
      if(checkFunc == FUNC_OK)
 8002600:	2804      	cmp	r0, #4
 8002602:	d80d      	bhi.n	8002620 <MQTT_Init+0x400>
 8002604:	e8df f000 	tbb	[pc, r0]
 8002608:	2a0c2303 	.word	0x2a0c2303
 800260c:	1c          	.byte	0x1c
 800260d:	00          	.byte	0x00
        mqtt_timer = 0;
 800260e:	4b53      	ldr	r3, [pc, #332]	@ (800275c <MQTT_Init+0x53c>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
        flag_mqtt_init_done = SET;
 8002614:	4b52      	ldr	r3, [pc, #328]	@ (8002760 <MQTT_Init+0x540>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_CONN;
 800261a:	4b4f      	ldr	r3, [pc, #316]	@ (8002758 <MQTT_Init+0x538>)
 800261c:	2208      	movs	r2, #8
 800261e:	701a      	strb	r2, [r3, #0]
      if(mqtt_timer > 20)
 8002620:	4b4e      	ldr	r3, [pc, #312]	@ (800275c <MQTT_Init+0x53c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b14      	cmp	r3, #20
 8002628:	f240 80ce 	bls.w	80027c8 <MQTT_Init+0x5a8>
        mqtt_timer = 0;
 800262c:	4b4b      	ldr	r3, [pc, #300]	@ (800275c <MQTT_Init+0x53c>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
        mqttErrorData.errorCode = MQTT_INIT_ERROR_MQTT_USER_CONFIG;
 8002632:	4b48      	ldr	r3, [pc, #288]	@ (8002754 <MQTT_Init+0x534>)
 8002634:	2207      	movs	r2, #7
 8002636:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 8002638:	4b47      	ldr	r3, [pc, #284]	@ (8002758 <MQTT_Init+0x538>)
 800263a:	220a      	movs	r2, #10
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e0c3      	b.n	80027c8 <MQTT_Init+0x5a8>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;              // Fire an error message on OLED and save log error
 8002640:	4b44      	ldr	r3, [pc, #272]	@ (8002754 <MQTT_Init+0x534>)
 8002642:	220b      	movs	r2, #11
 8002644:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_USER_CONFIG;
 8002646:	4b44      	ldr	r3, [pc, #272]	@ (8002758 <MQTT_Init+0x538>)
 8002648:	2206      	movs	r2, #6
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e7e8      	b.n	8002620 <MQTT_Init+0x400>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;              // Fire an error message on OLED and save log error
 800264e:	4b41      	ldr	r3, [pc, #260]	@ (8002754 <MQTT_Init+0x534>)
 8002650:	220c      	movs	r2, #12
 8002652:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_USER_CONFIG;
 8002654:	4b40      	ldr	r3, [pc, #256]	@ (8002758 <MQTT_Init+0x538>)
 8002656:	2206      	movs	r2, #6
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e7e1      	b.n	8002620 <MQTT_Init+0x400>
        MQTTInitCase = MQTT_INIT_STATE_MQTT_USER_CONFIG;
 800265c:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <MQTT_Init+0x538>)
 800265e:	2206      	movs	r2, #6
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e7dd      	b.n	8002620 <MQTT_Init+0x400>
      checkFunc = Wifi_MqttConnConfig2((char*)config->mqttPacketBuffer, config->keepAlive,
 8002664:	2300      	movs	r3, #0
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8002672:	f894 2022 	ldrb.w	r2, [r4, #34]	@ 0x22
 8002676:	8c21      	ldrh	r1, [r4, #32]
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	f7ff fd11 	bl	80020a0 <Wifi_MqttConnConfig2>
      if(checkFunc == FUNC_OK)
 800267e:	2804      	cmp	r0, #4
 8002680:	d80a      	bhi.n	8002698 <MQTT_Init+0x478>
 8002682:	e8df f000 	tbb	[pc, r0]
 8002686:	2003      	.short	0x2003
 8002688:	2709      	.short	0x2709
 800268a:	19          	.byte	0x19
 800268b:	00          	.byte	0x00
        mqtt_timer = 0;
 800268c:	4b33      	ldr	r3, [pc, #204]	@ (800275c <MQTT_Init+0x53c>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_CONN;
 8002692:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <MQTT_Init+0x538>)
 8002694:	2208      	movs	r2, #8
 8002696:	701a      	strb	r2, [r3, #0]
      if(mqtt_timer > 20)
 8002698:	4b30      	ldr	r3, [pc, #192]	@ (800275c <MQTT_Init+0x53c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b14      	cmp	r3, #20
 80026a0:	f240 8092 	bls.w	80027c8 <MQTT_Init+0x5a8>
        mqtt_timer = 0;
 80026a4:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <MQTT_Init+0x53c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
        mqttErrorData.errorCode = MQTT_INIT_ERROR_MQTT_CONN_CONFIG;
 80026aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002754 <MQTT_Init+0x534>)
 80026ac:	2208      	movs	r2, #8
 80026ae:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 80026b0:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <MQTT_Init+0x538>)
 80026b2:	220a      	movs	r2, #10
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e087      	b.n	80027c8 <MQTT_Init+0x5a8>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;              // Fire an error message on OLED and save log error
 80026b8:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <MQTT_Init+0x534>)
 80026ba:	220b      	movs	r2, #11
 80026bc:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_CONN_CONFIG;
 80026be:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <MQTT_Init+0x538>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e7e8      	b.n	8002698 <MQTT_Init+0x478>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;              // Fire an error message on OLED and save log error
 80026c6:	4b23      	ldr	r3, [pc, #140]	@ (8002754 <MQTT_Init+0x534>)
 80026c8:	220c      	movs	r2, #12
 80026ca:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_CONN_CONFIG;
 80026cc:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <MQTT_Init+0x538>)
 80026ce:	2207      	movs	r2, #7
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e7e1      	b.n	8002698 <MQTT_Init+0x478>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TIMEOUT;         // Fire an error message on OLED and save log error
 80026d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <MQTT_Init+0x534>)
 80026d6:	220d      	movs	r2, #13
 80026d8:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_CONN_CONFIG;
 80026da:	4b1f      	ldr	r3, [pc, #124]	@ (8002758 <MQTT_Init+0x538>)
 80026dc:	2207      	movs	r2, #7
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e7da      	b.n	8002698 <MQTT_Init+0x478>
      checkFunc = Wifi_MqttConn2((char*)config->mqttPacketBuffer, config->brokerAddress,config->reconnect, POLLING_MODE);
 80026e2:	2300      	movs	r3, #0
 80026e4:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80026e8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	f7ff fd1c 	bl	8002128 <Wifi_MqttConn2>
      if(checkFunc == FUNC_OK)
 80026f0:	2804      	cmp	r0, #4
 80026f2:	d843      	bhi.n	800277c <MQTT_Init+0x55c>
 80026f4:	e8df f000 	tbb	[pc, r0]
 80026f8:	58425108 	.word	0x58425108
 80026fc:	3c          	.byte	0x3c
 80026fd:	00          	.byte	0x00
          else if(mqtt_timer > 200)
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <MQTT_Init+0x53c>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2bc8      	cmp	r3, #200	@ 0xc8
 8002706:	d81e      	bhi.n	8002746 <MQTT_Init+0x526>
        while (MQTTInitCase == MQTT_INIT_STATE_MQTT_CONN)
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <MQTT_Init+0x538>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d135      	bne.n	800277c <MQTT_Init+0x55c>
          checkFunc = Wifi_GetMqttConn2((char*)config->mqttPacketBuffer, POLLING_MODE);
 8002710:	2100      	movs	r1, #0
 8002712:	6820      	ldr	r0, [r4, #0]
 8002714:	f7ff fd48 	bl	80021a8 <Wifi_GetMqttConn2>
          if(checkFunc == FUNC_OK && config->mqttPacketBuffer[26] == '4')
 8002718:	4603      	mov	r3, r0
 800271a:	2800      	cmp	r0, #0
 800271c:	d1ef      	bne.n	80026fe <MQTT_Init+0x4de>
 800271e:	6822      	ldr	r2, [r4, #0]
 8002720:	7e92      	ldrb	r2, [r2, #26]
 8002722:	2a34      	cmp	r2, #52	@ 0x34
 8002724:	d1eb      	bne.n	80026fe <MQTT_Init+0x4de>
            mqtt_timer = 0;
 8002726:	2200      	movs	r2, #0
 8002728:	490c      	ldr	r1, [pc, #48]	@ (800275c <MQTT_Init+0x53c>)
 800272a:	700a      	strb	r2, [r1, #0]
            mqtt_timer_en = RESET;
 800272c:	490d      	ldr	r1, [pc, #52]	@ (8002764 <MQTT_Init+0x544>)
 800272e:	700a      	strb	r2, [r1, #0]
            flag_mqtt_connect = SET;
 8002730:	2201      	movs	r2, #1
 8002732:	490d      	ldr	r1, [pc, #52]	@ (8002768 <MQTT_Init+0x548>)
 8002734:	700a      	strb	r2, [r1, #0]
            flag_mqtt_init_done = SET;
 8002736:	490a      	ldr	r1, [pc, #40]	@ (8002760 <MQTT_Init+0x540>)
 8002738:	700a      	strb	r2, [r1, #0]
            MQTTInitCase = MQTT_INIT_STATE_END_CASE;
 800273a:	2209      	movs	r2, #9
 800273c:	4906      	ldr	r1, [pc, #24]	@ (8002758 <MQTT_Init+0x538>)
 800273e:	700a      	strb	r2, [r1, #0]
            MQTTSubInitCase = MQTT_SUB_INIT;
 8002740:	490a      	ldr	r1, [pc, #40]	@ (800276c <MQTT_Init+0x54c>)
 8002742:	700a      	strb	r2, [r1, #0]
            return FUNC_SUCCESSFUL;
 8002744:	e06d      	b.n	8002822 <MQTT_Init+0x602>
            mqtt_timer = 0;
 8002746:	4b05      	ldr	r3, [pc, #20]	@ (800275c <MQTT_Init+0x53c>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
            MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 800274c:	4b02      	ldr	r3, [pc, #8]	@ (8002758 <MQTT_Init+0x538>)
 800274e:	220a      	movs	r2, #10
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e7d9      	b.n	8002708 <MQTT_Init+0x4e8>
 8002754:	20000d24 	.word	0x20000d24
 8002758:	20000d20 	.word	0x20000d20
 800275c:	20000d11 	.word	0x20000d11
 8002760:	20000d25 	.word	0x20000d25
 8002764:	20000d12 	.word	0x20000d12
 8002768:	20000d21 	.word	0x20000d21
 800276c:	200000c8 	.word	0x200000c8
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TX;              // Fire an error message on OLED and save log error
 8002770:	4b2d      	ldr	r3, [pc, #180]	@ (8002828 <MQTT_Init+0x608>)
 8002772:	220b      	movs	r2, #11
 8002774:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_CONN;
 8002776:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <MQTT_Init+0x60c>)
 8002778:	2208      	movs	r2, #8
 800277a:	701a      	strb	r2, [r3, #0]
      if(mqtt_timer > 100)
 800277c:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <MQTT_Init+0x610>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b64      	cmp	r3, #100	@ 0x64
 8002784:	d920      	bls.n	80027c8 <MQTT_Init+0x5a8>
        mqtt_timer = 0;
 8002786:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <MQTT_Init+0x610>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
        mqttErrorData.errorCode = MQTT_INIT_ERROR_MQTT_CONN_FAIL;
 800278c:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <MQTT_Init+0x608>)
 800278e:	2209      	movs	r2, #9
 8002790:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_TIMEOUT;
 8002792:	4b26      	ldr	r3, [pc, #152]	@ (800282c <MQTT_Init+0x60c>)
 8002794:	220a      	movs	r2, #10
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e016      	b.n	80027c8 <MQTT_Init+0x5a8>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_RX;              // Fire an error message on OLED and save log error
 800279a:	4b23      	ldr	r3, [pc, #140]	@ (8002828 <MQTT_Init+0x608>)
 800279c:	220c      	movs	r2, #12
 800279e:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_CONN;
 80027a0:	4b22      	ldr	r3, [pc, #136]	@ (800282c <MQTT_Init+0x60c>)
 80027a2:	2208      	movs	r2, #8
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e7e9      	b.n	800277c <MQTT_Init+0x55c>
        mqttErrorData.errorCode = MQTT_INIT_ERROR_FUNC_TIMEOUT;         // Fire an error message on OLED and save log error
 80027a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002828 <MQTT_Init+0x608>)
 80027aa:	220d      	movs	r2, #13
 80027ac:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_MQTT_CONN;
 80027ae:	4b1f      	ldr	r3, [pc, #124]	@ (800282c <MQTT_Init+0x60c>)
 80027b0:	2208      	movs	r2, #8
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e7e2      	b.n	800277c <MQTT_Init+0x55c>
      while(mqttConnTryCount < MQTT_CONN_MAX_TRY)
 80027b6:	2d02      	cmp	r5, #2
 80027b8:	d804      	bhi.n	80027c4 <MQTT_Init+0x5a4>
        mqttConnTryCount++;
 80027ba:	3501      	adds	r5, #1
 80027bc:	b2ed      	uxtb	r5, r5
        MQTTInitCase = MQTT_INIT_STATE_WIFI_RESET;
 80027be:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <MQTT_Init+0x60c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
      if(mqttConnTryCount == MQTT_CONN_MAX_TRY)
 80027c4:	2d03      	cmp	r5, #3
 80027c6:	d01f      	beq.n	8002808 <MQTT_Init+0x5e8>
  while(MQTTInitCase != MQTT_INIT_STATE_END_CASE){
 80027c8:	4b18      	ldr	r3, [pc, #96]	@ (800282c <MQTT_Init+0x60c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	d025      	beq.n	800281c <MQTT_Init+0x5fc>
    switch (MQTTInitCase){
 80027d0:	2b0a      	cmp	r3, #10
 80027d2:	d8f9      	bhi.n	80027c8 <MQTT_Init+0x5a8>
 80027d4:	a201      	add	r2, pc, #4	@ (adr r2, 80027dc <MQTT_Init+0x5bc>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	0800222f 	.word	0x0800222f
 80027e0:	080022a5 	.word	0x080022a5
 80027e4:	08002313 	.word	0x08002313
 80027e8:	0800247b 	.word	0x0800247b
 80027ec:	0800250f 	.word	0x0800250f
 80027f0:	0800257f 	.word	0x0800257f
 80027f4:	080025ed 	.word	0x080025ed
 80027f8:	08002665 	.word	0x08002665
 80027fc:	080026e3 	.word	0x080026e3
 8002800:	080027c9 	.word	0x080027c9
 8002804:	080027b7 	.word	0x080027b7
        mqtt_timer_en = RESET;
 8002808:	2500      	movs	r5, #0
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <MQTT_Init+0x614>)
 800280c:	701d      	strb	r5, [r3, #0]
        flag_mqtt_error = FUNC_ERROR;
 800280e:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <MQTT_Init+0x618>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
        MQTTInitCase = MQTT_INIT_STATE_END_CASE;
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <MQTT_Init+0x60c>)
 8002816:	2209      	movs	r2, #9
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e7d5      	b.n	80027c8 <MQTT_Init+0x5a8>
  return flag_mqtt_error;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <MQTT_Init+0x618>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	b2db      	uxtb	r3, r3
}
 8002822:	4618      	mov	r0, r3
 8002824:	b002      	add	sp, #8
 8002826:	bd70      	pop	{r4, r5, r6, pc}
 8002828:	20000d24 	.word	0x20000d24
 800282c:	20000d20 	.word	0x20000d20
 8002830:	20000d11 	.word	0x20000d11
 8002834:	20000d12 	.word	0x20000d12
 8002838:	20000d26 	.word	0x20000d26

0800283c <Wifi_MqttSub2>:


FUNC_StatusTypeDef Wifi_MqttSub2(char *buffer, const char *topic , uint8_t qos, MQTT_DataRecvModeTypeDef mode)
{
 800283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283e:	b09b      	sub	sp, #108	@ 0x6c
 8002840:	4604      	mov	r4, r0
 8002842:	460d      	mov	r5, r1
 8002844:	4616      	mov	r6, r2
 8002846:	461f      	mov	r7, r3
  HAL_StatusTypeDef checkCmd;
  HAL_StatusTypeDef checkRcv;
  WIFI_RespMsgTypeDef checkResp;
  char cmd[100] = {0};
 8002848:	2264      	movs	r2, #100	@ 0x64
 800284a:	2100      	movs	r1, #0
 800284c:	a801      	add	r0, sp, #4
 800284e:	f00a f88d 	bl	800c96c <memset>

  sprintf(cmd, "AT+MQTTSUB=0,\"%s\",%d\r\n", topic, qos);
 8002852:	4633      	mov	r3, r6
 8002854:	462a      	mov	r2, r5
 8002856:	4917      	ldr	r1, [pc, #92]	@ (80028b4 <Wifi_MqttSub2+0x78>)
 8002858:	a801      	add	r0, sp, #4
 800285a:	f009 ff8d 	bl	800c778 <siprintf>
  checkCmd = Wifi_SendCommand(cmd);
 800285e:	a801      	add	r0, sp, #4
 8002860:	f7ff f9fc 	bl	8001c5c <Wifi_SendCommand>

  if(checkCmd == HAL_OK)
 8002864:	b9d8      	cbnz	r0, 800289e <Wifi_MqttSub2+0x62>
 8002866:	4605      	mov	r5, r0
  {
    checkRcv = Wifi_Receive(buffer, 200, WIFI_FUNCS_STD_TIMEOUT, mode);
 8002868:	463b      	mov	r3, r7
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	21c8      	movs	r1, #200	@ 0xc8
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fa1d 	bl	8001cb0 <Wifi_Receive>

    if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8002876:	4606      	mov	r6, r0
 8002878:	b108      	cbz	r0, 800287e <Wifi_MqttSub2+0x42>
 800287a:	2803      	cmp	r0, #3
 800287c:	d113      	bne.n	80028a6 <Wifi_MqttSub2+0x6a>
    {
      checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <Wifi_MqttSub2+0x7c>)
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	4620      	mov	r0, r4
 8002884:	f7ff f98c 	bl	8001ba0 <Wifi_CheckResponse>

      if(checkResp == RESP_MSG_OK)
 8002888:	b178      	cbz	r0, 80028aa <Wifi_MqttSub2+0x6e>
        return FUNC_OK;
      else if(checkResp == RESP_MSG_ERROR || checkResp == RESP_MSG_CMD)
 800288a:	1e83      	subs	r3, r0, #2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d90d      	bls.n	80028ae <Wifi_MqttSub2+0x72>
        return FUNC_RX_ERROR;
      else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 8002892:	2805      	cmp	r0, #5
 8002894:	d104      	bne.n	80028a0 <Wifi_MqttSub2+0x64>
 8002896:	2e03      	cmp	r6, #3
 8002898:	d102      	bne.n	80028a0 <Wifi_MqttSub2+0x64>
        return FUNC_TIMEOUT;
 800289a:	4635      	mov	r5, r6
 800289c:	e000      	b.n	80028a0 <Wifi_MqttSub2+0x64>
    }
    else
      return (FUNC_StatusTypeDef)checkRcv;
  }
  else
    return FUNC_TX_ERROR;
 800289e:	2504      	movs	r5, #4

  return FUNC_OK;
}
 80028a0:	4628      	mov	r0, r5
 80028a2:	b01b      	add	sp, #108	@ 0x6c
 80028a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return (FUNC_StatusTypeDef)checkRcv;
 80028a6:	4605      	mov	r5, r0
 80028a8:	e7fa      	b.n	80028a0 <Wifi_MqttSub2+0x64>
        return FUNC_OK;
 80028aa:	4605      	mov	r5, r0
 80028ac:	e7f8      	b.n	80028a0 <Wifi_MqttSub2+0x64>
        return FUNC_RX_ERROR;
 80028ae:	2501      	movs	r5, #1
 80028b0:	e7f6      	b.n	80028a0 <Wifi_MqttSub2+0x64>
 80028b2:	bf00      	nop
 80028b4:	0800f124 	.word	0x0800f124
 80028b8:	200000c4 	.word	0x200000c4

080028bc <Wifi_SendCommand2>:

  return FUNC_OK;
}

HAL_StatusTypeDef Wifi_SendCommand2(const char* cmd)
{
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	4606      	mov	r6, r0
  HAL_StatusTypeDef checkStatus;
  uint32_t dataSize = strlen(cmd);
 80028c0:	f7fd fcae 	bl	8000220 <strlen>
 80028c4:	4604      	mov	r4, r0
  uint32_t timeout = 500; // Base timeout
  if (dataSize > 1000) {
 80028c6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80028ca:	d80d      	bhi.n	80028e8 <Wifi_SendCommand2+0x2c>
  uint32_t timeout = 500; // Base timeout
 80028cc:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
    timeout = (dataSize / 100) * 100 + 2000;
    printf("*** Large data send: %lu bytes, timeout: %lu ms ***\n", dataSize, timeout);
  }
  checkStatus = HAL_UART_Transmit(&UART_WIFI, (uint8_t*) cmd, dataSize, timeout);
 80028d0:	462b      	mov	r3, r5
 80028d2:	b2a2      	uxth	r2, r4
 80028d4:	4631      	mov	r1, r6
 80028d6:	480e      	ldr	r0, [pc, #56]	@ (8002910 <Wifi_SendCommand2+0x54>)
 80028d8:	f005 fe21 	bl	800851e <HAL_UART_Transmit>
 80028dc:	4605      	mov	r5, r0
  // Add delay after large transmissions
  if (dataSize > 1000) {
 80028de:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 80028e2:	d810      	bhi.n	8002906 <Wifi_SendCommand2+0x4a>
    HAL_Delay(200);
  }
  return checkStatus;
}
 80028e4:	4628      	mov	r0, r5
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
    timeout = (dataSize / 100) * 100 + 2000;
 80028e8:	4d0a      	ldr	r5, [pc, #40]	@ (8002914 <Wifi_SendCommand2+0x58>)
 80028ea:	fba5 3500 	umull	r3, r5, r5, r0
 80028ee:	096d      	lsrs	r5, r5, #5
 80028f0:	2364      	movs	r3, #100	@ 0x64
 80028f2:	fb03 f505 	mul.w	r5, r3, r5
 80028f6:	f505 65fa 	add.w	r5, r5, #2000	@ 0x7d0
    printf("*** Large data send: %lu bytes, timeout: %lu ms ***\n", dataSize, timeout);
 80028fa:	462a      	mov	r2, r5
 80028fc:	4601      	mov	r1, r0
 80028fe:	4806      	ldr	r0, [pc, #24]	@ (8002918 <Wifi_SendCommand2+0x5c>)
 8002900:	f009 fe8c 	bl	800c61c <iprintf>
 8002904:	e7e4      	b.n	80028d0 <Wifi_SendCommand2+0x14>
    HAL_Delay(200);
 8002906:	20c8      	movs	r0, #200	@ 0xc8
 8002908:	f000 fc08 	bl	800311c <HAL_Delay>
 800290c:	e7ea      	b.n	80028e4 <Wifi_SendCommand2+0x28>
 800290e:	bf00      	nop
 8002910:	2000111c 	.word	0x2000111c
 8002914:	51eb851f 	.word	0x51eb851f
 8002918:	0800f13c 	.word	0x0800f13c

0800291c <Wifi_MqttPubRaw2>:

FUNC_StatusTypeDef Wifi_MqttPubRaw2( char *buffer, char *topic, uint16_t dataSize, char *data,
								   MQTT_CC_QosTypeDef qos, MQTT_CC_RtnTypeDef retain, MQTT_DataRecvModeTypeDef mode){
 800291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002920:	b0bb      	sub	sp, #236	@ 0xec
 8002922:	4606      	mov	r6, r0
 8002924:	9102      	str	r1, [sp, #8]
 8002926:	9203      	str	r2, [sp, #12]
 8002928:	9304      	str	r3, [sp, #16]
 800292a:	f89d b110 	ldrb.w	fp, [sp, #272]	@ 0x110
 800292e:	f89d a114 	ldrb.w	sl, [sp, #276]	@ 0x114
 8002932:	f89d 8118 	ldrb.w	r8, [sp, #280]	@ 0x118
 8002936:	2500      	movs	r5, #0
	WIFI_RespMsgTypeDef checkResp;

	uint8_t atCommandTimeoutCounter = 0;
	uint8_t atCommandBusyCounter = 0;
	uint8_t rawDataBusyCounter = 0;
    uint8_t respSize = strlen(topic) + PUB_RESP_DATA_RMNG_CHAR_COUNT;
 8002938:	4608      	mov	r0, r1
 800293a:	f7fd fc71 	bl	8000220 <strlen>
 800293e:	b2c7      	uxtb	r7, r0
 8002940:	3724      	adds	r7, #36	@ 0x24
 8002942:	b2ff      	uxtb	r7, r7
	char cmd[200] = {0};
 8002944:	22c8      	movs	r2, #200	@ 0xc8
 8002946:	4629      	mov	r1, r5
 8002948:	a808      	add	r0, sp, #32
 800294a:	f00a f80f 	bl	800c96c <memset>
	HAL_UART_AbortReceive_IT(&UART_WIFI);
 800294e:	484c      	ldr	r0, [pc, #304]	@ (8002a80 <Wifi_MqttPubRaw2+0x164>)
 8002950:	f004 fedc 	bl	800770c <HAL_UART_AbortReceive_IT>
	uint8_t rawDataBusyCounter = 0;
 8002954:	9506      	str	r5, [sp, #24]
	uint8_t atCommandBusyCounter = 0;
 8002956:	9505      	str	r5, [sp, #20]
	uint8_t atCommandTimeoutCounter = 0;
 8002958:	9507      	str	r5, [sp, #28]
	MQTT_PubRawDataTypeDef PubRawDataCase = MQTT_PUB_RAW_AT_COMMAND_SEND;
 800295a:	462c      	mov	r4, r5

	while(PubRawDataCase != MQTT_PUB_RAW_END_CASE)
 800295c:	e00e      	b.n	800297c <Wifi_MqttPubRaw2+0x60>
		{
			switch(PubRawDataCase)
			{
			case MQTT_PUB_RAW_AT_COMMAND_SEND:

				sprintf(cmd, "AT+MQTTPUBRAW=0,\"%s\",%d,%d,%d\r\n", topic, dataSize , qos, retain);
 800295e:	f8cd a004 	str.w	sl, [sp, #4]
 8002962:	f8cd b000 	str.w	fp, [sp]
 8002966:	9b03      	ldr	r3, [sp, #12]
 8002968:	9a02      	ldr	r2, [sp, #8]
 800296a:	4946      	ldr	r1, [pc, #280]	@ (8002a84 <Wifi_MqttPubRaw2+0x168>)
 800296c:	a808      	add	r0, sp, #32
 800296e:	f009 ff03 	bl	800c778 <siprintf>
				checkCmd = Wifi_SendCommand2(cmd);
 8002972:	a808      	add	r0, sp, #32
 8002974:	f7ff ffa2 	bl	80028bc <Wifi_SendCommand2>
 8002978:	4605      	mov	r5, r0

				PubRawDataCase = MQTT_PUB_RAW_AT_COMMAND_RECEIVE;
 800297a:	2401      	movs	r4, #1
			switch(PubRawDataCase)
 800297c:	2c03      	cmp	r4, #3
 800297e:	d8fd      	bhi.n	800297c <Wifi_MqttPubRaw2+0x60>
 8002980:	a301      	add	r3, pc, #4	@ (adr r3, 8002988 <Wifi_MqttPubRaw2+0x6c>)
 8002982:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8002986:	bf00      	nop
 8002988:	0800295f 	.word	0x0800295f
 800298c:	08002999 	.word	0x08002999
 8002990:	080029f9 	.word	0x080029f9
 8002994:	08002a15 	.word	0x08002a15

				break;

			case MQTT_PUB_RAW_AT_COMMAND_RECEIVE:

				if(checkCmd == HAL_OK)
 8002998:	2d00      	cmp	r5, #0
 800299a:	d167      	bne.n	8002a6c <Wifi_MqttPubRaw2+0x150>
				{
					checkRcv = Wifi_Receive(buffer, respSize, 500, mode);
 800299c:	4643      	mov	r3, r8
 800299e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80029a2:	4639      	mov	r1, r7
 80029a4:	4630      	mov	r0, r6
 80029a6:	f7ff f983 	bl	8001cb0 <Wifi_Receive>

					if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 80029aa:	4681      	mov	r9, r0
 80029ac:	b108      	cbz	r0, 80029b2 <Wifi_MqttPubRaw2+0x96>
 80029ae:	2803      	cmp	r0, #3
 80029b0:	d1e4      	bne.n	800297c <Wifi_MqttPubRaw2+0x60>
					{
						checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 80029b2:	4b35      	ldr	r3, [pc, #212]	@ (8002a88 <Wifi_MqttPubRaw2+0x16c>)
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	4630      	mov	r0, r6
 80029b8:	f7ff f8f2 	bl	8001ba0 <Wifi_CheckResponse>

						if(checkResp == RESP_MSG_OK)
 80029bc:	2805      	cmp	r0, #5
 80029be:	d80f      	bhi.n	80029e0 <Wifi_MqttPubRaw2+0xc4>
 80029c0:	e8df f000 	tbb	[pc, r0]
 80029c4:	0e500350 	.word	0x0e500350
 80029c8:	0b0e      	.short	0x0b0e
							PubRawDataCase = MQTT_PUB_RAW_DATA_SEND;

						else if(checkResp == RESP_MSG_BUSY)
						{
							atCommandBusyCounter++;
 80029ca:	9b05      	ldr	r3, [sp, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	9305      	str	r3, [sp, #20]
							if(atCommandBusyCounter <= 3)
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d848      	bhi.n	8002a68 <Wifi_MqttPubRaw2+0x14c>
								PubRawDataCase = MQTT_PUB_RAW_AT_COMMAND_SEND;
 80029d6:	462c      	mov	r4, r5
 80029d8:	e7d0      	b.n	800297c <Wifi_MqttPubRaw2+0x60>

						else if(checkResp == RESP_MSG_ERROR /*|| checkResp == RESP_MSG_CMD*/)
							PubRawDataCase = MQTT_PUB_RAW_DATA_SEND;


						else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT)
 80029da:	f1b9 0f03 	cmp.w	r9, #3
 80029de:	d003      	beq.n	80029e8 <Wifi_MqttPubRaw2+0xcc>
								PubRawDataCase = MQTT_PUB_RAW_AT_COMMAND_RECEIVE;
							else
								PubRawDataCase = MQTT_PUB_RAW_DATA_SEND;
						}

            else if(checkResp == RESP_MSG_FAIL){
 80029e0:	2804      	cmp	r0, #4
 80029e2:	d1cb      	bne.n	800297c <Wifi_MqttPubRaw2+0x60>

              PubRawDataCase = MQTT_PUB_RAW_AT_COMMAND_SEND;
 80029e4:	462c      	mov	r4, r5
 80029e6:	e7c9      	b.n	800297c <Wifi_MqttPubRaw2+0x60>
							atCommandTimeoutCounter++;
 80029e8:	9b07      	ldr	r3, [sp, #28]
 80029ea:	3301      	adds	r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	9307      	str	r3, [sp, #28]
							if(atCommandTimeoutCounter <= 10)
 80029f0:	2b0a      	cmp	r3, #10
 80029f2:	d9c3      	bls.n	800297c <Wifi_MqttPubRaw2+0x60>
								PubRawDataCase = MQTT_PUB_RAW_DATA_SEND;
 80029f4:	2402      	movs	r4, #2
 80029f6:	e7c1      	b.n	800297c <Wifi_MqttPubRaw2+0x60>
				    return FUNC_TX_ERROR;

				break;

			case MQTT_PUB_RAW_DATA_SEND:
				Wifi_Receive(buffer, 300, 1000, mode);
 80029f8:	4643      	mov	r3, r8
 80029fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029fe:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002a02:	4630      	mov	r0, r6
 8002a04:	f7ff f954 	bl	8001cb0 <Wifi_Receive>
				checkCmd = Wifi_SendCommand2(data);
 8002a08:	9804      	ldr	r0, [sp, #16]
 8002a0a:	f7ff ff57 	bl	80028bc <Wifi_SendCommand2>
 8002a0e:	4605      	mov	r5, r0
				PubRawDataCase = MQTT_PUB_RAW_DATA_RECEIVE;
 8002a10:	2403      	movs	r4, #3

				break;
 8002a12:	e7b3      	b.n	800297c <Wifi_MqttPubRaw2+0x60>

			case MQTT_PUB_RAW_DATA_RECEIVE:

				if(checkCmd == HAL_OK)
 8002a14:	bb65      	cbnz	r5, 8002a70 <Wifi_MqttPubRaw2+0x154>
				{
					checkRcv = Wifi_Receive(buffer, 400, 1000, mode);
 8002a16:	4643      	mov	r3, r8
 8002a18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a1c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002a20:	4630      	mov	r0, r6
 8002a22:	f7ff f945 	bl	8001cb0 <Wifi_Receive>

					if(checkRcv == HAL_OK || checkRcv == HAL_TIMEOUT)
 8002a26:	4681      	mov	r9, r0
 8002a28:	b108      	cbz	r0, 8002a2e <Wifi_MqttPubRaw2+0x112>
 8002a2a:	2803      	cmp	r0, #3
 8002a2c:	d1a6      	bne.n	800297c <Wifi_MqttPubRaw2+0x60>
					{
						checkResp = Wifi_CheckResponse(buffer, RESP_PUB_RAW_OK);
 8002a2e:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <Wifi_MqttPubRaw2+0x170>)
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	4630      	mov	r0, r6
 8002a34:	f7ff f8b4 	bl	8001ba0 <Wifi_CheckResponse>

						if(checkResp == RESP_MSG_OK)
 8002a38:	2805      	cmp	r0, #5
 8002a3a:	d80f      	bhi.n	8002a5c <Wifi_MqttPubRaw2+0x140>
 8002a3c:	e8df f000 	tbb	[pc, r0]
 8002a40:	0e1a031b 	.word	0x0e1a031b
 8002a44:	0b0e      	.short	0x0b0e
							PubRawDataCase = MQTT_PUB_RAW_END_CASE;

						else if(checkResp == RESP_MSG_BUSY)
						{
							rawDataBusyCounter++;
 8002a46:	9b06      	ldr	r3, [sp, #24]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	9306      	str	r3, [sp, #24]
							if(rawDataBusyCounter <= 3){
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d994      	bls.n	800297c <Wifi_MqttPubRaw2+0x60>
								PubRawDataCase = MQTT_PUB_RAW_DATA_RECEIVE;
							}else{
								PubRawDataCase = MQTT_PUB_RAW_END_CASE;
								return FUNC_BUSY;
 8002a52:	2002      	movs	r0, #2
 8002a54:	e00f      	b.n	8002a76 <Wifi_MqttPubRaw2+0x15a>
							}
						}else if(checkResp == RESP_MSG_ERROR /*|| checkResp == RESP_MSG_CMD*/){
							PubRawDataCase = MQTT_PUB_RAW_END_CASE;
							return FUNC_RX_ERROR;

						}else if(checkResp == RESP_MSG_NONE && checkRcv == HAL_TIMEOUT){
 8002a56:	f1b9 0f03 	cmp.w	r9, #3
 8002a5a:	d00f      	beq.n	8002a7c <Wifi_MqttPubRaw2+0x160>
							PubRawDataCase = MQTT_PUB_RAW_END_CASE;
							return FUNC_TIMEOUT;

						}
            else if(checkResp == RESP_MSG_FAIL){
 8002a5c:	2804      	cmp	r0, #4
 8002a5e:	d18d      	bne.n	800297c <Wifi_MqttPubRaw2+0x60>
              PubRawDataCase = MQTT_PUB_RAW_DATA_RECEIVE;

              return FUNC_FAIL;
 8002a60:	2005      	movs	r0, #5
 8002a62:	e008      	b.n	8002a76 <Wifi_MqttPubRaw2+0x15a>
						checkResp = Wifi_CheckResponse(buffer, RESP_OK);
 8002a64:	2402      	movs	r4, #2
 8002a66:	e789      	b.n	800297c <Wifi_MqttPubRaw2+0x60>
								PubRawDataCase = MQTT_PUB_RAW_DATA_SEND;
 8002a68:	2402      	movs	r4, #2
 8002a6a:	e787      	b.n	800297c <Wifi_MqttPubRaw2+0x60>
				    return FUNC_TX_ERROR;
 8002a6c:	2004      	movs	r0, #4
 8002a6e:	e002      	b.n	8002a76 <Wifi_MqttPubRaw2+0x15a>
            }
					}
				}  else
				    return FUNC_TX_ERROR;
 8002a70:	2004      	movs	r0, #4
 8002a72:	e000      	b.n	8002a76 <Wifi_MqttPubRaw2+0x15a>
							return FUNC_RX_ERROR;
 8002a74:	2001      	movs	r0, #1

				break;
			}
		}
	return FUNC_OK;
}
 8002a76:	b03b      	add	sp, #236	@ 0xec
 8002a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							return FUNC_TIMEOUT;
 8002a7c:	4648      	mov	r0, r9
 8002a7e:	e7fa      	b.n	8002a76 <Wifi_MqttPubRaw2+0x15a>
 8002a80:	2000111c 	.word	0x2000111c
 8002a84:	0800f174 	.word	0x0800f174
 8002a88:	200000c4 	.word	0x200000c4
 8002a8c:	200000b0 	.word	0x200000b0

08002a90 <Wifi_MqttSubInit>:




FUNC_StatusTypeDef Wifi_MqttSubInit(char *buffer, const char *topic , uint8_t QoS)
{
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	4606      	mov	r6, r0
 8002a94:	460d      	mov	r5, r1
 8002a96:	4614      	mov	r4, r2
  MQTTSubInitCase = MQTT_SUB_INIT;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad8 <Wifi_MqttSubInit+0x48>)
 8002a9a:	2209      	movs	r2, #9
 8002a9c:	701a      	strb	r2, [r3, #0]
  while(MQTTSubInitCase != MQTT_SUB_INIT_STATE_END_CASE){
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <Wifi_MqttSubInit+0x48>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d011      	beq.n	8002aca <Wifi_MqttSubInit+0x3a>
    FUNC_StatusTypeDef checkFunc = FUNC_OK;

    switch(MQTTSubInitCase)
 8002aa6:	2b09      	cmp	r3, #9
 8002aa8:	d1f9      	bne.n	8002a9e <Wifi_MqttSubInit+0xe>
    {
    case MQTT_SUB_INIT:
      checkFunc = Wifi_MqttSub2(buffer, topic, QoS, POLLING_MODE);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4622      	mov	r2, r4
 8002aae:	4629      	mov	r1, r5
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f7ff fec3 	bl	800283c <Wifi_MqttSub2>

      if(checkFunc == FUNC_OK)
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b120      	cbz	r0, 8002ac4 <Wifi_MqttSubInit+0x34>
      {
        MQTTSubInitCase = MQTT_SUB_INIT_STATE_END_CASE;
        return FUNC_OK;
      }
      else if(checkFunc == FUNC_RX_ERROR)
 8002aba:	2801      	cmp	r0, #1
 8002abc:	d007      	beq.n	8002ace <Wifi_MqttSubInit+0x3e>
      {
        MQTTSubInitCase = MQTT_SUB_INIT;
        return FUNC_RX_ERROR;
      }
      else if(checkFunc == FUNC_TIMEOUT)
 8002abe:	2803      	cmp	r0, #3
 8002ac0:	d1ed      	bne.n	8002a9e <Wifi_MqttSubInit+0xe>
 8002ac2:	e002      	b.n	8002aca <Wifi_MqttSubInit+0x3a>
        MQTTSubInitCase = MQTT_SUB_INIT_STATE_END_CASE;
 8002ac4:	4a04      	ldr	r2, [pc, #16]	@ (8002ad8 <Wifi_MqttSubInit+0x48>)
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	7011      	strb	r1, [r2, #0]
      }

      break;
    }
  }
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	bd70      	pop	{r4, r5, r6, pc}
        MQTTSubInitCase = MQTT_SUB_INIT;
 8002ace:	4a02      	ldr	r2, [pc, #8]	@ (8002ad8 <Wifi_MqttSubInit+0x48>)
 8002ad0:	2109      	movs	r1, #9
 8002ad2:	7011      	strb	r1, [r2, #0]
        return FUNC_RX_ERROR;
 8002ad4:	e7f9      	b.n	8002aca <Wifi_MqttSubInit+0x3a>
 8002ad6:	bf00      	nop
 8002ad8:	200000c8 	.word	0x200000c8

08002adc <charToInt>:
    }
  }
}

void charToInt(uint8_t *charArray, uint8_t *intNum, uint8_t length)
{
 8002adc:	b500      	push	{lr}
 8002ade:	b083      	sub	sp, #12
  uint8_t tempCharArray[3] = {0};
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002ae6:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tempIntArray[3] = {0};
 8002aea:	f8ad 3000 	strh.w	r3, [sp]
 8002aee:	f88d 3002 	strb.w	r3, [sp, #2]

  for(uint8_t i = 0; i < length; i++)
 8002af2:	e001      	b.n	8002af8 <charToInt+0x1c>
 8002af4:	3301      	adds	r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d213      	bcs.n	8002b24 <charToInt+0x48>
  {
    tempCharArray[i] = charArray[i];
 8002afc:	f810 c003 	ldrb.w	ip, [r0, r3]
 8002b00:	f103 0e08 	add.w	lr, r3, #8
 8002b04:	44ee      	add	lr, sp
 8002b06:	f80e cc04 	strb.w	ip, [lr, #-4]

    if (tempCharArray[i] >= '0' && tempCharArray[i] <= '9') {
 8002b0a:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8002b0e:	fa5f fc8c 	uxtb.w	ip, ip
 8002b12:	f1bc 0f09 	cmp.w	ip, #9
 8002b16:	d8ed      	bhi.n	8002af4 <charToInt+0x18>
      tempIntArray[i] = tempCharArray[i] - '0';
 8002b18:	f103 0e08 	add.w	lr, r3, #8
 8002b1c:	44ee      	add	lr, sp
 8002b1e:	f80e cc08 	strb.w	ip, [lr, #-8]
 8002b22:	e7e7      	b.n	8002af4 <charToInt+0x18>
    }
  }

  switch(length)
 8002b24:	2a02      	cmp	r2, #2
 8002b26:	d009      	beq.n	8002b3c <charToInt+0x60>
 8002b28:	2a03      	cmp	r2, #3
 8002b2a:	d011      	beq.n	8002b50 <charToInt+0x74>
 8002b2c:	2a01      	cmp	r2, #1
 8002b2e:	d102      	bne.n	8002b36 <charToInt+0x5a>
  {
  case 1:
    intNum[0] = tempIntArray[0];
 8002b30:	f89d 3000 	ldrb.w	r3, [sp]
 8002b34:	700b      	strb	r3, [r1, #0]

  case 3:
    intNum[0] = 100 * tempIntArray[0] + 10 * tempIntArray[1] + tempIntArray[2];
    break;
  }
}
 8002b36:	b003      	add	sp, #12
 8002b38:	f85d fb04 	ldr.w	pc, [sp], #4
    intNum[0] = 10 * tempIntArray[0] + tempIntArray[1];
 8002b3c:	f89d 3000 	ldrb.w	r3, [sp]
 8002b40:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002b4c:	700b      	strb	r3, [r1, #0]
    break;
 8002b4e:	e7f2      	b.n	8002b36 <charToInt+0x5a>
    intNum[0] = 100 * tempIntArray[0] + 10 * tempIntArray[1] + tempIntArray[2];
 8002b50:	f89d 2000 	ldrb.w	r2, [sp]
 8002b54:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002b58:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b5c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002b70:	4413      	add	r3, r2
 8002b72:	700b      	strb	r3, [r1, #0]
}
 8002b74:	e7df      	b.n	8002b36 <charToInt+0x5a>
	...

08002b78 <UART_MqttSubRecvParser>:
{
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	4607      	mov	r7, r0
 8002b7c:	460e      	mov	r6, r1
 8002b7e:	4615      	mov	r5, r2
  for(uint16_t i = 0; i < dataBufferSize; i++)
 8002b80:	2400      	movs	r4, #0
 8002b82:	e004      	b.n	8002b8e <UART_MqttSubRecvParser+0x16>
      if(dataBuffer[i] == '+')
 8002b84:	5d33      	ldrb	r3, [r6, r4]
 8002b86:	2b2b      	cmp	r3, #43	@ 0x2b
 8002b88:	d01e      	beq.n	8002bc8 <UART_MqttSubRecvParser+0x50>
  for(uint16_t i = 0; i < dataBufferSize; i++)
 8002b8a:	3401      	adds	r4, #1
 8002b8c:	b2a4      	uxth	r4, r4
 8002b8e:	42ac      	cmp	r4, r5
 8002b90:	f080 8095 	bcs.w	8002cbe <UART_MqttSubRecvParser+0x146>
    switch(subRecvParserState)
 8002b94:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	f200 808c 	bhi.w	8002cb6 <UART_MqttSubRecvParser+0x13e>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <UART_MqttSubRecvParser+0x2c>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002b85 	.word	0x08002b85
 8002ba8:	08002bd9 	.word	0x08002bd9
 8002bac:	08002bf7 	.word	0x08002bf7
 8002bb0:	08002c17 	.word	0x08002c17
 8002bb4:	08002c25 	.word	0x08002c25
 8002bb8:	08002c45 	.word	0x08002c45
 8002bbc:	08002c53 	.word	0x08002c53
 8002bc0:	08002c81 	.word	0x08002c81
 8002bc4:	08002c9f 	.word	0x08002c9f
        memset(dataLength, 0, 3);
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc4 <UART_MqttSubRecvParser+0x14c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	801a      	strh	r2, [r3, #0]
 8002bce:	709a      	strb	r2, [r3, #2]
        subRecvParserState = MQTT_CB_SYNC_START2;
 8002bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e7d8      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
      if(dataBuffer[i] == 'M')
 8002bd8:	5d33      	ldrb	r3, [r6, r4]
 8002bda:	2b4d      	cmp	r3, #77	@ 0x4d
 8002bdc:	d005      	beq.n	8002bea <UART_MqttSubRecvParser+0x72>
        rcvDataSize = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	4a39      	ldr	r2, [pc, #228]	@ (8002cc8 <UART_MqttSubRecvParser+0x150>)
 8002be2:	7013      	strb	r3, [r2, #0]
        subRecvParserState = MQTT_CB_SYNC_START1;
 8002be4:	4a36      	ldr	r2, [pc, #216]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002be6:	7013      	strb	r3, [r2, #0]
 8002be8:	e7cf      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
    	index_databuffer = i;
 8002bea:	4b38      	ldr	r3, [pc, #224]	@ (8002ccc <UART_MqttSubRecvParser+0x154>)
 8002bec:	701c      	strb	r4, [r3, #0]
        subRecvParserState = MQTT_CB_SYNC_START3;
 8002bee:	4b34      	ldr	r3, [pc, #208]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e7c9      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
      if(dataBuffer[index_databuffer + 4] == 'S')
 8002bf6:	4b35      	ldr	r3, [pc, #212]	@ (8002ccc <UART_MqttSubRecvParser+0x154>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	4433      	add	r3, r6
 8002bfc:	791b      	ldrb	r3, [r3, #4]
 8002bfe:	2b53      	cmp	r3, #83	@ 0x53
 8002c00:	d005      	beq.n	8002c0e <UART_MqttSubRecvParser+0x96>
        rcvDataSize = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	4a30      	ldr	r2, [pc, #192]	@ (8002cc8 <UART_MqttSubRecvParser+0x150>)
 8002c06:	7013      	strb	r3, [r2, #0]
        subRecvParserState = MQTT_CB_SYNC_START1;
 8002c08:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002c0a:	7013      	strb	r3, [r2, #0]
 8002c0c:	e7bd      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
        subRecvParserState = MQTT_CB_TOPIC_CAPTURE_START;
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002c10:	2203      	movs	r2, #3
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e7b9      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
      if(dataBuffer[i] == '"')
 8002c16:	5d33      	ldrb	r3, [r6, r4]
 8002c18:	2b22      	cmp	r3, #34	@ 0x22
 8002c1a:	d1b6      	bne.n	8002b8a <UART_MqttSubRecvParser+0x12>
        subRecvParserState = MQTT_CB_TOPIC_CAPTURE;
 8002c1c:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002c1e:	2204      	movs	r2, #4
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	e7b2      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
      if(dataBuffer[i] == '"')
 8002c24:	5d33      	ldrb	r3, [r6, r4]
 8002c26:	2b22      	cmp	r3, #34	@ 0x22
 8002c28:	d005      	beq.n	8002c36 <UART_MqttSubRecvParser+0xbe>
        messageData->topic_id[rcvDataSize++] = dataBuffer[i];
 8002c2a:	4927      	ldr	r1, [pc, #156]	@ (8002cc8 <UART_MqttSubRecvParser+0x150>)
 8002c2c:	780a      	ldrb	r2, [r1, #0]
 8002c2e:	1c50      	adds	r0, r2, #1
 8002c30:	7008      	strb	r0, [r1, #0]
 8002c32:	54bb      	strb	r3, [r7, r2]
 8002c34:	e7a9      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
        rcvDataSize = 0;
 8002c36:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <UART_MqttSubRecvParser+0x150>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
        subRecvParserState = MQTT_CB_DATASIZE_CAPTURE_START;
 8002c3c:	4b20      	ldr	r3, [pc, #128]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002c3e:	2205      	movs	r2, #5
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e7a2      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
      if(dataBuffer[i] == ',')
 8002c44:	5d33      	ldrb	r3, [r6, r4]
 8002c46:	2b2c      	cmp	r3, #44	@ 0x2c
 8002c48:	d19f      	bne.n	8002b8a <UART_MqttSubRecvParser+0x12>
        subRecvParserState = MQTT_CB_DATASIZE_CAPTURE;
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002c4c:	2206      	movs	r2, #6
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e79b      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
      if(dataBuffer[i] == ',')
 8002c52:	5d33      	ldrb	r3, [r6, r4]
 8002c54:	2b2c      	cmp	r3, #44	@ 0x2c
 8002c56:	d006      	beq.n	8002c66 <UART_MqttSubRecvParser+0xee>
        dataLength[rcvDataSize++] = dataBuffer[i];
 8002c58:	491b      	ldr	r1, [pc, #108]	@ (8002cc8 <UART_MqttSubRecvParser+0x150>)
 8002c5a:	780a      	ldrb	r2, [r1, #0]
 8002c5c:	1c50      	adds	r0, r2, #1
 8002c5e:	7008      	strb	r0, [r1, #0]
 8002c60:	4918      	ldr	r1, [pc, #96]	@ (8002cc4 <UART_MqttSubRecvParser+0x14c>)
 8002c62:	548b      	strb	r3, [r1, r2]
 8002c64:	e791      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
        rcvDataSize = 0;
 8002c66:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <UART_MqttSubRecvParser+0x150>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
        charToInt((uint8_t*)dataLength, &messageData->data_length, 3);
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8002c72:	4814      	ldr	r0, [pc, #80]	@ (8002cc4 <UART_MqttSubRecvParser+0x14c>)
 8002c74:	f7ff ff32 	bl	8002adc <charToInt>
        subRecvParserState = MQTT_CB_DATA_CAPTURE;
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e784      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
      if(dataBuffer[i] == '\r')
 8002c80:	5d32      	ldrb	r2, [r6, r4]
 8002c82:	2a0d      	cmp	r2, #13
 8002c84:	d007      	beq.n	8002c96 <UART_MqttSubRecvParser+0x11e>
        messageData->data[rcvDataSize++] = dataBuffer[i];
 8002c86:	4910      	ldr	r1, [pc, #64]	@ (8002cc8 <UART_MqttSubRecvParser+0x150>)
 8002c88:	780b      	ldrb	r3, [r1, #0]
 8002c8a:	1c58      	adds	r0, r3, #1
 8002c8c:	7008      	strb	r0, [r1, #0]
 8002c8e:	443b      	add	r3, r7
 8002c90:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8002c94:	e779      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
        subRecvParserState = MQTT_CB_SYNC_STOP;
 8002c96:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002c98:	2208      	movs	r2, #8
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e775      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
      if(dataBuffer[i] == '\n')
 8002c9e:	5d33      	ldrb	r3, [r6, r4]
 8002ca0:	2b0a      	cmp	r3, #10
 8002ca2:	f47f af72 	bne.w	8002b8a <UART_MqttSubRecvParser+0x12>
      	index_databuffer = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	4a08      	ldr	r2, [pc, #32]	@ (8002ccc <UART_MqttSubRecvParser+0x154>)
 8002caa:	7013      	strb	r3, [r2, #0]
        rcvDataSize = 0;
 8002cac:	4a06      	ldr	r2, [pc, #24]	@ (8002cc8 <UART_MqttSubRecvParser+0x150>)
 8002cae:	7013      	strb	r3, [r2, #0]
        subRecvParserState = MQTT_CB_SYNC_START1;
 8002cb0:	4a03      	ldr	r2, [pc, #12]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002cb2:	7013      	strb	r3, [r2, #0]
 8002cb4:	e769      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
      subRecvParserState = MQTT_CB_SYNC_START1;
 8002cb6:	4b02      	ldr	r3, [pc, #8]	@ (8002cc0 <UART_MqttSubRecvParser+0x148>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
      break;
 8002cbc:	e765      	b.n	8002b8a <UART_MqttSubRecvParser+0x12>
}
 8002cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cc0:	20000d1f 	.word	0x20000d1f
 8002cc4:	20000d1c 	.word	0x20000d1c
 8002cc8:	20000d19 	.word	0x20000d19
 8002ccc:	20000d23 	.word	0x20000d23

08002cd0 <UART_MqttPacketParser>:
{
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	4605      	mov	r5, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	4616      	mov	r6, r2
  if(strstr(dataPacket, MQTT_SUBRECV) != NULL)
 8002cd8:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <UART_MqttPacketParser+0x50>)
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f009 fe83 	bl	800c9e8 <strstr>
 8002ce2:	b128      	cbz	r0, 8002cf0 <UART_MqttPacketParser+0x20>
    UART_MqttSubRecvParser(messageData, dataPacket, dataSize);
 8002ce4:	4632      	mov	r2, r6
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7ff ff45 	bl	8002b78 <UART_MqttSubRecvParser>
}
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
  else if(strstr(dataPacket, MQTTCONNECTED) != NULL)
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <UART_MqttPacketParser+0x54>)
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f009 fe77 	bl	800c9e8 <strstr>
 8002cfa:	b130      	cbz	r0, 8002d0a <UART_MqttPacketParser+0x3a>
    flag_mqtt_connect = SET;
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <UART_MqttPacketParser+0x58>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
    flag_mqtt_error = RESET;
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <UART_MqttPacketParser+0x5c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e7f1      	b.n	8002cee <UART_MqttPacketParser+0x1e>
  else if(strstr(dataPacket, MQTTDISCONNECTED) != NULL)
 8002d0a:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <UART_MqttPacketParser+0x60>)
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f009 fe6a 	bl	800c9e8 <strstr>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d0ea      	beq.n	8002cee <UART_MqttPacketParser+0x1e>
	  flag_mqtt_connect = RESET;
 8002d18:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <UART_MqttPacketParser+0x58>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
}
 8002d1e:	e7e6      	b.n	8002cee <UART_MqttPacketParser+0x1e>
 8002d20:	200000b8 	.word	0x200000b8
 8002d24:	200000a8 	.word	0x200000a8
 8002d28:	20000d21 	.word	0x20000d21
 8002d2c:	20000d26 	.word	0x20000d26
 8002d30:	200000ac 	.word	0x200000ac

08002d34 <Wifi_WaitMqttData>:
}



void Wifi_WaitMqttData()
{
 8002d34:	b508      	push	{r3, lr}
    // BREAKPOINT 13: Wifi_WaitMqttData fonksiyonu çağrıldı - bu satıra breakpoint koy

    // UART interrupt'ı enable et
    if (!__HAL_UART_GET_IT_SOURCE(&UART_WIFI, UART_IT_RXNE)) {
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <Wifi_WaitMqttData+0x5c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f012 0f20 	tst.w	r2, #32
 8002d40:	d103      	bne.n	8002d4a <Wifi_WaitMqttData+0x16>
        __HAL_UART_ENABLE_IT(&UART_WIFI, UART_IT_RXNE);
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f042 0220 	orr.w	r2, r2, #32
 8002d48:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8002d4a:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <Wifi_WaitMqttData+0x60>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
    }

    // NVIC interrupt'ı enable et
    if (!NVIC_GetEnableIRQ(LPUART1_IRQn)) {
 8002d4e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002d52:	d102      	bne.n	8002d5a <Wifi_WaitMqttData+0x26>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d54:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <Wifi_WaitMqttData+0x60>)
 8002d56:	2240      	movs	r2, #64	@ 0x40
 8002d58:	605a      	str	r2, [r3, #4]
        NVIC_EnableIRQ(LPUART1_IRQn);
    }

    // UART RX busy kontrolü
    HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(&UART_WIFI);
 8002d5a:	480d      	ldr	r0, [pc, #52]	@ (8002d90 <Wifi_WaitMqttData+0x5c>)
 8002d5c:	f005 f99e 	bl	800809c <HAL_UART_GetState>
    if (uart_state == HAL_UART_STATE_BUSY_RX || uart_state == HAL_UART_STATE_BUSY_TX_RX) {
 8002d60:	3822      	subs	r0, #34	@ 0x22
 8002d62:	2801      	cmp	r0, #1
 8002d64:	d90c      	bls.n	8002d80 <Wifi_WaitMqttData+0x4c>
        HAL_UART_AbortReceive_IT(&UART_WIFI);
    }

    // flag_mqtt_rx_done'u temizle - yeni mesaj için hazırlık
    extern volatile FlagStatus flag_mqtt_rx_done;
    flag_mqtt_rx_done = RESET;
 8002d66:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <Wifi_WaitMqttData+0x64>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]

    // BREAKPOINT 14: HAL_UART_Receive_IT çağrılacak - bu satıra breakpoint koy

    HAL_StatusTypeDef uart_status = HAL_UART_Receive_IT(&UART_WIFI , (uint8_t*)mqttDataBuffer, 1);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	490b      	ldr	r1, [pc, #44]	@ (8002d9c <Wifi_WaitMqttData+0x68>)
 8002d70:	4807      	ldr	r0, [pc, #28]	@ (8002d90 <Wifi_WaitMqttData+0x5c>)
 8002d72:	f005 fdcb 	bl	800890c <HAL_UART_Receive_IT>

    if (uart_status != HAL_OK) {
 8002d76:	b138      	cbz	r0, 8002d88 <Wifi_WaitMqttData+0x54>
    	printf("BREAKPOINT 15: HAL_UART_Receive_IT başarısız");
 8002d78:	4809      	ldr	r0, [pc, #36]	@ (8002da0 <Wifi_WaitMqttData+0x6c>)
 8002d7a:	f009 fc4f 	bl	800c61c <iprintf>
    } else {
    	printf("BREAKPOINT 16: HAL_UART_Receive_IT başarılı");

    }
}
 8002d7e:	bd08      	pop	{r3, pc}
        HAL_UART_AbortReceive_IT(&UART_WIFI);
 8002d80:	4803      	ldr	r0, [pc, #12]	@ (8002d90 <Wifi_WaitMqttData+0x5c>)
 8002d82:	f004 fcc3 	bl	800770c <HAL_UART_AbortReceive_IT>
 8002d86:	e7ee      	b.n	8002d66 <Wifi_WaitMqttData+0x32>
    	printf("BREAKPOINT 16: HAL_UART_Receive_IT başarılı");
 8002d88:	4806      	ldr	r0, [pc, #24]	@ (8002da4 <Wifi_WaitMqttData+0x70>)
 8002d8a:	f009 fc47 	bl	800c61c <iprintf>
}
 8002d8e:	e7f6      	b.n	8002d7e <Wifi_WaitMqttData+0x4a>
 8002d90:	2000111c 	.word	0x2000111c
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	20000d22 	.word	0x20000d22
 8002d9c:	20000d10 	.word	0x20000d10
 8002da0:	0800f194 	.word	0x0800f194
 8002da4:	0800f1c4 	.word	0x0800f1c4

08002da8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002da8:	b500      	push	{lr}
 8002daa:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8002dac:	222c      	movs	r2, #44	@ 0x2c
 8002dae:	2100      	movs	r1, #0
 8002db0:	a801      	add	r0, sp, #4
 8002db2:	f009 fddb 	bl	800c96c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002db6:	4819      	ldr	r0, [pc, #100]	@ (8002e1c <MX_RTC_Init+0x74>)
 8002db8:	4b19      	ldr	r3, [pc, #100]	@ (8002e20 <MX_RTC_Init+0x78>)
 8002dba:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002dbc:	231f      	movs	r3, #31
 8002dbe:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002dc4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dc6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002dcc:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002dce:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002dd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dd4:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dd6:	f003 fcb7 	bl	8006748 <HAL_RTC_Init>
 8002dda:	b9a8      	cbnz	r0, 8002e08 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002ddc:	480f      	ldr	r0, [pc, #60]	@ (8002e1c <MX_RTC_Init+0x74>)
 8002dde:	f003 fdf7 	bl	80069d0 <HAL_RTCEx_SetSSRU_IT>
 8002de2:	b9a0      	cbnz	r0, 8002e0e <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002de4:	2200      	movs	r2, #0
 8002de6:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002de8:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002dea:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002dec:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002df0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002df2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002df6:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002df8:	a901      	add	r1, sp, #4
 8002dfa:	4808      	ldr	r0, [pc, #32]	@ (8002e1c <MX_RTC_Init+0x74>)
 8002dfc:	f003 fd0c 	bl	8006818 <HAL_RTC_SetAlarm_IT>
 8002e00:	b940      	cbnz	r0, 8002e14 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e02:	b00d      	add	sp, #52	@ 0x34
 8002e04:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002e08:	f7fe fe05 	bl	8001a16 <Error_Handler>
 8002e0c:	e7e6      	b.n	8002ddc <MX_RTC_Init+0x34>
    Error_Handler();
 8002e0e:	f7fe fe02 	bl	8001a16 <Error_Handler>
 8002e12:	e7e7      	b.n	8002de4 <MX_RTC_Init+0x3c>
    Error_Handler();
 8002e14:	f7fe fdff 	bl	8001a16 <Error_Handler>
}
 8002e18:	e7f3      	b.n	8002e02 <MX_RTC_Init+0x5a>
 8002e1a:	bf00      	nop
 8002e1c:	20000d68 	.word	0x20000d68
 8002e20:	40002800 	.word	0x40002800

08002e24 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002e24:	b510      	push	{r4, lr}
 8002e26:	b090      	sub	sp, #64	@ 0x40
 8002e28:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e2a:	2238      	movs	r2, #56	@ 0x38
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	a802      	add	r0, sp, #8
 8002e30:	f009 fd9c 	bl	800c96c <memset>
  if(rtcHandle->Instance==RTC)
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <HAL_RTC_MspInit+0x7c>)
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002e3c:	b010      	add	sp, #64	@ 0x40
 8002e3e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e44:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e4a:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e4c:	a802      	add	r0, sp, #8
 8002e4e:	f003 fa95 	bl	800637c <HAL_RCCEx_PeriphCLKConfig>
 8002e52:	bb08      	cbnz	r0, 8002e98 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e58:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002e5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e6a:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e72:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002e74:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	4611      	mov	r1, r2
 8002e7a:	2002      	movs	r0, #2
 8002e7c:	f002 f854 	bl	8004f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002e80:	2002      	movs	r0, #2
 8002e82:	f002 f861 	bl	8004f48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	4611      	mov	r1, r2
 8002e8a:	202a      	movs	r0, #42	@ 0x2a
 8002e8c:	f002 f84c 	bl	8004f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002e90:	202a      	movs	r0, #42	@ 0x2a
 8002e92:	f002 f859 	bl	8004f48 <HAL_NVIC_EnableIRQ>
}
 8002e96:	e7d1      	b.n	8002e3c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8002e98:	f7fe fdbd 	bl	8001a16 <Error_Handler>
 8002e9c:	e7da      	b.n	8002e54 <HAL_RTC_MspInit+0x30>
 8002e9e:	bf00      	nop
 8002ea0:	40002800 	.word	0x40002800

08002ea4 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002ea4:	4770      	bx	lr

08002ea6 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002ea6:	4770      	bx	lr

08002ea8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002ea8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002eaa:	f001 ffb1 	bl	8004e10 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002eae:	2001      	movs	r0, #1
 8002eb0:	4b02      	ldr	r3, [pc, #8]	@ (8002ebc <PWR_EnterStopMode+0x14>)
 8002eb2:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002eb6:	f002 fc95 	bl	80057e4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002eba:	bd08      	pop	{r3, pc}
 8002ebc:	58000400 	.word	0x58000400

08002ec0 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8002ec0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002ec2:	f001 ffac 	bl	8004e1e <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002ec6:	bd08      	pop	{r3, pc}

08002ec8 <PWR_ExitStopMode>:
{
 8002ec8:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8002eca:	f001 ffa8 	bl	8004e1e <HAL_ResumeTick>
  vcom_Resume();
 8002ece:	f000 fced 	bl	80038ac <vcom_Resume>
}
 8002ed2:	bd08      	pop	{r3, pc}

08002ed4 <PWR_EnterSleepMode>:
{
 8002ed4:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8002ed6:	f001 ff9b 	bl	8004e10 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002eda:	2101      	movs	r1, #1
 8002edc:	2000      	movs	r0, #0
 8002ede:	f002 fc25 	bl	800572c <HAL_PWR_EnterSLEEPMode>
}
 8002ee2:	bd08      	pop	{r3, pc}

08002ee4 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee4:	4770      	bx	lr

08002ee6 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <NMI_Handler>

08002ee8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <HardFault_Handler>

08002eea <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eea:	e7fe      	b.n	8002eea <MemManage_Handler>

08002eec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <BusFault_Handler>

08002eee <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <UsageFault_Handler>

08002ef0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ef0:	4770      	bx	lr

08002ef2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef2:	4770      	bx	lr

08002ef4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef4:	4770      	bx	lr

08002ef6 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef6:	4770      	bx	lr

08002ef8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002efa:	4802      	ldr	r0, [pc, #8]	@ (8002f04 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8002efc:	f003 fd94 	bl	8006a28 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002f00:	bd08      	pop	{r3, pc}
 8002f02:	bf00      	nop
 8002f04:	20000d68 	.word	0x20000d68

08002f08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f0a:	4802      	ldr	r0, [pc, #8]	@ (8002f14 <DMA1_Channel1_IRQHandler+0xc>)
 8002f0c:	f002 fa20 	bl	8005350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f10:	bd08      	pop	{r3, pc}
 8002f12:	bf00      	nop
 8002f14:	20001028 	.word	0x20001028

08002f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f1a:	4802      	ldr	r0, [pc, #8]	@ (8002f24 <USART2_IRQHandler+0xc>)
 8002f1c:	f004 fc78 	bl	8007810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f20:	bd08      	pop	{r3, pc}
 8002f22:	bf00      	nop
 8002f24:	20001088 	.word	0x20001088

08002f28 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002f28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */
  dbg_irq_count++;
 8002f2a:	4a09      	ldr	r2, [pc, #36]	@ (8002f50 <LPUART1_IRQHandler+0x28>)
 8002f2c:	6813      	ldr	r3, [r2, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	6013      	str	r3, [r2, #0]
  uint32_t isr = hlpuart1.Instance->ISR;
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <LPUART1_IRQHandler+0x2c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
  if(isr & USART_ISR_RXNE_RXFNE) {
 8002f38:	f012 0f20 	tst.w	r2, #32
 8002f3c:	d103      	bne.n	8002f46 <LPUART1_IRQHandler+0x1e>
    uint8_t b = (uint8_t)(hlpuart1.Instance->RDR & 0xFF);
    extern void MQTT_LineAssembler_Byte(uint8_t ch);
    MQTT_LineAssembler_Byte(b);
  }
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002f3e:	4805      	ldr	r0, [pc, #20]	@ (8002f54 <LPUART1_IRQHandler+0x2c>)
 8002f40:	f004 fc66 	bl	8007810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */
  // Tüm byte işleme ve flag set işlemleri HAL_UART_RxCpltCallback içinde (common.c)
  // Eski ring buffer & doğrudan RDR okuma devre dışı bırakıldı.
  /* USER CODE END LPUART1_IRQn 1 */
}
 8002f44:	bd08      	pop	{r3, pc}
    uint8_t b = (uint8_t)(hlpuart1.Instance->RDR & 0xFF);
 8002f46:	6a58      	ldr	r0, [r3, #36]	@ 0x24
    MQTT_LineAssembler_Byte(b);
 8002f48:	b2c0      	uxtb	r0, r0
 8002f4a:	f7fe fbaf 	bl	80016ac <MQTT_LineAssembler_Byte>
 8002f4e:	e7f6      	b.n	8002f3e <LPUART1_IRQHandler+0x16>
 8002f50:	20000fbc 	.word	0x20000fbc
 8002f54:	2000111c 	.word	0x2000111c

08002f58 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002f58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002f5a:	4802      	ldr	r0, [pc, #8]	@ (8002f64 <RTC_Alarm_IRQHandler+0xc>)
 8002f5c:	f003 fb6e 	bl	800663c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002f60:	bd08      	pop	{r3, pc}
 8002f62:	bf00      	nop
 8002f64:	20000d68 	.word	0x20000d68

08002f68 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002f68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002f6a:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <SUBGHZ_Radio_IRQHandler+0xc>)
 8002f6c:	f004 f814 	bl	8006f98 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002f70:	bd08      	pop	{r3, pc}
 8002f72:	bf00      	nop
 8002f74:	20000fc0 	.word	0x20000fc0

08002f78 <MQTT_GetAvailableBytes>:

/* USER CODE BEGIN 1 */

// MQTT Ring Buffer Functions - Access to global ring buffer
uint16_t MQTT_GetAvailableBytes(void) {
    return mqtt_rx_count;
 8002f78:	4b01      	ldr	r3, [pc, #4]	@ (8002f80 <MQTT_GetAvailableBytes+0x8>)
 8002f7a:	8818      	ldrh	r0, [r3, #0]
}
 8002f7c:	b280      	uxth	r0, r0
 8002f7e:	4770      	bx	lr
 8002f80:	20000da0 	.word	0x20000da0

08002f84 <MQTT_ReadByte>:

uint8_t MQTT_ReadByte(void) {
    if (mqtt_rx_count > 0) {
 8002f84:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc4 <MQTT_ReadByte+0x40>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	b90b      	cbnz	r3, 8002f90 <MQTT_ReadByte+0xc>
        uint8_t byte = mqtt_rx_ring_buffer[mqtt_rx_tail];
        mqtt_rx_tail = (mqtt_rx_tail + 1) % MQTT_RX_BUFFER_SIZE;
        mqtt_rx_count--;
        return byte;
    }
    return 0;
 8002f8c:	2000      	movs	r0, #0
}
 8002f8e:	4770      	bx	lr
        uint8_t byte = mqtt_rx_ring_buffer[mqtt_rx_tail];
 8002f90:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc8 <MQTT_ReadByte+0x44>)
 8002f92:	8813      	ldrh	r3, [r2, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	490d      	ldr	r1, [pc, #52]	@ (8002fcc <MQTT_ReadByte+0x48>)
 8002f98:	5cc8      	ldrb	r0, [r1, r3]
 8002f9a:	b2c0      	uxtb	r0, r0
        mqtt_rx_tail = (mqtt_rx_tail + 1) % MQTT_RX_BUFFER_SIZE;
 8002f9c:	8813      	ldrh	r3, [r2, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	4259      	negs	r1, r3
 8002fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002fac:	bf58      	it	pl
 8002fae:	424b      	negpl	r3, r1
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	8013      	strh	r3, [r2, #0]
        mqtt_rx_count--;
 8002fb4:	4a03      	ldr	r2, [pc, #12]	@ (8002fc4 <MQTT_ReadByte+0x40>)
 8002fb6:	8813      	ldrh	r3, [r2, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	8013      	strh	r3, [r2, #0]
        return byte;
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000da0 	.word	0x20000da0
 8002fc8:	20000da2 	.word	0x20000da2
 8002fcc:	20000da4 	.word	0x20000da4

08002fd0 <MQTT_ReadString>:

uint16_t MQTT_ReadString(char* buffer, uint16_t max_len) {
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4605      	mov	r5, r0
 8002fd4:	460e      	mov	r6, r1
    uint16_t i = 0;
 8002fd6:	2400      	movs	r4, #0
    while (i < (max_len - 1) && MQTT_GetAvailableBytes() > 0) {
 8002fd8:	e004      	b.n	8002fe4 <MQTT_ReadString+0x14>
        buffer[i] = MQTT_ReadByte();
 8002fda:	f7ff ffd3 	bl	8002f84 <MQTT_ReadByte>
 8002fde:	5528      	strb	r0, [r5, r4]
        i++;
 8002fe0:	3401      	adds	r4, #1
 8002fe2:	b2a4      	uxth	r4, r4
    while (i < (max_len - 1) && MQTT_GetAvailableBytes() > 0) {
 8002fe4:	1e73      	subs	r3, r6, #1
 8002fe6:	429c      	cmp	r4, r3
 8002fe8:	da03      	bge.n	8002ff2 <MQTT_ReadString+0x22>
 8002fea:	f7ff ffc5 	bl	8002f78 <MQTT_GetAvailableBytes>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d1f3      	bne.n	8002fda <MQTT_ReadString+0xa>
    }
    buffer[i] = '\0';
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	552b      	strb	r3, [r5, r4]
    return i;
}
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ffc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002ffc:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002ffe:	4805      	ldr	r0, [pc, #20]	@ (8003014 <MX_SUBGHZ_Init+0x18>)
 8003000:	2308      	movs	r3, #8
 8003002:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8003004:	f003 fd46 	bl	8006a94 <HAL_SUBGHZ_Init>
 8003008:	b900      	cbnz	r0, 800300c <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800300a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800300c:	f7fe fd03 	bl	8001a16 <Error_Handler>
}
 8003010:	e7fb      	b.n	800300a <MX_SUBGHZ_Init+0xe>
 8003012:	bf00      	nop
 8003014:	20000fc0 	.word	0x20000fc0

08003018 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8003018:	b500      	push	{lr}
 800301a:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003020:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8003028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003030:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	4611      	mov	r1, r2
 8003036:	2032      	movs	r0, #50	@ 0x32
 8003038:	f001 ff76 	bl	8004f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800303c:	2032      	movs	r0, #50	@ 0x32
 800303e:	f001 ff83 	bl	8004f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8003042:	b003      	add	sp, #12
 8003044:	f85d fb04 	ldr.w	pc, [sp], #4

08003048 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8003048:	b40c      	push	{r2, r3}
 800304a:	b500      	push	{lr}
 800304c:	b083      	sub	sp, #12
 800304e:	ab04      	add	r3, sp, #16
 8003050:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8003054:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003056:	f008 fc7d 	bl	800b954 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800305a:	b003      	add	sp, #12
 800305c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003060:	b002      	add	sp, #8
 8003062:	4770      	bx	lr

08003064 <TimestampNow>:
{
 8003064:	b530      	push	{r4, r5, lr}
 8003066:	b085      	sub	sp, #20
 8003068:	4604      	mov	r4, r0
 800306a:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 800306c:	a802      	add	r0, sp, #8
 800306e:	f008 fa47 	bl	800b500 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8003072:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	9b02      	ldr	r3, [sp, #8]
 800307a:	4a05      	ldr	r2, [pc, #20]	@ (8003090 <TimestampNow+0x2c>)
 800307c:	2110      	movs	r1, #16
 800307e:	4620      	mov	r0, r4
 8003080:	f7ff ffe2 	bl	8003048 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8003084:	4620      	mov	r0, r4
 8003086:	f7fd f8cb 	bl	8000220 <strlen>
 800308a:	8028      	strh	r0, [r5, #0]
}
 800308c:	b005      	add	sp, #20
 800308e:	bd30      	pop	{r4, r5, pc}
 8003090:	0800f33c 	.word	0x0800f33c

08003094 <SystemApp_Init>:
{
 8003094:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8003096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800309a:	6893      	ldr	r3, [r2, #8]
 800309c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80030a0:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 80030a2:	f008 fa4f 	bl	800b544 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80030a6:	2401      	movs	r4, #1
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <SystemApp_Init+0x44>)
 80030aa:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 80030ac:	f000 f840 	bl	8003130 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 80030b0:	f007 ff8e 	bl	800afd0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80030b4:	4809      	ldr	r0, [pc, #36]	@ (80030dc <SystemApp_Init+0x48>)
 80030b6:	f007 ffa5 	bl	800b004 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80030ba:	2002      	movs	r0, #2
 80030bc:	f007 ffa8 	bl	800b010 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 80030c0:	f008 f8b6 	bl	800b230 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80030c4:	4621      	mov	r1, r4
 80030c6:	4620      	mov	r0, r4
 80030c8:	f008 f8d2 	bl	800b270 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80030cc:	4621      	mov	r1, r4
 80030ce:	4620      	mov	r0, r4
 80030d0:	f008 f8b8 	bl	800b244 <UTIL_LPM_SetStopMode>
}
 80030d4:	bd10      	pop	{r4, pc}
 80030d6:	bf00      	nop
 80030d8:	20000fcc 	.word	0x20000fcc
 80030dc:	08003065 	.word	0x08003065

080030e0 <UTIL_SEQ_Idle>:
{
 80030e0:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80030e2:	f008 f8db 	bl	800b29c <UTIL_LPM_EnterLowPower>
}
 80030e6:	bd08      	pop	{r3, pc}

080030e8 <UTIL_ADV_TRACE_PreSendHook>:
{
 80030e8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80030ea:	2101      	movs	r1, #1
 80030ec:	2002      	movs	r0, #2
 80030ee:	f008 f8a9 	bl	800b244 <UTIL_LPM_SetStopMode>
}
 80030f2:	bd08      	pop	{r3, pc}

080030f4 <UTIL_ADV_TRACE_PostSendHook>:
{
 80030f4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80030f6:	2100      	movs	r1, #0
 80030f8:	2002      	movs	r0, #2
 80030fa:	f008 f8a3 	bl	800b244 <UTIL_LPM_SetStopMode>
}
 80030fe:	bd08      	pop	{r3, pc}

08003100 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8003100:	2000      	movs	r0, #0
 8003102:	4770      	bx	lr

08003104 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8003104:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8003106:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <HAL_GetTick+0x14>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b90b      	cbnz	r3, 8003110 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 800310c:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 800310e:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8003110:	f000 f934 	bl	800337c <TIMER_IF_GetTimerValue>
 8003114:	e7fb      	b.n	800310e <HAL_GetTick+0xa>
 8003116:	bf00      	nop
 8003118:	20000fcc 	.word	0x20000fcc

0800311c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800311c:	b500      	push	{lr}
 800311e:	b083      	sub	sp, #12
 8003120:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */
Custom_Delay_ms(Delay);
 8003122:	9801      	ldr	r0, [sp, #4]
 8003124:	f7fe fc60 	bl	80019e8 <Custom_Delay_ms>
  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8003128:	b003      	add	sp, #12
 800312a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003130 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003132:	b089      	sub	sp, #36	@ 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003134:	4a22      	ldr	r2, [pc, #136]	@ (80031c0 <DBG_Init+0x90>)
 8003136:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800313a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800313e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8003142:	f001 fe73 	bl	8004e2c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8003146:	f001 fe79 	bl	8004e3c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800314a:	f001 fe7f 	bl	8004e4c <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800314e:	2400      	movs	r4, #0
 8003150:	9403      	str	r4, [sp, #12]
 8003152:	9404      	str	r4, [sp, #16]
 8003154:	9405      	str	r4, [sp, #20]
 8003156:	9406      	str	r4, [sp, #24]
 8003158:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800315a:	2301      	movs	r3, #1
 800315c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800315e:	2303      	movs	r3, #3
 8003160:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003166:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003168:	f042 0202 	orr.w	r2, r2, #2
 800316c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800316e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003170:	f002 0202 	and.w	r2, r2, #2
 8003174:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003176:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003178:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800317a:	f042 0202 	orr.w	r2, r2, #2
 800317e:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003188:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800318a:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 800318e:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8003190:	4d0c      	ldr	r5, [pc, #48]	@ (80031c4 <DBG_Init+0x94>)
 8003192:	a903      	add	r1, sp, #12
 8003194:	4628      	mov	r0, r5
 8003196:	f002 f963 	bl	8005460 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 800319a:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 800319e:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80031a0:	a903      	add	r1, sp, #12
 80031a2:	4628      	mov	r0, r5
 80031a4:	f002 f95c 	bl	8005460 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80031a8:	4622      	mov	r2, r4
 80031aa:	4639      	mov	r1, r7
 80031ac:	4628      	mov	r0, r5
 80031ae:	f002 faa7 	bl	8005700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80031b2:	4622      	mov	r2, r4
 80031b4:	4631      	mov	r1, r6
 80031b6:	4628      	mov	r0, r5
 80031b8:	f002 faa2 	bl	8005700 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80031bc:	b009      	add	sp, #36	@ 0x24
 80031be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c0:	58000800 	.word	0x58000800
 80031c4:	48000400 	.word	0x48000400

080031c8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80031c8:	2001      	movs	r0, #1
 80031ca:	4770      	bx	lr

080031cc <_kill>:

int _kill(int pid, int sig)
{
 80031cc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ce:	f009 fc6b 	bl	800caa8 <__errno>
 80031d2:	2316      	movs	r3, #22
 80031d4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80031d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031da:	bd08      	pop	{r3, pc}

080031dc <_exit>:

void _exit (int status)
{
 80031dc:	b508      	push	{r3, lr}
  _kill(status, -1);
 80031de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031e2:	f7ff fff3 	bl	80031cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80031e6:	e7fe      	b.n	80031e6 <_exit+0xa>

080031e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	460c      	mov	r4, r1
 80031ec:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ee:	2500      	movs	r5, #0
 80031f0:	e006      	b.n	8003200 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80031f2:	f3af 8000 	nop.w
 80031f6:	4621      	mov	r1, r4
 80031f8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031fc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80031fe:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003200:	42b5      	cmp	r5, r6
 8003202:	dbf6      	blt.n	80031f2 <_read+0xa>
  }

  return len;
}
 8003204:	4630      	mov	r0, r6
 8003206:	bd70      	pop	{r4, r5, r6, pc}

08003208 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	460c      	mov	r4, r1
 800320c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320e:	2500      	movs	r5, #0
 8003210:	e004      	b.n	800321c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8003212:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003216:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321a:	3501      	adds	r5, #1
 800321c:	42b5      	cmp	r5, r6
 800321e:	dbf8      	blt.n	8003212 <_write+0xa>
  }
  return len;
}
 8003220:	4630      	mov	r0, r6
 8003222:	bd70      	pop	{r4, r5, r6, pc}

08003224 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003228:	4770      	bx	lr

0800322a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800322a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800322e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8003230:	2000      	movs	r0, #0
 8003232:	4770      	bx	lr

08003234 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003234:	2001      	movs	r0, #1
 8003236:	4770      	bx	lr

08003238 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003238:	2000      	movs	r0, #0
 800323a:	4770      	bx	lr

0800323c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800323c:	b510      	push	{r4, lr}
 800323e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003240:	4a0c      	ldr	r2, [pc, #48]	@ (8003274 <_sbrk+0x38>)
 8003242:	490d      	ldr	r1, [pc, #52]	@ (8003278 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003244:	480d      	ldr	r0, [pc, #52]	@ (800327c <_sbrk+0x40>)
 8003246:	6800      	ldr	r0, [r0, #0]
 8003248:	b140      	cbz	r0, 800325c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800324a:	480c      	ldr	r0, [pc, #48]	@ (800327c <_sbrk+0x40>)
 800324c:	6800      	ldr	r0, [r0, #0]
 800324e:	4403      	add	r3, r0
 8003250:	1a52      	subs	r2, r2, r1
 8003252:	4293      	cmp	r3, r2
 8003254:	d806      	bhi.n	8003264 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003256:	4a09      	ldr	r2, [pc, #36]	@ (800327c <_sbrk+0x40>)
 8003258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800325a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800325c:	4807      	ldr	r0, [pc, #28]	@ (800327c <_sbrk+0x40>)
 800325e:	4c08      	ldr	r4, [pc, #32]	@ (8003280 <_sbrk+0x44>)
 8003260:	6004      	str	r4, [r0, #0]
 8003262:	e7f2      	b.n	800324a <_sbrk+0xe>
    errno = ENOMEM;
 8003264:	f009 fc20 	bl	800caa8 <__errno>
 8003268:	230c      	movs	r3, #12
 800326a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800326c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003270:	e7f3      	b.n	800325a <_sbrk+0x1e>
 8003272:	bf00      	nop
 8003274:	20008000 	.word	0x20008000
 8003278:	00000800 	.word	0x00000800
 800327c:	20000fd0 	.word	0x20000fd0
 8003280:	20005e70 	.word	0x20005e70

08003284 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003284:	b500      	push	{lr}
 8003286:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003288:	2300      	movs	r3, #0
 800328a:	9304      	str	r3, [sp, #16]
 800328c:	9305      	str	r3, [sp, #20]
 800328e:	9306      	str	r3, [sp, #24]
 8003290:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	9302      	str	r3, [sp, #8]
 8003296:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003298:	4816      	ldr	r0, [pc, #88]	@ (80032f4 <MX_TIM1_Init+0x70>)
 800329a:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <MX_TIM1_Init+0x74>)
 800329c:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 4800-1;
 800329e:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80032a2:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a4:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 10000-1;
 80032a6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80032aa:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ac:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80032ae:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032b2:	f004 f833 	bl	800731c <HAL_TIM_Base_Init>
 80032b6:	b998      	cbnz	r0, 80032e0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032bc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032be:	a904      	add	r1, sp, #16
 80032c0:	480c      	ldr	r0, [pc, #48]	@ (80032f4 <MX_TIM1_Init+0x70>)
 80032c2:	f004 f867 	bl	8007394 <HAL_TIM_ConfigClockSource>
 80032c6:	b970      	cbnz	r0, 80032e6 <MX_TIM1_Init+0x62>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c8:	2300      	movs	r3, #0
 80032ca:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032cc:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ce:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032d0:	a901      	add	r1, sp, #4
 80032d2:	4808      	ldr	r0, [pc, #32]	@ (80032f4 <MX_TIM1_Init+0x70>)
 80032d4:	f004 f8de 	bl	8007494 <HAL_TIMEx_MasterConfigSynchronization>
 80032d8:	b940      	cbnz	r0, 80032ec <MX_TIM1_Init+0x68>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032da:	b009      	add	sp, #36	@ 0x24
 80032dc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80032e0:	f7fe fb99 	bl	8001a16 <Error_Handler>
 80032e4:	e7e8      	b.n	80032b8 <MX_TIM1_Init+0x34>
    Error_Handler();
 80032e6:	f7fe fb96 	bl	8001a16 <Error_Handler>
 80032ea:	e7ed      	b.n	80032c8 <MX_TIM1_Init+0x44>
    Error_Handler();
 80032ec:	f7fe fb93 	bl	8001a16 <Error_Handler>
}
 80032f0:	e7f3      	b.n	80032da <MX_TIM1_Init+0x56>
 80032f2:	bf00      	nop
 80032f4:	20000fd4 	.word	0x20000fd4
 80032f8:	40012c00 	.word	0x40012c00

080032fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80032fc:	6802      	ldr	r2, [r0, #0]
 80032fe:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <HAL_TIM_Base_MspInit+0x28>)
 8003300:	429a      	cmp	r2, r3
 8003302:	d000      	beq.n	8003306 <HAL_TIM_Base_MspInit+0xa>
 8003304:	4770      	bx	lr
{
 8003306:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800330c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800330e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003312:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800331c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800331e:	b002      	add	sp, #8
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40012c00 	.word	0x40012c00

08003328 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003328:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <TIMER_IF_SetTimerContext+0x1c>)
 800332a:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800332c:	e001      	b.n	8003332 <TIMER_IF_SetTimerContext+0xa>
 800332e:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <TIMER_IF_SetTimerContext+0x1c>)
 8003330:	6898      	ldr	r0, [r3, #8]
 8003332:	4b04      	ldr	r3, [pc, #16]	@ (8003344 <TIMER_IF_SetTimerContext+0x1c>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	4283      	cmp	r3, r0
 8003338:	d1f9      	bne.n	800332e <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 800333a:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800333c:	4b02      	ldr	r3, [pc, #8]	@ (8003348 <TIMER_IF_SetTimerContext+0x20>)
 800333e:	6018      	str	r0, [r3, #0]
}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40002800 	.word	0x40002800
 8003348:	20001020 	.word	0x20001020

0800334c <TIMER_IF_GetTimerContext>:
}
 800334c:	4b01      	ldr	r3, [pc, #4]	@ (8003354 <TIMER_IF_GetTimerContext+0x8>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20001020 	.word	0x20001020

08003358 <TIMER_IF_GetTimerElapsedTime>:
 8003358:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800335a:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800335c:	e001      	b.n	8003362 <TIMER_IF_GetTimerElapsedTime+0xa>
 800335e:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8003360:	6898      	ldr	r0, [r3, #8]
 8003362:	4b04      	ldr	r3, [pc, #16]	@ (8003374 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4283      	cmp	r3, r0
 8003368:	d1f9      	bne.n	800335e <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 800336a:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800336c:	4b02      	ldr	r3, [pc, #8]	@ (8003378 <TIMER_IF_GetTimerElapsedTime+0x20>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	1ac0      	subs	r0, r0, r3
 8003372:	4770      	bx	lr
 8003374:	40002800 	.word	0x40002800
 8003378:	20001020 	.word	0x20001020

0800337c <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 800337c:	4b07      	ldr	r3, [pc, #28]	@ (800339c <TIMER_IF_GetTimerValue+0x20>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b153      	cbz	r3, 8003398 <TIMER_IF_GetTimerValue+0x1c>
 8003382:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <TIMER_IF_GetTimerValue+0x24>)
 8003384:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003386:	e001      	b.n	800338c <TIMER_IF_GetTimerValue+0x10>
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <TIMER_IF_GetTimerValue+0x24>)
 800338a:	6898      	ldr	r0, [r3, #8]
 800338c:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <TIMER_IF_GetTimerValue+0x24>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4283      	cmp	r3, r0
 8003392:	d1f9      	bne.n	8003388 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8003394:	43c0      	mvns	r0, r0
 8003396:	4770      	bx	lr
  uint32_t ret = 0;
 8003398:	2000      	movs	r0, #0
}
 800339a:	4770      	bx	lr
 800339c:	20001024 	.word	0x20001024
 80033a0:	40002800 	.word	0x40002800

080033a4 <TIMER_IF_GetMinimumTimeout>:
}
 80033a4:	2003      	movs	r0, #3
 80033a6:	4770      	bx	lr

080033a8 <TIMER_IF_Convert_ms2Tick>:
{
 80033a8:	b508      	push	{r3, lr}
 80033aa:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80033ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033b0:	2300      	movs	r3, #0
 80033b2:	0280      	lsls	r0, r0, #10
 80033b4:	0d89      	lsrs	r1, r1, #22
 80033b6:	f7fd fe2d 	bl	8001014 <__aeabi_uldivmod>
}
 80033ba:	bd08      	pop	{r3, pc}

080033bc <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80033bc:	0ec2      	lsrs	r2, r0, #27
 80033be:	0143      	lsls	r3, r0, #5
 80033c0:	1a1b      	subs	r3, r3, r0
 80033c2:	f162 0200 	sbc.w	r2, r2, #0
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	181b      	adds	r3, r3, r0
 80033d0:	f142 0000 	adc.w	r0, r2, #0
 80033d4:	00c0      	lsls	r0, r0, #3
 80033d6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80033da:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 80033de:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 80033e2:	4770      	bx	lr

080033e4 <TIMER_IF_StopTimer>:
{
 80033e4:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80033e6:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <TIMER_IF_StopTimer+0x20>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80033ec:	4c06      	ldr	r4, [pc, #24]	@ (8003408 <TIMER_IF_StopTimer+0x24>)
 80033ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033f2:	4620      	mov	r0, r4
 80033f4:	f003 f8e2 	bl	80065bc <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033fc:	6323      	str	r3, [r4, #48]	@ 0x30
}
 80033fe:	2000      	movs	r0, #0
 8003400:	bd10      	pop	{r4, pc}
 8003402:	bf00      	nop
 8003404:	40002800 	.word	0x40002800
 8003408:	20000d68 	.word	0x20000d68

0800340c <TIMER_IF_BkUp_Write_MSBticks>:
{
 800340c:	b508      	push	{r3, lr}
 800340e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8003410:	2102      	movs	r1, #2
 8003412:	4802      	ldr	r0, [pc, #8]	@ (800341c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8003414:	f003 fb1d 	bl	8006a52 <HAL_RTCEx_BKUPWrite>
}
 8003418:	bd08      	pop	{r3, pc}
 800341a:	bf00      	nop
 800341c:	20000d68 	.word	0x20000d68

08003420 <TIMER_IF_Init>:
{
 8003420:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8003422:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <TIMER_IF_Init+0x40>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b10b      	cbz	r3, 800342c <TIMER_IF_Init+0xc>
}
 8003428:	2000      	movs	r0, #0
 800342a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800342c:	4c0d      	ldr	r4, [pc, #52]	@ (8003464 <TIMER_IF_Init+0x44>)
 800342e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003432:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8003434:	f7ff fcb8 	bl	8002da8 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8003438:	f7ff ffd4 	bl	80033e4 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800343c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003440:	4620      	mov	r0, r4
 8003442:	f003 f8bb 	bl	80065bc <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8003446:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003448:	4620      	mov	r0, r4
 800344a:	f003 faa1 	bl	8006990 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800344e:	2000      	movs	r0, #0
 8003450:	f7ff ffdc 	bl	800340c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8003454:	f7ff ff68 	bl	8003328 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8003458:	4b01      	ldr	r3, [pc, #4]	@ (8003460 <TIMER_IF_Init+0x40>)
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e7e3      	b.n	8003428 <TIMER_IF_Init+0x8>
 8003460:	20001024 	.word	0x20001024
 8003464:	20000d68 	.word	0x20000d68

08003468 <TIMER_IF_BkUp_Write_Seconds>:
{
 8003468:	b508      	push	{r3, lr}
 800346a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800346c:	2100      	movs	r1, #0
 800346e:	4802      	ldr	r0, [pc, #8]	@ (8003478 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8003470:	f003 faef 	bl	8006a52 <HAL_RTCEx_BKUPWrite>
}
 8003474:	bd08      	pop	{r3, pc}
 8003476:	bf00      	nop
 8003478:	20000d68 	.word	0x20000d68

0800347c <TIMER_IF_BkUp_Write_SubSeconds>:
{
 800347c:	b508      	push	{r3, lr}
 800347e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003480:	2101      	movs	r1, #1
 8003482:	4802      	ldr	r0, [pc, #8]	@ (800348c <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8003484:	f003 fae5 	bl	8006a52 <HAL_RTCEx_BKUPWrite>
}
 8003488:	bd08      	pop	{r3, pc}
 800348a:	bf00      	nop
 800348c:	20000d68 	.word	0x20000d68

08003490 <TIMER_IF_StartTimer>:
{
 8003490:	b510      	push	{r4, lr}
 8003492:	b08c      	sub	sp, #48	@ 0x30
 8003494:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8003496:	222c      	movs	r2, #44	@ 0x2c
 8003498:	2100      	movs	r1, #0
 800349a:	a801      	add	r0, sp, #4
 800349c:	f009 fa66 	bl	800c96c <memset>
  TIMER_IF_StopTimer();
 80034a0:	f7ff ffa0 	bl	80033e4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <TIMER_IF_StartTimer+0x48>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80034aa:	2300      	movs	r3, #0
 80034ac:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80034ae:	43e4      	mvns	r4, r4
 80034b0:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80034b2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80034b4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034b8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80034ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034be:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80034c0:	2201      	movs	r2, #1
 80034c2:	a901      	add	r1, sp, #4
 80034c4:	4805      	ldr	r0, [pc, #20]	@ (80034dc <TIMER_IF_StartTimer+0x4c>)
 80034c6:	f003 f9a7 	bl	8006818 <HAL_RTC_SetAlarm_IT>
 80034ca:	b910      	cbnz	r0, 80034d2 <TIMER_IF_StartTimer+0x42>
}
 80034cc:	2000      	movs	r0, #0
 80034ce:	b00c      	add	sp, #48	@ 0x30
 80034d0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80034d2:	f7fe faa0 	bl	8001a16 <Error_Handler>
 80034d6:	e7f9      	b.n	80034cc <TIMER_IF_StartTimer+0x3c>
 80034d8:	20001020 	.word	0x20001020
 80034dc:	20000d68 	.word	0x20000d68

080034e0 <TIMER_IF_BkUp_Read_MSBticks>:
{
 80034e0:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80034e2:	2102      	movs	r1, #2
 80034e4:	4801      	ldr	r0, [pc, #4]	@ (80034ec <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 80034e6:	f003 fabb 	bl	8006a60 <HAL_RTCEx_BKUPRead>
}
 80034ea:	bd08      	pop	{r3, pc}
 80034ec:	20000d68 	.word	0x20000d68

080034f0 <TIMER_IF_GetTime>:
{
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4605      	mov	r5, r0
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <TIMER_IF_GetTime+0x34>)
 80034f6:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80034f8:	e001      	b.n	80034fe <TIMER_IF_GetTime+0xe>
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <TIMER_IF_GetTime+0x34>)
 80034fc:	689c      	ldr	r4, [r3, #8]
 80034fe:	4a09      	ldr	r2, [pc, #36]	@ (8003524 <TIMER_IF_GetTime+0x34>)
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	42a2      	cmp	r2, r4
 8003504:	d1f9      	bne.n	80034fa <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8003506:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8003508:	f7ff ffea 	bl	80034e0 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800350c:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800350e:	0aa4      	lsrs	r4, r4, #10
 8003510:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8003514:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8003518:	f7ff ff50 	bl	80033bc <TIMER_IF_Convert_Tick2ms>
 800351c:	8028      	strh	r0, [r5, #0]
}
 800351e:	4620      	mov	r0, r4
 8003520:	bd38      	pop	{r3, r4, r5, pc}
 8003522:	bf00      	nop
 8003524:	40002800 	.word	0x40002800

08003528 <TIMER_IF_BkUp_Read_Seconds>:
{
 8003528:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800352a:	2100      	movs	r1, #0
 800352c:	4801      	ldr	r0, [pc, #4]	@ (8003534 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 800352e:	f003 fa97 	bl	8006a60 <HAL_RTCEx_BKUPRead>
}
 8003532:	bd08      	pop	{r3, pc}
 8003534:	20000d68 	.word	0x20000d68

08003538 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8003538:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800353a:	2101      	movs	r1, #1
 800353c:	4801      	ldr	r0, [pc, #4]	@ (8003544 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 800353e:	f003 fa8f 	bl	8006a60 <HAL_RTCEx_BKUPRead>
}
 8003542:	bd08      	pop	{r3, pc}
 8003544:	20000d68 	.word	0x20000d68

08003548 <HAL_RTC_AlarmAEventCallback>:
{
 8003548:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800354a:	f008 f91f 	bl	800b78c <UTIL_TIMER_IRQ_Handler>
}
 800354e:	bd08      	pop	{r3, pc}

08003550 <HAL_RTCEx_SSRUEventCallback>:
{
 8003550:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8003552:	f7ff ffc5 	bl	80034e0 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8003556:	3001      	adds	r0, #1
 8003558:	f7ff ff58 	bl	800340c <TIMER_IF_BkUp_Write_MSBticks>
}
 800355c:	bd08      	pop	{r3, pc}
	...

08003560 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003560:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003562:	4817      	ldr	r0, [pc, #92]	@ (80035c0 <MX_LPUART1_UART_Init+0x60>)
 8003564:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <MX_LPUART1_UART_Init+0x64>)
 8003566:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003568:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800356c:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800356e:	2300      	movs	r3, #0
 8003570:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003572:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003574:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003576:	220c      	movs	r2, #12
 8003578:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800357a:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800357c:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800357e:	6243      	str	r3, [r0, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003580:	6283      	str	r3, [r0, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003582:	6643      	str	r3, [r0, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003584:	f005 f8f0 	bl	8008768 <HAL_UART_Init>
 8003588:	b970      	cbnz	r0, 80035a8 <MX_LPUART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800358a:	2100      	movs	r1, #0
 800358c:	480c      	ldr	r0, [pc, #48]	@ (80035c0 <MX_LPUART1_UART_Init+0x60>)
 800358e:	f005 fabf 	bl	8008b10 <HAL_UARTEx_SetTxFifoThreshold>
 8003592:	b960      	cbnz	r0, 80035ae <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003594:	2100      	movs	r1, #0
 8003596:	480a      	ldr	r0, [pc, #40]	@ (80035c0 <MX_LPUART1_UART_Init+0x60>)
 8003598:	f005 fadf 	bl	8008b5a <HAL_UARTEx_SetRxFifoThreshold>
 800359c:	b950      	cbnz	r0, 80035b4 <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800359e:	4808      	ldr	r0, [pc, #32]	@ (80035c0 <MX_LPUART1_UART_Init+0x60>)
 80035a0:	f005 fa97 	bl	8008ad2 <HAL_UARTEx_DisableFifoMode>
 80035a4:	b948      	cbnz	r0, 80035ba <MX_LPUART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80035a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80035a8:	f7fe fa35 	bl	8001a16 <Error_Handler>
 80035ac:	e7ed      	b.n	800358a <MX_LPUART1_UART_Init+0x2a>
    Error_Handler();
 80035ae:	f7fe fa32 	bl	8001a16 <Error_Handler>
 80035b2:	e7ef      	b.n	8003594 <MX_LPUART1_UART_Init+0x34>
    Error_Handler();
 80035b4:	f7fe fa2f 	bl	8001a16 <Error_Handler>
 80035b8:	e7f1      	b.n	800359e <MX_LPUART1_UART_Init+0x3e>
    Error_Handler();
 80035ba:	f7fe fa2c 	bl	8001a16 <Error_Handler>
}
 80035be:	e7f2      	b.n	80035a6 <MX_LPUART1_UART_Init+0x46>
 80035c0:	2000111c 	.word	0x2000111c
 80035c4:	40008000 	.word	0x40008000

080035c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035c8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035ca:	4817      	ldr	r0, [pc, #92]	@ (8003628 <MX_USART2_UART_Init+0x60>)
 80035cc:	4b17      	ldr	r3, [pc, #92]	@ (800362c <MX_USART2_UART_Init+0x64>)
 80035ce:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80035d0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80035d4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035d6:	2300      	movs	r3, #0
 80035d8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035da:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035dc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035de:	220c      	movs	r2, #12
 80035e0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035e2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035e4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035e6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035e8:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035ea:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035ec:	f005 f8bc 	bl	8008768 <HAL_UART_Init>
 80035f0:	b970      	cbnz	r0, 8003610 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035f2:	2100      	movs	r1, #0
 80035f4:	480c      	ldr	r0, [pc, #48]	@ (8003628 <MX_USART2_UART_Init+0x60>)
 80035f6:	f005 fa8b 	bl	8008b10 <HAL_UARTEx_SetTxFifoThreshold>
 80035fa:	b960      	cbnz	r0, 8003616 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035fc:	2100      	movs	r1, #0
 80035fe:	480a      	ldr	r0, [pc, #40]	@ (8003628 <MX_USART2_UART_Init+0x60>)
 8003600:	f005 faab 	bl	8008b5a <HAL_UARTEx_SetRxFifoThreshold>
 8003604:	b950      	cbnz	r0, 800361c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8003606:	4808      	ldr	r0, [pc, #32]	@ (8003628 <MX_USART2_UART_Init+0x60>)
 8003608:	f005 fa3f 	bl	8008a8a <HAL_UARTEx_EnableFifoMode>
 800360c:	b948      	cbnz	r0, 8003622 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800360e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003610:	f7fe fa01 	bl	8001a16 <Error_Handler>
 8003614:	e7ed      	b.n	80035f2 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8003616:	f7fe f9fe 	bl	8001a16 <Error_Handler>
 800361a:	e7ef      	b.n	80035fc <MX_USART2_UART_Init+0x34>
    Error_Handler();
 800361c:	f7fe f9fb 	bl	8001a16 <Error_Handler>
 8003620:	e7f1      	b.n	8003606 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8003622:	f7fe f9f8 	bl	8001a16 <Error_Handler>
}
 8003626:	e7f2      	b.n	800360e <MX_USART2_UART_Init+0x46>
 8003628:	20001088 	.word	0x20001088
 800362c:	40004400 	.word	0x40004400

08003630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003630:	b530      	push	{r4, r5, lr}
 8003632:	b099      	sub	sp, #100	@ 0x64
 8003634:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003636:	2100      	movs	r1, #0
 8003638:	9113      	str	r1, [sp, #76]	@ 0x4c
 800363a:	9114      	str	r1, [sp, #80]	@ 0x50
 800363c:	9115      	str	r1, [sp, #84]	@ 0x54
 800363e:	9116      	str	r1, [sp, #88]	@ 0x58
 8003640:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003642:	2238      	movs	r2, #56	@ 0x38
 8003644:	a805      	add	r0, sp, #20
 8003646:	f009 f991 	bl	800c96c <memset>
  if(uartHandle->Instance==LPUART1)
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	4a48      	ldr	r2, [pc, #288]	@ (8003770 <HAL_UART_MspInit+0x140>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8003652:	4a48      	ldr	r2, [pc, #288]	@ (8003774 <HAL_UART_MspInit+0x144>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d034      	beq.n	80036c2 <HAL_UART_MspInit+0x92>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003658:	b019      	add	sp, #100	@ 0x64
 800365a:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800365c:	2320      	movs	r3, #32
 800365e:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003660:	a805      	add	r0, sp, #20
 8003662:	f002 fe8b 	bl	800637c <HAL_RCCEx_PeriphCLKConfig>
 8003666:	bb48      	cbnz	r0, 80036bc <HAL_UART_MspInit+0x8c>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003674:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003676:	f002 0201 	and.w	r2, r2, #1
 800367a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800367c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800367e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003680:	f042 0204 	orr.w	r2, r2, #4
 8003684:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800368e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003690:	2303      	movs	r3, #3
 8003692:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003694:	2402      	movs	r4, #2
 8003696:	9414      	str	r4, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2500      	movs	r5, #0
 800369a:	9515      	str	r5, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369c:	9316      	str	r3, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800369e:	2308      	movs	r3, #8
 80036a0:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a2:	a913      	add	r1, sp, #76	@ 0x4c
 80036a4:	4834      	ldr	r0, [pc, #208]	@ (8003778 <HAL_UART_MspInit+0x148>)
 80036a6:	f001 fedb 	bl	8005460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 80036aa:	462a      	mov	r2, r5
 80036ac:	4621      	mov	r1, r4
 80036ae:	2026      	movs	r0, #38	@ 0x26
 80036b0:	f001 fc3a 	bl	8004f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80036b4:	2026      	movs	r0, #38	@ 0x26
 80036b6:	f001 fc47 	bl	8004f48 <HAL_NVIC_EnableIRQ>
 80036ba:	e7cd      	b.n	8003658 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80036bc:	f7fe f9ab 	bl	8001a16 <Error_Handler>
 80036c0:	e7d2      	b.n	8003668 <HAL_UART_MspInit+0x38>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036c2:	2302      	movs	r3, #2
 80036c4:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80036c6:	4b2d      	ldr	r3, [pc, #180]	@ (800377c <HAL_UART_MspInit+0x14c>)
 80036c8:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036ca:	a805      	add	r0, sp, #20
 80036cc:	f002 fe56 	bl	800637c <HAL_RCCEx_PeriphCLKConfig>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d144      	bne.n	800375e <HAL_UART_MspInit+0x12e>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036da:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80036de:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80036e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036e2:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80036e6:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80036e8:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80036ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80036f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80036fa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80036fc:	230c      	movs	r3, #12
 80036fe:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2500      	movs	r5, #0
 8003706:	9515      	str	r5, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003708:	2303      	movs	r3, #3
 800370a:	9316      	str	r3, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800370c:	2307      	movs	r3, #7
 800370e:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003710:	a913      	add	r1, sp, #76	@ 0x4c
 8003712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003716:	f001 fea3 	bl	8005460 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800371a:	4819      	ldr	r0, [pc, #100]	@ (8003780 <HAL_UART_MspInit+0x150>)
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_UART_MspInit+0x154>)
 800371e:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003720:	2314      	movs	r3, #20
 8003722:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003724:	2310      	movs	r3, #16
 8003726:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003728:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800372e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003730:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003732:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003734:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003736:	f001 fc7f 	bl	8005038 <HAL_DMA_Init>
 800373a:	b998      	cbnz	r0, 8003764 <HAL_UART_MspInit+0x134>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800373c:	2110      	movs	r1, #16
 800373e:	4810      	ldr	r0, [pc, #64]	@ (8003780 <HAL_UART_MspInit+0x150>)
 8003740:	f001 fe7a 	bl	8005438 <HAL_DMA_ConfigChannelAttributes>
 8003744:	b988      	cbnz	r0, 800376a <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003746:	4b0e      	ldr	r3, [pc, #56]	@ (8003780 <HAL_UART_MspInit+0x150>)
 8003748:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800374a:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800374c:	2200      	movs	r2, #0
 800374e:	2102      	movs	r1, #2
 8003750:	2025      	movs	r0, #37	@ 0x25
 8003752:	f001 fbe9 	bl	8004f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003756:	2025      	movs	r0, #37	@ 0x25
 8003758:	f001 fbf6 	bl	8004f48 <HAL_NVIC_EnableIRQ>
}
 800375c:	e77c      	b.n	8003658 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800375e:	f7fe f95a 	bl	8001a16 <Error_Handler>
 8003762:	e7b7      	b.n	80036d4 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 8003764:	f7fe f957 	bl	8001a16 <Error_Handler>
 8003768:	e7e8      	b.n	800373c <HAL_UART_MspInit+0x10c>
      Error_Handler();
 800376a:	f7fe f954 	bl	8001a16 <Error_Handler>
 800376e:	e7ea      	b.n	8003746 <HAL_UART_MspInit+0x116>
 8003770:	40008000 	.word	0x40008000
 8003774:	40004400 	.word	0x40004400
 8003778:	48000800 	.word	0x48000800
 800377c:	000c0004 	.word	0x000c0004
 8003780:	20001028 	.word	0x20001028
 8003784:	40020008 	.word	0x40020008

08003788 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003788:	b510      	push	{r4, lr}

  if(uartHandle->Instance==LPUART1)
 800378a:	6803      	ldr	r3, [r0, #0]
 800378c:	4a13      	ldr	r2, [pc, #76]	@ (80037dc <HAL_UART_MspDeInit+0x54>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_UART_MspDeInit+0x14>
 8003792:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8003794:	4a12      	ldr	r2, [pc, #72]	@ (80037e0 <HAL_UART_MspDeInit+0x58>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_UART_MspDeInit+0x30>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800379a:	bd10      	pop	{r4, pc}
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800379c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037a0:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 80037a8:	2103      	movs	r1, #3
 80037aa:	480e      	ldr	r0, [pc, #56]	@ (80037e4 <HAL_UART_MspDeInit+0x5c>)
 80037ac:	f001 ff2a 	bl	8005604 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 80037b0:	2026      	movs	r0, #38	@ 0x26
 80037b2:	f001 fbcd 	bl	8004f50 <HAL_NVIC_DisableIRQ>
 80037b6:	e7f0      	b.n	800379a <HAL_UART_MspDeInit+0x12>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80037b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037bc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80037be:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80037c2:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80037c4:	210c      	movs	r1, #12
 80037c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037ca:	f001 ff1b 	bl	8005604 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80037ce:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80037d0:	f001 fca2 	bl	8005118 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80037d4:	2025      	movs	r0, #37	@ 0x25
 80037d6:	f001 fbbb 	bl	8004f50 <HAL_NVIC_DisableIRQ>
}
 80037da:	e7de      	b.n	800379a <HAL_UART_MspDeInit+0x12>
 80037dc:	40008000 	.word	0x40008000
 80037e0:	40004400 	.word	0x40004400
 80037e4:	48000800 	.word	0x48000800

080037e8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80037e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80037ea:	4b07      	ldr	r3, [pc, #28]	@ (8003808 <vcom_Init+0x20>)
 80037ec:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80037ee:	f7fe f867 	bl	80018c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80037f2:	f7ff fee9 	bl	80035c8 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80037f6:	4a05      	ldr	r2, [pc, #20]	@ (800380c <vcom_Init+0x24>)
 80037f8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 80037fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003800:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003804:	2000      	movs	r0, #0
 8003806:	bd08      	pop	{r3, pc}
 8003808:	200011b4 	.word	0x200011b4
 800380c:	58000800 	.word	0x58000800

08003810 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003810:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003818:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800381e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003820:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003824:	639a      	str	r2, [r3, #56]	@ 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8003826:	4804      	ldr	r0, [pc, #16]	@ (8003838 <vcom_DeInit+0x28>)
 8003828:	f7ff ffae 	bl	8003788 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800382c:	200f      	movs	r0, #15
 800382e:	f001 fb8f 	bl	8004f50 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003832:	2000      	movs	r0, #0
 8003834:	bd08      	pop	{r3, pc}
 8003836:	bf00      	nop
 8003838:	20001088 	.word	0x20001088

0800383c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800383c:	b508      	push	{r3, lr}
 800383e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8003840:	4601      	mov	r1, r0
 8003842:	4802      	ldr	r0, [pc, #8]	@ (800384c <vcom_Trace_DMA+0x10>)
 8003844:	f003 fe9e 	bl	8007584 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003848:	2000      	movs	r0, #0
 800384a:	bd08      	pop	{r3, pc}
 800384c:	20001088 	.word	0x20001088

08003850 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003850:	b510      	push	{r4, lr}
 8003852:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003854:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <vcom_ReceiveInit+0x50>)
 8003856:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003858:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800385c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800385e:	ab02      	add	r3, sp, #8
 8003860:	e913 0006 	ldmdb	r3, {r1, r2}
 8003864:	480f      	ldr	r0, [pc, #60]	@ (80038a4 <vcom_ReceiveInit+0x54>)
 8003866:	f005 f8b8 	bl	80089da <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800386a:	4b0e      	ldr	r3, [pc, #56]	@ (80038a4 <vcom_ReceiveInit+0x54>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003874:	d1f9      	bne.n	800386a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800387c:	d0fb      	beq.n	8003876 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003884:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8003886:	4c07      	ldr	r4, [pc, #28]	@ (80038a4 <vcom_ReceiveInit+0x54>)
 8003888:	4620      	mov	r0, r4
 800388a:	f005 f8e7 	bl	8008a5c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800388e:	2201      	movs	r2, #1
 8003890:	4905      	ldr	r1, [pc, #20]	@ (80038a8 <vcom_ReceiveInit+0x58>)
 8003892:	4620      	mov	r0, r4
 8003894:	f005 f83a 	bl	800890c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003898:	2000      	movs	r0, #0
 800389a:	b002      	add	sp, #8
 800389c:	bd10      	pop	{r4, pc}
 800389e:	bf00      	nop
 80038a0:	200011b0 	.word	0x200011b0
 80038a4:	20001088 	.word	0x20001088
 80038a8:	200011b8 	.word	0x200011b8

080038ac <vcom_Resume>:

void vcom_Resume(void)
{
 80038ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038ae:	4807      	ldr	r0, [pc, #28]	@ (80038cc <vcom_Resume+0x20>)
 80038b0:	f004 ff5a 	bl	8008768 <HAL_UART_Init>
 80038b4:	b920      	cbnz	r0, 80038c0 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038b6:	4806      	ldr	r0, [pc, #24]	@ (80038d0 <vcom_Resume+0x24>)
 80038b8:	f001 fbbe 	bl	8005038 <HAL_DMA_Init>
 80038bc:	b918      	cbnz	r0, 80038c6 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80038be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80038c0:	f7fe f8a9 	bl	8001a16 <Error_Handler>
 80038c4:	e7f7      	b.n	80038b6 <vcom_Resume+0xa>
    Error_Handler();
 80038c6:	f7fe f8a6 	bl	8001a16 <Error_Handler>
}
 80038ca:	e7f8      	b.n	80038be <vcom_Resume+0x12>
 80038cc:	20001088 	.word	0x20001088
 80038d0:	20001028 	.word	0x20001028

080038d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80038d6:	6802      	ldr	r2, [r0, #0]
 80038d8:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <HAL_UART_TxCpltCallback+0x18>)
 80038da:	429a      	cmp	r2, r3
 80038dc:	d000      	beq.n	80038e0 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80038de:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 80038e0:	4b03      	ldr	r3, [pc, #12]	@ (80038f0 <HAL_UART_TxCpltCallback+0x1c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2000      	movs	r0, #0
 80038e6:	4798      	blx	r3
}
 80038e8:	e7f9      	b.n	80038de <HAL_UART_TxCpltCallback+0xa>
 80038ea:	bf00      	nop
 80038ec:	40004400 	.word	0x40004400
 80038f0:	200011b4 	.word	0x200011b4

080038f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038f4:	480d      	ldr	r0, [pc, #52]	@ (800392c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80038f8:	f001 fa73 	bl	8004de2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038fc:	480c      	ldr	r0, [pc, #48]	@ (8003930 <LoopForever+0x6>)
  ldr r1, =_edata
 80038fe:	490d      	ldr	r1, [pc, #52]	@ (8003934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003900:	4a0d      	ldr	r2, [pc, #52]	@ (8003938 <LoopForever+0xe>)
  movs r3, #0
 8003902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003904:	e002      	b.n	800390c <LoopCopyDataInit>

08003906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800390a:	3304      	adds	r3, #4

0800390c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800390c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800390e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003910:	d3f9      	bcc.n	8003906 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003912:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003914:	4c0a      	ldr	r4, [pc, #40]	@ (8003940 <LoopForever+0x16>)
  movs r3, #0
 8003916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003918:	e001      	b.n	800391e <LoopFillZerobss>

0800391a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800391a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800391c:	3204      	adds	r2, #4

0800391e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800391e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003920:	d3fb      	bcc.n	800391a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003922:	f009 f8c7 	bl	800cab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003926:	f7fe f8bf 	bl	8001aa8 <main>

0800392a <LoopForever>:

LoopForever:
    b LoopForever
 800392a:	e7fe      	b.n	800392a <LoopForever>
  ldr   r0, =_estack
 800392c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003934:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8003938:	08011058 	.word	0x08011058
  ldr r2, =_sbss
 800393c:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8003940:	20005e70 	.word	0x20005e70

08003944 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003944:	e7fe      	b.n	8003944 <ADC_IRQHandler>

08003946 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8003946:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8003948:	f7ff fba4 	bl	8003094 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800394c:	f000 fd24 	bl	8004398 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8003950:	bd08      	pop	{r3, pc}

08003952 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8003952:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003958:	f007 fd0c 	bl	800b374 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800395c:	bd08      	pop	{r3, pc}

0800395e <CalculateCRC8>:
}

/**
 * @brief Calculate CRC8 for config packet (CRC-8/MAXIM)
 */
static uint8_t CalculateCRC8(uint8_t *data, uint8_t length) {
 800395e:	b500      	push	{lr}
 8003960:	4686      	mov	lr, r0
    uint8_t crc = 0x00;
    uint8_t polynomial = 0x31; // CRC-8/MAXIM polynomial

    for (uint8_t i = 0; i < length; i++) {
 8003962:	f04f 0c00 	mov.w	ip, #0
    uint8_t crc = 0x00;
 8003966:	4660      	mov	r0, ip
    for (uint8_t i = 0; i < length; i++) {
 8003968:	e011      	b.n	800398e <CalculateCRC8+0x30>
        crc ^= data[i];
        for (uint8_t j = 0; j < 8; j++) {
            if (crc & 0x80) {
                crc = (crc << 1) ^ polynomial;
            } else {
                crc <<= 1;
 800396a:	0040      	lsls	r0, r0, #1
 800396c:	b2c0      	uxtb	r0, r0
        for (uint8_t j = 0; j < 8; j++) {
 800396e:	3301      	adds	r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b07      	cmp	r3, #7
 8003974:	d807      	bhi.n	8003986 <CalculateCRC8+0x28>
            if (crc & 0x80) {
 8003976:	b242      	sxtb	r2, r0
 8003978:	2a00      	cmp	r2, #0
 800397a:	daf6      	bge.n	800396a <CalculateCRC8+0xc>
                crc = (crc << 1) ^ polynomial;
 800397c:	0052      	lsls	r2, r2, #1
 800397e:	f082 0231 	eor.w	r2, r2, #49	@ 0x31
 8003982:	b2d0      	uxtb	r0, r2
 8003984:	e7f3      	b.n	800396e <CalculateCRC8+0x10>
    for (uint8_t i = 0; i < length; i++) {
 8003986:	f10c 0c01 	add.w	ip, ip, #1
 800398a:	fa5f fc8c 	uxtb.w	ip, ip
 800398e:	458c      	cmp	ip, r1
 8003990:	d204      	bcs.n	800399c <CalculateCRC8+0x3e>
        crc ^= data[i];
 8003992:	f81e 300c 	ldrb.w	r3, [lr, ip]
 8003996:	4058      	eors	r0, r3
        for (uint8_t j = 0; j < 8; j++) {
 8003998:	2300      	movs	r3, #0
 800399a:	e7ea      	b.n	8003972 <CalculateCRC8+0x14>
            }
        }
    }

    return crc;
}
 800399c:	f85d fb04 	ldr.w	pc, [sp], #4

080039a0 <PingPong_Process>:
static void PingPong_Process(void) {
 80039a0:	b508      	push	{r3, lr}
	switch (LoRaState) {
 80039a2:	4b30      	ldr	r3, [pc, #192]	@ (8003a64 <PingPong_Process+0xc4>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d84c      	bhi.n	8003a44 <PingPong_Process+0xa4>
 80039aa:	e8df f003 	tbb	[pc, r3]
 80039ae:	1e03      	.short	0x1e03
 80039b0:	0f2d      	.short	0x0f2d
 80039b2:	3c          	.byte	0x3c
 80039b3:	00          	.byte	0x00
		APP_LOG(TS_ON, VLEVEL_L, "Gateway: Restart listening...\n\r");
 80039b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a68 <PingPong_Process+0xc8>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	2100      	movs	r1, #0
 80039ba:	4610      	mov	r0, r2
 80039bc:	f007 fb7c 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
		Radio.Rx(RX_TIMEOUT_VALUE);
 80039c0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a6c <PingPong_Process+0xcc>)
 80039c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c4:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80039c8:	4798      	blx	r3
}
 80039ca:	bd08      	pop	{r3, pc}
		APP_LOG(TS_ON, VLEVEL_L, "Gateway: Data processed, restart RX\n\r");
 80039cc:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <PingPong_Process+0xd0>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	2100      	movs	r1, #0
 80039d2:	4610      	mov	r0, r2
 80039d4:	f007 fb70 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
		Radio.Rx(RX_TIMEOUT_VALUE);
 80039d8:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <PingPong_Process+0xcc>)
 80039da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039dc:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80039e0:	4798      	blx	r3
		LoRaState = RX;
 80039e2:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <PingPong_Process+0xc4>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
		break;
 80039e8:	e7ef      	b.n	80039ca <PingPong_Process+0x2a>
		APP_LOG(TS_ON, VLEVEL_L, "Gateway: RX timeout, restart listening\n\r");
 80039ea:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <PingPong_Process+0xd4>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	2100      	movs	r1, #0
 80039f0:	4610      	mov	r0, r2
 80039f2:	f007 fb61 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
		Radio.Rx(RX_TIMEOUT_VALUE);
 80039f6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a6c <PingPong_Process+0xcc>)
 80039f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fa:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80039fe:	4798      	blx	r3
		LoRaState = RX;
 8003a00:	4b18      	ldr	r3, [pc, #96]	@ (8003a64 <PingPong_Process+0xc4>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
		break;
 8003a06:	e7e0      	b.n	80039ca <PingPong_Process+0x2a>
		APP_LOG(TS_ON, VLEVEL_L, "Gateway: RX error, restart listening\n\r");
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <PingPong_Process+0xd8>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f007 fb52 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
		Radio.Rx(RX_TIMEOUT_VALUE);
 8003a14:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <PingPong_Process+0xcc>)
 8003a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a18:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003a1c:	4798      	blx	r3
		LoRaState = RX;
 8003a1e:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <PingPong_Process+0xc4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]
		break;
 8003a24:	e7d1      	b.n	80039ca <PingPong_Process+0x2a>
		APP_LOG(TS_ON, VLEVEL_L, "Gateway: TX timeout (unexpected)\n\r");
 8003a26:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <PingPong_Process+0xdc>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f007 fb43 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
		Radio.Rx(RX_TIMEOUT_VALUE);
 8003a32:	4b0e      	ldr	r3, [pc, #56]	@ (8003a6c <PingPong_Process+0xcc>)
 8003a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a36:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003a3a:	4798      	blx	r3
		LoRaState = RX;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	@ (8003a64 <PingPong_Process+0xc4>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
		break;
 8003a42:	e7c2      	b.n	80039ca <PingPong_Process+0x2a>
		APP_LOG(TS_ON, VLEVEL_L, "Gateway: Unknown state, restart RX\n\r");
 8003a44:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <PingPong_Process+0xe0>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f007 fb34 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
		Radio.Rx(RX_TIMEOUT_VALUE);
 8003a50:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <PingPong_Process+0xcc>)
 8003a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a54:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003a58:	4798      	blx	r3
		LoRaState = RX;
 8003a5a:	4b02      	ldr	r3, [pc, #8]	@ (8003a64 <PingPong_Process+0xc4>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
}
 8003a60:	e7b3      	b.n	80039ca <PingPong_Process+0x2a>
 8003a62:	bf00      	nop
 8003a64:	2000581f 	.word	0x2000581f
 8003a68:	0800f348 	.word	0x0800f348
 8003a6c:	08010b80 	.word	0x08010b80
 8003a70:	0800f368 	.word	0x0800f368
 8003a74:	0800f390 	.word	0x0800f390
 8003a78:	0800f3bc 	.word	0x0800f3bc
 8003a7c:	0800f3e4 	.word	0x0800f3e4
 8003a80:	0800f408 	.word	0x0800f408

08003a84 <OnRxError>:
{
 8003a84:	b508      	push	{r3, lr}
	APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 8003a86:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <OnRxError+0x20>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	f007 fb13 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	LoRaState = RX_ERROR;
 8003a92:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <OnRxError+0x24>)
 8003a94:	2202      	movs	r2, #2
 8003a96:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process),
 8003a98:	2100      	movs	r1, #0
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f007 fc36 	bl	800b30c <UTIL_SEQ_SetTask>
}
 8003aa0:	bd08      	pop	{r3, pc}
 8003aa2:	bf00      	nop
 8003aa4:	0800f430 	.word	0x0800f430
 8003aa8:	2000581f 	.word	0x2000581f

08003aac <OnRxTimeout>:
{
 8003aac:	b508      	push	{r3, lr}
	APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 8003aae:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <OnRxTimeout+0x1c>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f007 faff 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	LoRaState = RX_TIMEOUT;  // Gateway mode: trigger restart
 8003aba:	2001      	movs	r0, #1
 8003abc:	4b03      	ldr	r3, [pc, #12]	@ (8003acc <OnRxTimeout+0x20>)
 8003abe:	7018      	strb	r0, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process),
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	f007 fc23 	bl	800b30c <UTIL_SEQ_SetTask>
}
 8003ac6:	bd08      	pop	{r3, pc}
 8003ac8:	0800f43c 	.word	0x0800f43c
 8003acc:	2000581f 	.word	0x2000581f

08003ad0 <OnTxTimeout>:
{
 8003ad0:	b508      	push	{r3, lr}
	APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <OnTxTimeout+0x20>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f007 faed 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	LoRaState = TX_TIMEOUT;
 8003ade:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <OnTxTimeout+0x24>)
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process),
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f007 fc10 	bl	800b30c <UTIL_SEQ_SetTask>
}
 8003aec:	bd08      	pop	{r3, pc}
 8003aee:	bf00      	nop
 8003af0:	0800f44c 	.word	0x0800f44c
 8003af4:	2000581f 	.word	0x2000581f

08003af8 <OnTxDone>:
{
 8003af8:	b508      	push	{r3, lr}
	APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8003afa:	4b07      	ldr	r3, [pc, #28]	@ (8003b18 <OnTxDone+0x20>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	2100      	movs	r1, #0
 8003b00:	4610      	mov	r0, r2
 8003b02:	f007 fad9 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	LoRaState = TX; // Trigger PingPong_Process to restart RX
 8003b06:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <OnTxDone+0x24>)
 8003b08:	2203      	movs	r2, #3
 8003b0a:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process),
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f007 fbfc 	bl	800b30c <UTIL_SEQ_SetTask>
}
 8003b14:	bd08      	pop	{r3, pc}
 8003b16:	bf00      	nop
 8003b18:	0800f45c 	.word	0x0800f45c
 8003b1c:	2000581f 	.word	0x2000581f

08003b20 <ProcessNodeConfigVersion>:
}

/**
 * @brief Process node config version from data packets (event-driven)
 */
static void ProcessNodeConfigVersion(uint8_t node_id, uint8_t received_version) {
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Only process if config tracking is active
    if (!configTracker.config_update_active) {
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <ProcessNodeConfigVersion+0x58>)
 8003b24:	7d5b      	ldrb	r3, [r3, #21]
 8003b26:	b903      	cbnz	r3, 8003b2a <ProcessNodeConfigVersion+0xa>
            configTracker.node_config_status[node_index] = 0x00;
            printf("*** WARNING: S-%02d has OLD version %d (0x01→0x00) ***\n",
                   node_id, received_version);
        }
    }
}
 8003b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	460d      	mov	r5, r1
    uint8_t node_index = node_id - 1; // Convert to 0-based index
 8003b2e:	1e46      	subs	r6, r0, #1
 8003b30:	b2f6      	uxtb	r6, r6
           node_id, received_version, configTracker.expected_version);
 8003b32:	4f11      	ldr	r7, [pc, #68]	@ (8003b78 <ProcessNodeConfigVersion+0x58>)
    printf("*** ProcessNodeConfigVersion: S-%02d sent version %d (expected: %d) ***\n",
 8003b34:	7d3b      	ldrb	r3, [r7, #20]
 8003b36:	460a      	mov	r2, r1
 8003b38:	4601      	mov	r1, r0
 8003b3a:	4810      	ldr	r0, [pc, #64]	@ (8003b7c <ProcessNodeConfigVersion+0x5c>)
 8003b3c:	f008 fd6e 	bl	800c61c <iprintf>
    if (received_version == configTracker.expected_version) {
 8003b40:	7d3b      	ldrb	r3, [r7, #20]
 8003b42:	42ab      	cmp	r3, r5
 8003b44:	d00c      	beq.n	8003b60 <ProcessNodeConfigVersion+0x40>
        if (configTracker.node_config_status[node_index] != 0x00) {
 8003b46:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <ProcessNodeConfigVersion+0x58>)
 8003b48:	5d9b      	ldrb	r3, [r3, r6]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0ec      	beq.n	8003b28 <ProcessNodeConfigVersion+0x8>
            configTracker.node_config_status[node_index] = 0x00;
 8003b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b78 <ProcessNodeConfigVersion+0x58>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	559a      	strb	r2, [r3, r6]
            printf("*** WARNING: S-%02d has OLD version %d (0x01→0x00) ***\n",
 8003b54:	462a      	mov	r2, r5
 8003b56:	4621      	mov	r1, r4
 8003b58:	4809      	ldr	r0, [pc, #36]	@ (8003b80 <ProcessNodeConfigVersion+0x60>)
 8003b5a:	f008 fd5f 	bl	800c61c <iprintf>
 8003b5e:	e7e3      	b.n	8003b28 <ProcessNodeConfigVersion+0x8>
        if (configTracker.node_config_status[node_index] != 0x01) {
 8003b60:	5dbb      	ldrb	r3, [r7, r6]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d0e0      	beq.n	8003b28 <ProcessNodeConfigVersion+0x8>
            configTracker.node_config_status[node_index] = 0x01;
 8003b66:	2201      	movs	r2, #1
 8003b68:	55ba      	strb	r2, [r7, r6]
            printf("*** SUCCESS: S-%02d UPDATED to version %d (0x00→0x01) ***\n",
 8003b6a:	462a      	mov	r2, r5
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4805      	ldr	r0, [pc, #20]	@ (8003b84 <ProcessNodeConfigVersion+0x64>)
 8003b70:	f008 fd54 	bl	800c61c <iprintf>
 8003b74:	e7d8      	b.n	8003b28 <ProcessNodeConfigVersion+0x8>
 8003b76:	bf00      	nop
 8003b78:	200011bc 	.word	0x200011bc
 8003b7c:	0800f468 	.word	0x0800f468
 8003b80:	0800f4f4 	.word	0x0800f4f4
 8003b84:	0800f4b4 	.word	0x0800f4b4

08003b88 <UpdateGatewayConfig>:
static void UpdateGatewayConfig(uint8_t version, uint32_t period_ms) {   //timerlerin hepsi duruk burda
 8003b88:	b570      	push	{r4, r5, r6, lr}
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	460e      	mov	r6, r1
        gatewayConfig.nodes_version, gatewayConfig.period_ms);
 8003b8e:	4c10      	ldr	r4, [pc, #64]	@ (8003bd0 <UpdateGatewayConfig+0x48>)
    printf("*** UpdateGatewayConfig: Old nodes_version=%d, period=%lu ms ***\n",
 8003b90:	6862      	ldr	r2, [r4, #4]
 8003b92:	7821      	ldrb	r1, [r4, #0]
 8003b94:	480f      	ldr	r0, [pc, #60]	@ (8003bd4 <UpdateGatewayConfig+0x4c>)
 8003b96:	f008 fd41 	bl	800c61c <iprintf>
    gatewayConfig.nodes_version = version;  // Update node version
 8003b9a:	7025      	strb	r5, [r4, #0]
    gatewayConfig.period_ms = period_ms;
 8003b9c:	6066      	str	r6, [r4, #4]
    gatewayConfig.updated = 1;  // Enable broadcast to nodes
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	7323      	strb	r3, [r4, #12]
    printf("*** UpdateGatewayConfig: New nodes_version=%d, period=%lu ms (broadcast ENABLED) ***\n",
 8003ba2:	4632      	mov	r2, r6
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	480c      	ldr	r0, [pc, #48]	@ (8003bd8 <UpdateGatewayConfig+0x50>)
 8003ba8:	f008 fd38 	bl	800c61c <iprintf>
    configTracker.expected_version = gatewayConfig.nodes_version;
 8003bac:	7821      	ldrb	r1, [r4, #0]
 8003bae:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <UpdateGatewayConfig+0x54>)
 8003bb0:	7519      	strb	r1, [r3, #20]
    for (uint8_t i = 0; i < MAX_SNODES; i++) {
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e004      	b.n	8003bc0 <UpdateGatewayConfig+0x38>
        configTracker.node_config_status[i] = 0x00;
 8003bb6:	4a09      	ldr	r2, [pc, #36]	@ (8003bdc <UpdateGatewayConfig+0x54>)
 8003bb8:	2000      	movs	r0, #0
 8003bba:	54d0      	strb	r0, [r2, r3]
    for (uint8_t i = 0; i < MAX_SNODES; i++) {
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4a07      	ldr	r2, [pc, #28]	@ (8003be0 <UpdateGatewayConfig+0x58>)
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d8f6      	bhi.n	8003bb6 <UpdateGatewayConfig+0x2e>
    printf("*** Config tracking activated for nodes_version %d - all nodes marked as 0x00 ***\n", gatewayConfig.nodes_version);
 8003bc8:	4806      	ldr	r0, [pc, #24]	@ (8003be4 <UpdateGatewayConfig+0x5c>)
 8003bca:	f008 fd27 	bl	800c61c <iprintf>
}
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	200000cc 	.word	0x200000cc
 8003bd4:	0800f530 	.word	0x0800f530
 8003bd8:	0800f574 	.word	0x0800f574
 8003bdc:	200011bc 	.word	0x200011bc
 8003be0:	200000e0 	.word	0x200000e0
 8003be4:	0800f5cc 	.word	0x0800f5cc

08003be8 <OnRxDone>:
{
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	b095      	sub	sp, #84	@ 0x54
 8003bee:	4605      	mov	r5, r0
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	4616      	mov	r6, r2
 8003bf4:	461f      	mov	r7, r3
	APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 8003bf6:	4b9e      	ldr	r3, [pc, #632]	@ (8003e70 <OnRxDone+0x288>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f007 fa5b 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_ON, VLEVEL_L, "Received : %s\n\r", payload);
 8003c02:	9500      	str	r5, [sp, #0]
 8003c04:	4b9b      	ldr	r3, [pc, #620]	@ (8003e74 <OnRxDone+0x28c>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f007 fa54 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi,
 8003c10:	9701      	str	r7, [sp, #4]
 8003c12:	9600      	str	r6, [sp, #0]
 8003c14:	4b98      	ldr	r3, [pc, #608]	@ (8003e78 <OnRxDone+0x290>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f007 fa4c 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	SnrValue = LoraSnr_FskCfo;
 8003c20:	4b96      	ldr	r3, [pc, #600]	@ (8003e7c <OnRxDone+0x294>)
 8003c22:	701f      	strb	r7, [r3, #0]
	if (size >= 17 && payload[0] == SENSOR_DATA_TYPE) { // DATA payload type + BATTERY + CONFIG_VER + CRC (17 bytes minimum)
 8003c24:	2c10      	cmp	r4, #16
 8003c26:	d902      	bls.n	8003c2e <OnRxDone+0x46>
 8003c28:	782b      	ldrb	r3, [r5, #0]
 8003c2a:	2bd1      	cmp	r3, #209	@ 0xd1
 8003c2c:	d017      	beq.n	8003c5e <OnRxDone+0x76>
	LoRaState = TX;  // Trigger PingPong_Process to restart RX
 8003c2e:	4b94      	ldr	r3, [pc, #592]	@ (8003e80 <OnRxDone+0x298>)
 8003c30:	2203      	movs	r2, #3
 8003c32:	701a      	strb	r2, [r3, #0]
	memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8003c34:	22ff      	movs	r2, #255	@ 0xff
 8003c36:	2100      	movs	r1, #0
 8003c38:	4892      	ldr	r0, [pc, #584]	@ (8003e84 <OnRxDone+0x29c>)
 8003c3a:	f008 fe97 	bl	800c96c <memset>
	RxBufferSize = size;
 8003c3e:	4b92      	ldr	r3, [pc, #584]	@ (8003e88 <OnRxDone+0x2a0>)
 8003c40:	801c      	strh	r4, [r3, #0]
	if (RxBufferSize <= MAX_APP_BUFFER_SIZE) {
 8003c42:	2cff      	cmp	r4, #255	@ 0xff
 8003c44:	f240 80df 	bls.w	8003e06 <OnRxDone+0x21e>
	RssiValue = rssi;
 8003c48:	4b90      	ldr	r3, [pc, #576]	@ (8003e8c <OnRxDone+0x2a4>)
 8003c4a:	701e      	strb	r6, [r3, #0]
	APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 8003c4c:	9400      	str	r4, [sp, #0]
 8003c4e:	4b90      	ldr	r3, [pc, #576]	@ (8003e90 <OnRxDone+0x2a8>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	2100      	movs	r1, #0
 8003c54:	2003      	movs	r0, #3
 8003c56:	f007 fa2f 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	for (int32_t i = 0; i < PAYLOAD_LEN; i++) {
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	e0da      	b.n	8003e14 <OnRxDone+0x22c>
		uint8_t node_id = payload[1];                            // Node ID (S-01=1, S-02=2, etc.)
 8003c5e:	f895 8001 	ldrb.w	r8, [r5, #1]
		int16_t td = (int16_t)(payload[2] | (payload[3] << 8));  // Digital temp (0.01°C)
 8003c62:	78aa      	ldrb	r2, [r5, #2]
 8003c64:	78eb      	ldrb	r3, [r5, #3]
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	b21b      	sxth	r3, r3
 8003c6a:	ea42 0103 	orr.w	r1, r2, r3
 8003c6e:	9111      	str	r1, [sp, #68]	@ 0x44
		int16_t ta = (int16_t)(payload[4] | (payload[5] << 8));  // Analog temp (0.01°C)
 8003c70:	792a      	ldrb	r2, [r5, #4]
 8003c72:	796b      	ldrb	r3, [r5, #5]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	b21b      	sxth	r3, r3
 8003c78:	ea42 0b03 	orr.w	fp, r2, r3
 8003c7c:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
		uint8_t h = payload[6];                                  // Humidity (%)
 8003c80:	79ab      	ldrb	r3, [r5, #6]
 8003c82:	930d      	str	r3, [sp, #52]	@ 0x34
		int16_t ax = (int16_t)(payload[7] | (payload[8] << 8));  // Accel X (mg)
 8003c84:	79ea      	ldrb	r2, [r5, #7]
 8003c86:	7a2b      	ldrb	r3, [r5, #8]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	b21b      	sxth	r3, r3
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	920e      	str	r2, [sp, #56]	@ 0x38
		int16_t ay = (int16_t)(payload[9] | (payload[10] << 8)); // Accel Y (mg)
 8003c90:	7a6a      	ldrb	r2, [r5, #9]
 8003c92:	7aab      	ldrb	r3, [r5, #10]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	b21b      	sxth	r3, r3
 8003c98:	ea42 0003 	orr.w	r0, r2, r3
 8003c9c:	900f      	str	r0, [sp, #60]	@ 0x3c
		int16_t az = (int16_t)(payload[11] | (payload[12] << 8)); // Accel Z (mg)
 8003c9e:	7aea      	ldrb	r2, [r5, #11]
 8003ca0:	7b2b      	ldrb	r3, [r5, #12]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	b21b      	sxth	r3, r3
 8003ca6:	ea42 0c03 	orr.w	ip, r2, r3
 8003caa:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
		uint16_t battery_voltage = (uint16_t)(payload[13] | (payload[14] << 8)); // Battery voltage (mV)
 8003cae:	7b6b      	ldrb	r3, [r5, #13]
 8003cb0:	7baa      	ldrb	r2, [r5, #14]
 8003cb2:	ea43 2e02 	orr.w	lr, r3, r2, lsl #8
 8003cb6:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
		uint8_t config_version = payload[15];                    // Node's config version
 8003cba:	f895 a00f 	ldrb.w	sl, [r5, #15]
		APP_LOG(TS_ON, VLEVEL_L, "DATA from S-%02d: TD=%.2f°C TA=%.2f°C H=%d%% AX=%dmg AY=%dmg AZ=%dmg BAT=%dmV ConfigV%d\n\r",
 8003cbe:	4608      	mov	r0, r1
 8003cc0:	f7fd f804 	bl	8000ccc <__aeabi_i2f>
 8003cc4:	4973      	ldr	r1, [pc, #460]	@ (8003e94 <OnRxDone+0x2ac>)
 8003cc6:	f7fd f909 	bl	8000edc <__aeabi_fdiv>
 8003cca:	4681      	mov	r9, r0
 8003ccc:	4658      	mov	r0, fp
 8003cce:	f7fc fffd 	bl	8000ccc <__aeabi_i2f>
 8003cd2:	4970      	ldr	r1, [pc, #448]	@ (8003e94 <OnRxDone+0x2ac>)
 8003cd4:	f7fd f902 	bl	8000edc <__aeabi_fdiv>
 8003cd8:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 8003cdc:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 8003ce0:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 8003ce4:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 8003ce8:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8003cec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003cee:	9108      	str	r1, [sp, #32]
 8003cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003cf2:	9207      	str	r2, [sp, #28]
 8003cf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003cf6:	9306      	str	r3, [sp, #24]
 8003cf8:	f7fc fbfe 	bl	80004f8 <__aeabi_f2d>
 8003cfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d00:	4648      	mov	r0, r9
 8003d02:	f7fc fbf9 	bl	80004f8 <__aeabi_f2d>
 8003d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d0a:	f8cd 8000 	str.w	r8, [sp]
 8003d0e:	4b62      	ldr	r3, [pc, #392]	@ (8003e98 <OnRxDone+0x2b0>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	2100      	movs	r1, #0
 8003d14:	4610      	mov	r0, r2
 8003d16:	f007 f9cf 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
		ProcessNodeConfigVersion(node_id, config_version);
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	f7ff feff 	bl	8003b20 <ProcessNodeConfigVersion>
		if (node_id >= 1 && node_id <= MAX_SNODES && packetCount < MAX_PACKETS_IN_BATCH) {
 8003d22:	f1b8 0f00 	cmp.w	r8, #0
 8003d26:	d008      	beq.n	8003d3a <OnRxDone+0x152>
 8003d28:	4b5c      	ldr	r3, [pc, #368]	@ (8003e9c <OnRxDone+0x2b4>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4543      	cmp	r3, r8
 8003d2e:	d304      	bcc.n	8003d3a <OnRxDone+0x152>
 8003d30:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea0 <OnRxDone+0x2b8>)
 8003d32:	8819      	ldrh	r1, [r3, #0]
 8003d34:	f5b1 7f96 	cmp.w	r1, #300	@ 0x12c
 8003d38:	d311      	bcc.n	8003d5e <OnRxDone+0x176>
		} else if (packetCount >= MAX_PACKETS_IN_BATCH) {
 8003d3a:	4b59      	ldr	r3, [pc, #356]	@ (8003ea0 <OnRxDone+0x2b8>)
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003d42:	d35b      	bcc.n	8003dfc <OnRxDone+0x214>
			printf("*** WARNING: Packet buffer full! Dropping packet from S-%02d ***\n\r", node_id);
 8003d44:	4641      	mov	r1, r8
 8003d46:	4857      	ldr	r0, [pc, #348]	@ (8003ea4 <OnRxDone+0x2bc>)
 8003d48:	f008 fc68 	bl	800c61c <iprintf>
			APP_LOG(TS_ON, VLEVEL_L, "WARNING: Packet buffer full! Dropping packet from S-%02d\n\r", node_id);
 8003d4c:	f8cd 8000 	str.w	r8, [sp]
 8003d50:	4b55      	ldr	r3, [pc, #340]	@ (8003ea8 <OnRxDone+0x2c0>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	2100      	movs	r1, #0
 8003d56:	4610      	mov	r0, r2
 8003d58:	f007 f9ae 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
 8003d5c:	e767      	b.n	8003c2e <OnRxDone+0x46>
			printf("*** DEBUG: Adding packet %d from S-%02d ***\n\r", packetCount + 1, node_id);
 8003d5e:	4642      	mov	r2, r8
 8003d60:	3101      	adds	r1, #1
 8003d62:	4852      	ldr	r0, [pc, #328]	@ (8003eac <OnRxDone+0x2c4>)
 8003d64:	f008 fc5a 	bl	800c61c <iprintf>
			packetBuffer[packetCount].node_id = node_id;
 8003d68:	484d      	ldr	r0, [pc, #308]	@ (8003ea0 <OnRxDone+0x2b8>)
 8003d6a:	f8b0 b000 	ldrh.w	fp, [r0]
 8003d6e:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8003eb0 <OnRxDone+0x2c8>
 8003d72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d78:	ebcb 02cb 	rsb	r2, fp, fp, lsl #3
 8003d7c:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8003d80:	f809 8022 	strb.w	r8, [r9, r2, lsl #2]
			packetBuffer[packetCount].td = td;
 8003d84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003d86:	805a      	strh	r2, [r3, #2]
			packetBuffer[packetCount].ta = ta;
 8003d88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003d8a:	809a      	strh	r2, [r3, #4]
			packetBuffer[packetCount].h = h;
 8003d8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003d8e:	719a      	strb	r2, [r3, #6]
			packetBuffer[packetCount].ax = ax;
 8003d90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d92:	811a      	strh	r2, [r3, #8]
			packetBuffer[packetCount].ay = ay;
 8003d94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003d96:	815a      	strh	r2, [r3, #10]
			packetBuffer[packetCount].az = az;
 8003d98:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8003d9a:	819a      	strh	r2, [r3, #12]
			packetBuffer[packetCount].battery_voltage = battery_voltage;
 8003d9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003d9e:	81da      	strh	r2, [r3, #14]
			packetBuffer[packetCount].config_version = config_version;
 8003da0:	f883 a010 	strb.w	sl, [r3, #16]
			packetBuffer[packetCount].timestamp = HAL_GetTick();
 8003da4:	f7ff f9ae 	bl	8003104 <HAL_GetTick>
 8003da8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003daa:	eba3 030b 	sub.w	r3, r3, fp
 8003dae:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8003db2:	6158      	str	r0, [r3, #20]
			packetBuffer[packetCount].rssi = rssi;
 8003db4:	483a      	ldr	r0, [pc, #232]	@ (8003ea0 <OnRxDone+0x2b8>)
 8003db6:	8803      	ldrh	r3, [r0, #0]
 8003db8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8003dbc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8003dc0:	8316      	strh	r6, [r2, #24]
			packetBuffer[packetCount].snr = LoraSnr_FskCfo;
 8003dc2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8003dc6:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8003dca:	f889 701a 	strb.w	r7, [r9, #26]
			packetCount++;
 8003dce:	3301      	adds	r3, #1
 8003dd0:	b299      	uxth	r1, r3
 8003dd2:	4607      	mov	r7, r0
 8003dd4:	8001      	strh	r1, [r0, #0]
			printf("*** DEBUG: Packet stored! Total packets in buffer: %d ***\n\r", packetCount);
 8003dd6:	4837      	ldr	r0, [pc, #220]	@ (8003eb4 <OnRxDone+0x2cc>)
 8003dd8:	f008 fc20 	bl	800c61c <iprintf>
			APP_LOG(TS_ON, VLEVEL_L, "Packet %d stored from S-%02d BAT=%dmV ConfigV%d (Total: %d packets)\n\r",
 8003ddc:	883b      	ldrh	r3, [r7, #0]
 8003dde:	9304      	str	r3, [sp, #16]
 8003de0:	f8cd a00c 	str.w	sl, [sp, #12]
 8003de4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003de6:	9202      	str	r2, [sp, #8]
 8003de8:	f8cd 8004 	str.w	r8, [sp, #4]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	4b32      	ldr	r3, [pc, #200]	@ (8003eb8 <OnRxDone+0x2d0>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	2100      	movs	r1, #0
 8003df4:	4610      	mov	r0, r2
 8003df6:	f007 f95f 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
 8003dfa:	e718      	b.n	8003c2e <OnRxDone+0x46>
			printf("*** ERROR: Invalid node_id %d or other error ***\n\r", node_id);
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	482f      	ldr	r0, [pc, #188]	@ (8003ebc <OnRxDone+0x2d4>)
 8003e00:	f008 fc0c 	bl	800c61c <iprintf>
 8003e04:	e713      	b.n	8003c2e <OnRxDone+0x46>
		memcpy(BufferRx, payload, RxBufferSize);
 8003e06:	4622      	mov	r2, r4
 8003e08:	4629      	mov	r1, r5
 8003e0a:	481e      	ldr	r0, [pc, #120]	@ (8003e84 <OnRxDone+0x29c>)
 8003e0c:	f008 fe79 	bl	800cb02 <memcpy>
 8003e10:	e71a      	b.n	8003c48 <OnRxDone+0x60>
	for (int32_t i = 0; i < PAYLOAD_LEN; i++) {
 8003e12:	3601      	adds	r6, #1
 8003e14:	2e3f      	cmp	r6, #63	@ 0x3f
 8003e16:	dc18      	bgt.n	8003e4a <OnRxDone+0x262>
		APP_LOG(TS_ON, VLEVEL_H, "%02X", BufferRx[i]);
 8003e18:	4b1a      	ldr	r3, [pc, #104]	@ (8003e84 <OnRxDone+0x29c>)
 8003e1a:	5d9b      	ldrb	r3, [r3, r6]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ec0 <OnRxDone+0x2d8>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	2100      	movs	r1, #0
 8003e24:	2003      	movs	r0, #3
 8003e26:	f007 f947 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
		if (i % 16 == 15) {
 8003e2a:	4272      	negs	r2, r6
 8003e2c:	f006 030f 	and.w	r3, r6, #15
 8003e30:	f002 020f 	and.w	r2, r2, #15
 8003e34:	bf58      	it	pl
 8003e36:	4253      	negpl	r3, r2
 8003e38:	2b0f      	cmp	r3, #15
 8003e3a:	d1ea      	bne.n	8003e12 <OnRxDone+0x22a>
			APP_LOG(TS_ON, VLEVEL_H, "\n\r");
 8003e3c:	4b21      	ldr	r3, [pc, #132]	@ (8003ec4 <OnRxDone+0x2dc>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	2100      	movs	r1, #0
 8003e42:	2003      	movs	r0, #3
 8003e44:	f007 f938 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
 8003e48:	e7e3      	b.n	8003e12 <OnRxDone+0x22a>
	APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec4 <OnRxDone+0x2dc>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4611      	mov	r1, r2
 8003e50:	2003      	movs	r0, #3
 8003e52:	f007 f931 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process),
 8003e56:	2100      	movs	r1, #0
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f007 fa57 	bl	800b30c <UTIL_SEQ_SetTask>
	memset(payload,0,size);
 8003e5e:	4622      	mov	r2, r4
 8003e60:	2100      	movs	r1, #0
 8003e62:	4628      	mov	r0, r5
 8003e64:	f008 fd82 	bl	800c96c <memset>
}
 8003e68:	b015      	add	sp, #84	@ 0x54
 8003e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6e:	bf00      	nop
 8003e70:	0800f620 	.word	0x0800f620
 8003e74:	0800f62c 	.word	0x0800f62c
 8003e78:	0800f63c 	.word	0x0800f63c
 8003e7c:	2000561c 	.word	0x2000561c
 8003e80:	2000581f 	.word	0x2000581f
 8003e84:	20005720 	.word	0x20005720
 8003e88:	2000561e 	.word	0x2000561e
 8003e8c:	2000561d 	.word	0x2000561d
 8003e90:	0800f824 	.word	0x0800f824
 8003e94:	42c80000 	.word	0x42c80000
 8003e98:	0800f660 	.word	0x0800f660
 8003e9c:	200000e0 	.word	0x200000e0
 8003ea0:	20003530 	.word	0x20003530
 8003ea4:	0800f770 	.word	0x0800f770
 8003ea8:	0800f7b4 	.word	0x0800f7b4
 8003eac:	0800f6bc 	.word	0x0800f6bc
 8003eb0:	20003534 	.word	0x20003534
 8003eb4:	0800f6ec 	.word	0x0800f6ec
 8003eb8:	0800f728 	.word	0x0800f728
 8003ebc:	0800f7f0 	.word	0x0800f7f0
 8003ec0:	0800f838 	.word	0x0800f838
 8003ec4:	0800f404 	.word	0x0800f404

08003ec8 <OnledEvent>:
static void OnledEvent(void *context) {
 8003ec8:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 8003eca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ece:	4803      	ldr	r0, [pc, #12]	@ (8003edc <OnledEvent+0x14>)
 8003ed0:	f001 fc1b 	bl	800570a <HAL_GPIO_TogglePin>
	UTIL_TIMER_Start(&timerLed);
 8003ed4:	4802      	ldr	r0, [pc, #8]	@ (8003ee0 <OnledEvent+0x18>)
 8003ed6:	f007 fbf9 	bl	800b6cc <UTIL_TIMER_Start>
}
 8003eda:	bd08      	pop	{r3, pc}
 8003edc:	48000400 	.word	0x48000400
 8003ee0:	20005604 	.word	0x20005604

08003ee4 <SendConfigToNodes>:
static void SendConfigToNodes(void) {
 8003ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee6:	b085      	sub	sp, #20
    configPacket[0] = CONFIG_MSG_TYPE;  // TYPE
 8003ee8:	26a1      	movs	r6, #161	@ 0xa1
 8003eea:	f88d 6008 	strb.w	r6, [sp, #8]
    configPacket[1] = gatewayConfig.nodes_version;  // NODE VERSION (not gateway version)
 8003eee:	4b18      	ldr	r3, [pc, #96]	@ (8003f50 <SendConfigToNodes+0x6c>)
 8003ef0:	781f      	ldrb	r7, [r3, #0]
 8003ef2:	f88d 7009 	strb.w	r7, [sp, #9]
    configPacket[2] = (uint8_t)(gatewayConfig.period_ms & 0xFF);        // PERIOD_MS byte 0
 8003ef6:	685c      	ldr	r4, [r3, #4]
 8003ef8:	f88d 400a 	strb.w	r4, [sp, #10]
    configPacket[3] = (uint8_t)((gatewayConfig.period_ms >> 8) & 0xFF);  // PERIOD_MS byte 1
 8003efc:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8003f00:	f88d 300b 	strb.w	r3, [sp, #11]
    configPacket[4] = (uint8_t)((gatewayConfig.period_ms >> 16) & 0xFF); // PERIOD_MS byte 2
 8003f04:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8003f08:	f88d 300c 	strb.w	r3, [sp, #12]
    configPacket[5] = (uint8_t)((gatewayConfig.period_ms >> 24) & 0xFF); // PERIOD_MS byte 3
 8003f0c:	0e23      	lsrs	r3, r4, #24
 8003f0e:	f88d 300d 	strb.w	r3, [sp, #13]
    configPacket[6] = CalculateCRC8(configPacket, 6);  // CRC8
 8003f12:	ad02      	add	r5, sp, #8
 8003f14:	2106      	movs	r1, #6
 8003f16:	4628      	mov	r0, r5
 8003f18:	f7ff fd21 	bl	800395e <CalculateCRC8>
 8003f1c:	f88d 000e 	strb.w	r0, [sp, #14]
    printf("*** Sending config to nodes: TYPE=0x%02X, NODES_VER=%d, PERIOD=%lu ms, CRC=0x%02X ***\n",
 8003f20:	9000      	str	r0, [sp, #0]
 8003f22:	4623      	mov	r3, r4
 8003f24:	463a      	mov	r2, r7
 8003f26:	4631      	mov	r1, r6
 8003f28:	480a      	ldr	r0, [pc, #40]	@ (8003f54 <SendConfigToNodes+0x70>)
 8003f2a:	f008 fb77 	bl	800c61c <iprintf>
    memcpy(BufferTx, configPacket, 7);
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f58 <SendConfigToNodes+0x74>)
 8003f30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f34:	6018      	str	r0, [r3, #0]
 8003f36:	8099      	strh	r1, [r3, #4]
 8003f38:	0c09      	lsrs	r1, r1, #16
 8003f3a:	7199      	strb	r1, [r3, #6]
    Radio.Send(BufferTx, 7);
 8003f3c:	4a07      	ldr	r2, [pc, #28]	@ (8003f5c <SendConfigToNodes+0x78>)
 8003f3e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f40:	2107      	movs	r1, #7
 8003f42:	4618      	mov	r0, r3
 8003f44:	4790      	blx	r2
    printf("*** Config packet sent via LoRa ***\n");
 8003f46:	4806      	ldr	r0, [pc, #24]	@ (8003f60 <SendConfigToNodes+0x7c>)
 8003f48:	f008 fbd8 	bl	800c6fc <puts>
}
 8003f4c:	b005      	add	sp, #20
 8003f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f50:	200000cc 	.word	0x200000cc
 8003f54:	0800f840 	.word	0x0800f840
 8003f58:	20005620 	.word	0x20005620
 8003f5c:	08010b80 	.word	0x08010b80
 8003f60:	0800f898 	.word	0x0800f898

08003f64 <ConfigBroadcastHandler>:
static void ConfigBroadcastHandler(void *context) {
 8003f64:	b508      	push	{r3, lr}
    if (gatewayConfig.broadcast_active && currentPhase == PHASE_CONFIG_BROADCAST) {
 8003f66:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <ConfigBroadcastHandler+0x24>)
 8003f68:	7b5b      	ldrb	r3, [r3, #13]
 8003f6a:	b11b      	cbz	r3, 8003f74 <ConfigBroadcastHandler+0x10>
 8003f6c:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <ConfigBroadcastHandler+0x28>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d000      	beq.n	8003f76 <ConfigBroadcastHandler+0x12>
}
 8003f74:	bd08      	pop	{r3, pc}
        printf("*** Config broadcast retry - sending to nodes ***\n");
 8003f76:	4806      	ldr	r0, [pc, #24]	@ (8003f90 <ConfigBroadcastHandler+0x2c>)
 8003f78:	f008 fbc0 	bl	800c6fc <puts>
        SendConfigToNodes();
 8003f7c:	f7ff ffb2 	bl	8003ee4 <SendConfigToNodes>
        UTIL_TIMER_Start(&configBroadcastTimer);
 8003f80:	4804      	ldr	r0, [pc, #16]	@ (8003f94 <ConfigBroadcastHandler+0x30>)
 8003f82:	f007 fba3 	bl	800b6cc <UTIL_TIMER_Start>
}
 8003f86:	e7f5      	b.n	8003f74 <ConfigBroadcastHandler+0x10>
 8003f88:	200000cc 	.word	0x200000cc
 8003f8c:	200011ba 	.word	0x200011ba
 8003f90:	0800f8bc 	.word	0x0800f8bc
 8003f94:	20003500 	.word	0x20003500

08003f98 <CheckAllNodesUpdated>:

/**
 * @brief Check if all nodes have updated to new config version
 */
static uint8_t CheckAllNodesUpdated(void) {
 8003f98:	b570      	push	{r4, r5, r6, lr}
    if (!configTracker.config_update_active) {
 8003f9a:	4b17      	ldr	r3, [pc, #92]	@ (8003ff8 <CheckAllNodesUpdated+0x60>)
 8003f9c:	7d5e      	ldrb	r6, [r3, #21]
 8003f9e:	b90e      	cbnz	r6, 8003fa4 <CheckAllNodesUpdated+0xc>
    } else {
        printf("*** INCOMPLETE: Some nodes still have old config - continue broadcast ***\n");
    }

    return all_updated;
}
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
    printf("\n*** CheckAllNodesUpdated: Checking node config versions ***\n");
 8003fa4:	4815      	ldr	r0, [pc, #84]	@ (8003ffc <CheckAllNodesUpdated+0x64>)
 8003fa6:	f008 fba9 	bl	800c6fc <puts>
    for (uint8_t i = 0; i < MAX_SNODES; i++) {
 8003faa:	2400      	movs	r4, #0
    uint8_t all_updated = 1;
 8003fac:	2601      	movs	r6, #1
    for (uint8_t i = 0; i < MAX_SNODES; i++) {
 8003fae:	e003      	b.n	8003fb8 <CheckAllNodesUpdated+0x20>
        printf("Node S-%02d: Status=0x%02X (%s)\n",
 8003fb0:	4b13      	ldr	r3, [pc, #76]	@ (8004000 <CheckAllNodesUpdated+0x68>)
 8003fb2:	e00c      	b.n	8003fce <CheckAllNodesUpdated+0x36>
    for (uint8_t i = 0; i < MAX_SNODES; i++) {
 8003fb4:	3401      	adds	r4, #1
 8003fb6:	b2e4      	uxtb	r4, r4
 8003fb8:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <CheckAllNodesUpdated+0x6c>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	42a3      	cmp	r3, r4
 8003fbe:	d90f      	bls.n	8003fe0 <CheckAllNodesUpdated+0x48>
        printf("Node S-%02d: Status=0x%02X (%s)\n",
 8003fc0:	4625      	mov	r5, r4
 8003fc2:	1c61      	adds	r1, r4, #1
               configTracker.node_config_status[i],
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <CheckAllNodesUpdated+0x60>)
 8003fc6:	5d1a      	ldrb	r2, [r3, r4]
        printf("Node S-%02d: Status=0x%02X (%s)\n",
 8003fc8:	2a01      	cmp	r2, #1
 8003fca:	d0f1      	beq.n	8003fb0 <CheckAllNodesUpdated+0x18>
 8003fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8004008 <CheckAllNodesUpdated+0x70>)
 8003fce:	480f      	ldr	r0, [pc, #60]	@ (800400c <CheckAllNodesUpdated+0x74>)
 8003fd0:	f008 fb24 	bl	800c61c <iprintf>
        if (configTracker.node_config_status[i] == 0x00) {
 8003fd4:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <CheckAllNodesUpdated+0x60>)
 8003fd6:	5d5b      	ldrb	r3, [r3, r5]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1eb      	bne.n	8003fb4 <CheckAllNodesUpdated+0x1c>
            all_updated = 0; // Found at least one outdated node
 8003fdc:	461e      	mov	r6, r3
 8003fde:	e7e9      	b.n	8003fb4 <CheckAllNodesUpdated+0x1c>
    if (all_updated) {
 8003fe0:	b12e      	cbz	r6, 8003fee <CheckAllNodesUpdated+0x56>
        printf("*** SUCCESS: All nodes have version %d - config update COMPLETE! ***\n",
 8003fe2:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <CheckAllNodesUpdated+0x60>)
 8003fe4:	7d19      	ldrb	r1, [r3, #20]
 8003fe6:	480a      	ldr	r0, [pc, #40]	@ (8004010 <CheckAllNodesUpdated+0x78>)
 8003fe8:	f008 fb18 	bl	800c61c <iprintf>
 8003fec:	e7d8      	b.n	8003fa0 <CheckAllNodesUpdated+0x8>
        printf("*** INCOMPLETE: Some nodes still have old config - continue broadcast ***\n");
 8003fee:	4809      	ldr	r0, [pc, #36]	@ (8004014 <CheckAllNodesUpdated+0x7c>)
 8003ff0:	f008 fb84 	bl	800c6fc <puts>
 8003ff4:	e7d4      	b.n	8003fa0 <CheckAllNodesUpdated+0x8>
 8003ff6:	bf00      	nop
 8003ff8:	200011bc 	.word	0x200011bc
 8003ffc:	0800f904 	.word	0x0800f904
 8004000:	0800f8f0 	.word	0x0800f8f0
 8004004:	200000e0 	.word	0x200000e0
 8004008:	0800f8f8 	.word	0x0800f8f8
 800400c:	0800f944 	.word	0x0800f944
 8004010:	0800f968 	.word	0x0800f968
 8004014:	0800f9b0 	.word	0x0800f9b0

08004018 <ResetConfigTracker>:


/**
 * @brief Reset config tracker after config broadcast is complete
 */
static void ResetConfigTracker(void) {
 8004018:	b508      	push	{r3, lr}
    printf("*** ResetConfigTracker: Deactivating config tracking ***\n");
 800401a:	4807      	ldr	r0, [pc, #28]	@ (8004038 <ResetConfigTracker+0x20>)
 800401c:	f008 fb6e 	bl	800c6fc <puts>
    currentPhase = PHASE_LISTENING;
 8004020:	2300      	movs	r3, #0
 8004022:	4a06      	ldr	r2, [pc, #24]	@ (800403c <ResetConfigTracker+0x24>)
 8004024:	7013      	strb	r3, [r2, #0]
    configTracker.config_update_active = 0;
 8004026:	4a06      	ldr	r2, [pc, #24]	@ (8004040 <ResetConfigTracker+0x28>)
 8004028:	7553      	strb	r3, [r2, #21]
    gatewayConfig.updated = 0;
 800402a:	4a06      	ldr	r2, [pc, #24]	@ (8004044 <ResetConfigTracker+0x2c>)
 800402c:	7313      	strb	r3, [r2, #12]
    gatewayConfig.broadcast_active = 0;
 800402e:	7353      	strb	r3, [r2, #13]

    // Keep node statuses as they are (0x01 for updated nodes)
    printf("*** Config tracking deactivated - returning to normal operation ***\n");
 8004030:	4805      	ldr	r0, [pc, #20]	@ (8004048 <ResetConfigTracker+0x30>)
 8004032:	f008 fb63 	bl	800c6fc <puts>
}
 8004036:	bd08      	pop	{r3, pc}
 8004038:	0800f9fc 	.word	0x0800f9fc
 800403c:	200011ba 	.word	0x200011ba
 8004040:	200011bc 	.word	0x200011bc
 8004044:	200000cc 	.word	0x200000cc
 8004048:	0800fa38 	.word	0x0800fa38

0800404c <InitializeNodeConfigTracker>:
static void InitializeNodeConfigTracker(void) {
 800404c:	b508      	push	{r3, lr}
    printf("*** InitConfigTracker: Event-driven config tracking system ***\n");
 800404e:	480c      	ldr	r0, [pc, #48]	@ (8004080 <InitializeNodeConfigTracker+0x34>)
 8004050:	f008 fb54 	bl	800c6fc <puts>
    for (uint8_t i = 0; i < MAX_SNODES; i++) {
 8004054:	2300      	movs	r3, #0
 8004056:	e004      	b.n	8004062 <InitializeNodeConfigTracker+0x16>
        configTracker.node_config_status[i] = 0x00;  // Start with default version
 8004058:	4a0a      	ldr	r2, [pc, #40]	@ (8004084 <InitializeNodeConfigTracker+0x38>)
 800405a:	2100      	movs	r1, #0
 800405c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < MAX_SNODES; i++) {
 800405e:	3301      	adds	r3, #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <InitializeNodeConfigTracker+0x3c>)
 8004064:	7812      	ldrb	r2, [r2, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d8f6      	bhi.n	8004058 <InitializeNodeConfigTracker+0xc>
    configTracker.expected_version = gatewayConfig.nodes_version;  // Use nodes_version for expected
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <InitializeNodeConfigTracker+0x40>)
 800406c:	7819      	ldrb	r1, [r3, #0]
 800406e:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <InitializeNodeConfigTracker+0x38>)
 8004070:	7519      	strb	r1, [r3, #20]
    configTracker.config_update_active = 0;  // No active config update
 8004072:	2200      	movs	r2, #0
 8004074:	755a      	strb	r2, [r3, #21]
    printf("*** Config tracker initialized: expected nodes_version %d, all nodes 0x00 ***\n",
 8004076:	4806      	ldr	r0, [pc, #24]	@ (8004090 <InitializeNodeConfigTracker+0x44>)
 8004078:	f008 fad0 	bl	800c61c <iprintf>
}
 800407c:	bd08      	pop	{r3, pc}
 800407e:	bf00      	nop
 8004080:	0800fa7c 	.word	0x0800fa7c
 8004084:	200011bc 	.word	0x200011bc
 8004088:	200000e0 	.word	0x200000e0
 800408c:	200000cc 	.word	0x200000cc
 8004090:	0800fabc 	.word	0x0800fabc

08004094 <UpdateGatewayBatchPeriod>:
static void UpdateGatewayBatchPeriod(uint8_t version, uint32_t batch_period_ms) {
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	4607      	mov	r7, r0
 8004098:	460c      	mov	r4, r1
           gatewayConfig.gateway_version, BATCH_PERIOD_MS);
 800409a:	4d0a      	ldr	r5, [pc, #40]	@ (80040c4 <UpdateGatewayBatchPeriod+0x30>)
    printf("*** UpdateGatewayBatchPeriod: Old gateway_version=%d, batch_period=%lu ms ***\n",
 800409c:	4e0a      	ldr	r6, [pc, #40]	@ (80040c8 <UpdateGatewayBatchPeriod+0x34>)
 800409e:	6832      	ldr	r2, [r6, #0]
 80040a0:	7869      	ldrb	r1, [r5, #1]
 80040a2:	480a      	ldr	r0, [pc, #40]	@ (80040cc <UpdateGatewayBatchPeriod+0x38>)
 80040a4:	f008 faba 	bl	800c61c <iprintf>
    gatewayConfig.gateway_version = version;  // Update gateway version
 80040a8:	706f      	strb	r7, [r5, #1]
    BATCH_PERIOD_MS = batch_period_ms;
 80040aa:	6034      	str	r4, [r6, #0]
    gatewayConfig.batch_period_ms = batch_period_ms;
 80040ac:	60ac      	str	r4, [r5, #8]
    UTIL_TIMER_SetPeriod(&phaseTimer, BATCH_PERIOD_MS);
 80040ae:	4621      	mov	r1, r4
 80040b0:	4807      	ldr	r0, [pc, #28]	@ (80040d0 <UpdateGatewayBatchPeriod+0x3c>)
 80040b2:	f007 fb51 	bl	800b758 <UTIL_TIMER_SetPeriod>
    printf("*** Gateway config updated: gateway_version=%d, batch_period=%lu ms ***\n",
 80040b6:	6832      	ldr	r2, [r6, #0]
 80040b8:	7869      	ldrb	r1, [r5, #1]
 80040ba:	4806      	ldr	r0, [pc, #24]	@ (80040d4 <UpdateGatewayBatchPeriod+0x40>)
 80040bc:	f008 faae 	bl	800c61c <iprintf>
}
 80040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200000cc 	.word	0x200000cc
 80040c8:	200000dc 	.word	0x200000dc
 80040cc:	0800fb0c 	.word	0x0800fb0c
 80040d0:	20003518 	.word	0x20003518
 80040d4:	0800fb5c 	.word	0x0800fb5c

080040d8 <SendDataToBroker>:
static void SendDataToBroker(void) {
 80040d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040dc:	b095      	sub	sp, #84	@ 0x54
    printf("*** SendDataToBroker: Sending %d packets to broker ***\n", packetCount);
 80040de:	4c9e      	ldr	r4, [pc, #632]	@ (8004358 <SendDataToBroker+0x280>)
 80040e0:	8821      	ldrh	r1, [r4, #0]
 80040e2:	489e      	ldr	r0, [pc, #632]	@ (800435c <SendDataToBroker+0x284>)
 80040e4:	f008 fa9a 	bl	800c61c <iprintf>
    if (packetCount == 0) {
 80040e8:	8823      	ldrh	r3, [r4, #0]
 80040ea:	b34b      	cbz	r3, 8004140 <SendDataToBroker+0x68>
    int batch_index = 0;
 80040ec:	2700      	movs	r7, #0
    int packets_sent = 0;
 80040ee:	46b8      	mov	r8, r7
    while (packets_sent < packetCount) {
 80040f0:	4b99      	ldr	r3, [pc, #612]	@ (8004358 <SendDataToBroker+0x280>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	4543      	cmp	r3, r8
 80040f6:	f340 812c 	ble.w	8004352 <SendDataToBroker+0x27a>
        int len = snprintf(jsonBuffer, sizeof(jsonBuffer),
 80040fa:	4b99      	ldr	r3, [pc, #612]	@ (8004360 <SendDataToBroker+0x288>)
 80040fc:	681c      	ldr	r4, [r3, #0]
 80040fe:	3401      	adds	r4, #1
 8004100:	601c      	str	r4, [r3, #0]
 8004102:	f7fe ffff 	bl	8003104 <HAL_GetTick>
            gatewayConfig.nodes_version,
 8004106:	4b97      	ldr	r3, [pc, #604]	@ (8004364 <SendDataToBroker+0x28c>)
 8004108:	781a      	ldrb	r2, [r3, #0]
            gatewayConfig.gateway_version,
 800410a:	785e      	ldrb	r6, [r3, #1]
        int len = snprintf(jsonBuffer, sizeof(jsonBuffer),
 800410c:	f107 0a01 	add.w	sl, r7, #1
 8004110:	9705      	str	r7, [sp, #20]
 8004112:	6899      	ldr	r1, [r3, #8]
 8004114:	9104      	str	r1, [sp, #16]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	9303      	str	r3, [sp, #12]
 800411a:	9602      	str	r6, [sp, #8]
 800411c:	9201      	str	r2, [sp, #4]
 800411e:	9000      	str	r0, [sp, #0]
 8004120:	4623      	mov	r3, r4
 8004122:	4a91      	ldr	r2, [pc, #580]	@ (8004368 <SendDataToBroker+0x290>)
 8004124:	f242 3128 	movw	r1, #9000	@ 0x2328
 8004128:	4890      	ldr	r0, [pc, #576]	@ (800436c <SendDataToBroker+0x294>)
 800412a:	f008 faef 	bl	800c70c <sniprintf>
 800412e:	4605      	mov	r5, r0
        for (int i = packets_sent; i < packetCount; i++) {
 8004130:	4644      	mov	r4, r8
        int first_in_batch = 1;
 8004132:	2201      	movs	r2, #1
 8004134:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8004138:	9712      	str	r7, [sp, #72]	@ 0x48
 800413a:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
        for (int i = packets_sent; i < packetCount; i++) {
 800413e:	e0aa      	b.n	8004296 <SendDataToBroker+0x1be>
        int len = snprintf(jsonBuffer, sizeof(jsonBuffer),
 8004140:	4b87      	ldr	r3, [pc, #540]	@ (8004360 <SendDataToBroker+0x288>)
 8004142:	681c      	ldr	r4, [r3, #0]
 8004144:	3401      	adds	r4, #1
 8004146:	601c      	str	r4, [r3, #0]
 8004148:	f7fe ffdc 	bl	8003104 <HAL_GetTick>
            gatewayConfig.nodes_version,
 800414c:	4b85      	ldr	r3, [pc, #532]	@ (8004364 <SendDataToBroker+0x28c>)
 800414e:	781a      	ldrb	r2, [r3, #0]
            gatewayConfig.gateway_version,
 8004150:	7859      	ldrb	r1, [r3, #1]
        int len = snprintf(jsonBuffer, sizeof(jsonBuffer),
 8004152:	4e86      	ldr	r6, [pc, #536]	@ (800436c <SendDataToBroker+0x294>)
 8004154:	689d      	ldr	r5, [r3, #8]
 8004156:	9504      	str	r5, [sp, #16]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	9303      	str	r3, [sp, #12]
 800415c:	9102      	str	r1, [sp, #8]
 800415e:	9201      	str	r2, [sp, #4]
 8004160:	9000      	str	r0, [sp, #0]
 8004162:	4623      	mov	r3, r4
 8004164:	4a82      	ldr	r2, [pc, #520]	@ (8004370 <SendDataToBroker+0x298>)
 8004166:	f242 3128 	movw	r1, #9000	@ 0x2328
 800416a:	4630      	mov	r0, r6
 800416c:	f008 face 	bl	800c70c <sniprintf>
 8004170:	4604      	mov	r4, r0
        memset(mqttPacketBuffer, 0, MQTT_DATA_PACKET_BUFF_SIZE);
 8004172:	4d80      	ldr	r5, [pc, #512]	@ (8004374 <SendDataToBroker+0x29c>)
 8004174:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8004178:	2100      	movs	r1, #0
 800417a:	4628      	mov	r0, r5
 800417c:	f008 fbf6 	bl	800c96c <memset>
        Wifi_MqttPubRaw2(mqttPacketBuffer, mqttConfig.pubtopic, len, jsonBuffer, QOS_0, RTN_0, POLLING_MODE);
 8004180:	2300      	movs	r3, #0
 8004182:	9302      	str	r3, [sp, #8]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	4633      	mov	r3, r6
 800418a:	b2a2      	uxth	r2, r4
 800418c:	497a      	ldr	r1, [pc, #488]	@ (8004378 <SendDataToBroker+0x2a0>)
 800418e:	4628      	mov	r0, r5
 8004190:	f7fe fbc4 	bl	800291c <Wifi_MqttPubRaw2>
        printf("*** Empty batch sent to broker ***\n");
 8004194:	4879      	ldr	r0, [pc, #484]	@ (800437c <SendDataToBroker+0x2a4>)
 8004196:	f008 fab1 	bl	800c6fc <puts>
        return;
 800419a:	e0da      	b.n	8004352 <SendDataToBroker+0x27a>
            int estimated_len = snprintf(NULL, 0,
 800419c:	4b78      	ldr	r3, [pc, #480]	@ (8004380 <SendDataToBroker+0x2a8>)
 800419e:	9310      	str	r3, [sp, #64]	@ 0x40
 80041a0:	1c63      	adds	r3, r4, #1
 80041a2:	930f      	str	r3, [sp, #60]	@ 0x3c
                packetBuffer[i].node_id,
 80041a4:	4a77      	ldr	r2, [pc, #476]	@ (8004384 <SendDataToBroker+0x2ac>)
 80041a6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80041aa:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 80041ae:	f812 2021 	ldrb.w	r2, [r2, r1, lsl #2]
                packetBuffer[i].td,
 80041b2:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
                packetBuffer[i].ta,
 80041b6:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
                packetBuffer[i].h,
 80041ba:	799e      	ldrb	r6, [r3, #6]
                packetBuffer[i].ax,
 80041bc:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
                packetBuffer[i].ay,
 80041c0:	f9b3 c00a 	ldrsh.w	ip, [r3, #10]
                packetBuffer[i].az,
 80041c4:	f9b3 e00c 	ldrsh.w	lr, [r3, #12]
                packetBuffer[i].battery_voltage,
 80041c8:	f8b3 800e 	ldrh.w	r8, [r3, #14]
                packetBuffer[i].config_version,
 80041cc:	f893 9010 	ldrb.w	r9, [r3, #16]
                packetBuffer[i].rssi,
 80041d0:	f9b3 a018 	ldrsh.w	sl, [r3, #24]
                packetBuffer[i].snr);
 80041d4:	f993 b01a 	ldrsb.w	fp, [r3, #26]
            int estimated_len = snprintf(NULL, 0,
 80041d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80041dc:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80041e4:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80041e8:	f8cd 8020 	str.w	r8, [sp, #32]
 80041ec:	f8cd e01c 	str.w	lr, [sp, #28]
 80041f0:	f8cd c018 	str.w	ip, [sp, #24]
 80041f4:	9705      	str	r7, [sp, #20]
 80041f6:	9604      	str	r6, [sp, #16]
 80041f8:	9003      	str	r0, [sp, #12]
 80041fa:	9102      	str	r1, [sp, #8]
 80041fc:	9201      	str	r2, [sp, #4]
 80041fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004204:	4a60      	ldr	r2, [pc, #384]	@ (8004388 <SendDataToBroker+0x2b0>)
 8004206:	2100      	movs	r1, #0
 8004208:	4608      	mov	r0, r1
 800420a:	f008 fa7f 	bl	800c70c <sniprintf>
            if (len + estimated_len + 10 >= sizeof(jsonBuffer)) { // +10 kapanış için pay
 800420e:	4428      	add	r0, r5
 8004210:	300a      	adds	r0, #10
 8004212:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004216:	4298      	cmp	r0, r3
 8004218:	d847      	bhi.n	80042aa <SendDataToBroker+0x1d2>
                packetBuffer[i].node_id,
 800421a:	4a5a      	ldr	r2, [pc, #360]	@ (8004384 <SendDataToBroker+0x2ac>)
 800421c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8004220:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8004224:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                packetBuffer[i].td,
 8004228:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                packetBuffer[i].ta,
 800422c:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
                packetBuffer[i].h,
 8004230:	799f      	ldrb	r7, [r3, #6]
                packetBuffer[i].ax,
 8004232:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
                packetBuffer[i].ay,
 8004236:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
                packetBuffer[i].az,
 800423a:	f9b3 800c 	ldrsh.w	r8, [r3, #12]
                packetBuffer[i].battery_voltage,
 800423e:	f8b3 900e 	ldrh.w	r9, [r3, #14]
                packetBuffer[i].config_version,
 8004242:	f893 a010 	ldrb.w	sl, [r3, #16]
                packetBuffer[i].rssi,
 8004246:	f9b3 b018 	ldrsh.w	fp, [r3, #24]
                packetBuffer[i].snr);
 800424a:	f993 301a 	ldrsb.w	r3, [r3, #26]
            len += snprintf(jsonBuffer + len, sizeof(jsonBuffer) - len,
 800424e:	930c      	str	r3, [sp, #48]	@ 0x30
 8004250:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8004254:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004258:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800425c:	6953      	ldr	r3, [r2, #20]
 800425e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004260:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8004264:	f8cd 9020 	str.w	r9, [sp, #32]
 8004268:	f8cd 801c 	str.w	r8, [sp, #28]
 800426c:	f8cd e018 	str.w	lr, [sp, #24]
 8004270:	f8cd c014 	str.w	ip, [sp, #20]
 8004274:	9704      	str	r7, [sp, #16]
 8004276:	9603      	str	r6, [sp, #12]
 8004278:	9002      	str	r0, [sp, #8]
 800427a:	9101      	str	r1, [sp, #4]
 800427c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800427e:	9400      	str	r4, [sp, #0]
 8004280:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004282:	4a41      	ldr	r2, [pc, #260]	@ (8004388 <SendDataToBroker+0x2b0>)
 8004284:	f5c5 510c 	rsb	r1, r5, #8960	@ 0x2300
 8004288:	3128      	adds	r1, #40	@ 0x28
 800428a:	4838      	ldr	r0, [pc, #224]	@ (800436c <SendDataToBroker+0x294>)
 800428c:	4428      	add	r0, r5
 800428e:	f008 fa3d 	bl	800c70c <sniprintf>
 8004292:	4405      	add	r5, r0
            first_in_batch = 0;
 8004294:	2200      	movs	r2, #0
        for (int i = packets_sent; i < packetCount; i++) {
 8004296:	4b30      	ldr	r3, [pc, #192]	@ (8004358 <SendDataToBroker+0x280>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	42a3      	cmp	r3, r4
 800429c:	dd33      	ble.n	8004306 <SendDataToBroker+0x22e>
            int estimated_len = snprintf(NULL, 0,
 800429e:	2a00      	cmp	r2, #0
 80042a0:	f43f af7c 	beq.w	800419c <SendDataToBroker+0xc4>
 80042a4:	4b39      	ldr	r3, [pc, #228]	@ (800438c <SendDataToBroker+0x2b4>)
 80042a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80042a8:	e77a      	b.n	80041a0 <SendDataToBroker+0xc8>
                len += snprintf(jsonBuffer + len, sizeof(jsonBuffer) - len, "\n  ]\n}");
 80042aa:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80042ae:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80042b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80042b4:	4e2d      	ldr	r6, [pc, #180]	@ (800436c <SendDataToBroker+0x294>)
 80042b6:	4a36      	ldr	r2, [pc, #216]	@ (8004390 <SendDataToBroker+0x2b8>)
 80042b8:	f5c5 510c 	rsb	r1, r5, #8960	@ 0x2300
 80042bc:	3128      	adds	r1, #40	@ 0x28
 80042be:	1970      	adds	r0, r6, r5
 80042c0:	f008 fa24 	bl	800c70c <sniprintf>
 80042c4:	eb05 0900 	add.w	r9, r5, r0
                memset(mqttPacketBuffer, 0, MQTT_DATA_PACKET_BUFF_SIZE);
 80042c8:	4d2a      	ldr	r5, [pc, #168]	@ (8004374 <SendDataToBroker+0x29c>)
 80042ca:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80042ce:	2100      	movs	r1, #0
 80042d0:	4628      	mov	r0, r5
 80042d2:	f008 fb4b 	bl	800c96c <memset>
                Wifi_MqttPubRaw2(mqttPacketBuffer, mqttConfig.pubtopic, len, jsonBuffer, QOS_0, RTN_0, POLLING_MODE);
 80042d6:	2300      	movs	r3, #0
 80042d8:	9302      	str	r3, [sp, #8]
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	4633      	mov	r3, r6
 80042e0:	fa1f f289 	uxth.w	r2, r9
 80042e4:	4924      	ldr	r1, [pc, #144]	@ (8004378 <SendDataToBroker+0x2a0>)
 80042e6:	4628      	mov	r0, r5
 80042e8:	f7fe fb18 	bl	800291c <Wifi_MqttPubRaw2>
                printf("*** Batch %d sent: %d packets (%d/%d total) ***\n",
 80042ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <SendDataToBroker+0x280>)
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	4623      	mov	r3, r4
 80042f4:	eba4 0208 	sub.w	r2, r4, r8
 80042f8:	4639      	mov	r1, r7
 80042fa:	4826      	ldr	r0, [pc, #152]	@ (8004394 <SendDataToBroker+0x2bc>)
 80042fc:	f008 f98e 	bl	800c61c <iprintf>
        int len = snprintf(jsonBuffer, sizeof(jsonBuffer),
 8004300:	4657      	mov	r7, sl
                packets_sent = i;
 8004302:	46a0      	mov	r8, r4
 8004304:	e6f4      	b.n	80040f0 <SendDataToBroker+0x18>
        len += snprintf(jsonBuffer + len, sizeof(jsonBuffer) - len, "\n  ]\n}");
 8004306:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800430a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800430c:	4e17      	ldr	r6, [pc, #92]	@ (800436c <SendDataToBroker+0x294>)
 800430e:	4a20      	ldr	r2, [pc, #128]	@ (8004390 <SendDataToBroker+0x2b8>)
 8004310:	f5c5 510c 	rsb	r1, r5, #8960	@ 0x2300
 8004314:	3128      	adds	r1, #40	@ 0x28
 8004316:	1970      	adds	r0, r6, r5
 8004318:	f008 f9f8 	bl	800c70c <sniprintf>
 800431c:	182c      	adds	r4, r5, r0
        memset(mqttPacketBuffer, 0, MQTT_DATA_PACKET_BUFF_SIZE);
 800431e:	4d15      	ldr	r5, [pc, #84]	@ (8004374 <SendDataToBroker+0x29c>)
 8004320:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8004324:	2100      	movs	r1, #0
 8004326:	4628      	mov	r0, r5
 8004328:	f008 fb20 	bl	800c96c <memset>
        Wifi_MqttPubRaw2(mqttPacketBuffer, mqttConfig.pubtopic, len, jsonBuffer, QOS_0, RTN_0, POLLING_MODE);
 800432c:	2300      	movs	r3, #0
 800432e:	9302      	str	r3, [sp, #8]
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	4633      	mov	r3, r6
 8004336:	b2a2      	uxth	r2, r4
 8004338:	490f      	ldr	r1, [pc, #60]	@ (8004378 <SendDataToBroker+0x2a0>)
 800433a:	4628      	mov	r0, r5
 800433c:	f7fe faee 	bl	800291c <Wifi_MqttPubRaw2>
        printf("*** Batch %d sent: %d packets (%d/%d total) ***\n",
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <SendDataToBroker+0x280>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	eba3 0208 	sub.w	r2, r3, r8
 800434a:	4639      	mov	r1, r7
 800434c:	4811      	ldr	r0, [pc, #68]	@ (8004394 <SendDataToBroker+0x2bc>)
 800434e:	f008 f965 	bl	800c61c <iprintf>
}
 8004352:	b015      	add	sp, #84	@ 0x54
 8004354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004358:	20003530 	.word	0x20003530
 800435c:	0800fbac 	.word	0x0800fbac
 8004360:	200034fc 	.word	0x200034fc
 8004364:	200000cc 	.word	0x200000cc
 8004368:	0800fcd0 	.word	0x0800fcd0
 800436c:	200011d4 	.word	0x200011d4
 8004370:	0800fbe4 	.word	0x0800fbe4
 8004374:	200005ac 	.word	0x200005ac
 8004378:	2000006e 	.word	0x2000006e
 800437c:	0800fcac 	.word	0x0800fcac
 8004380:	0800fba8 	.word	0x0800fba8
 8004384:	20003534 	.word	0x20003534
 8004388:	0800fda8 	.word	0x0800fda8
 800438c:	0800f040 	.word	0x0800f040
 8004390:	0800fe5c 	.word	0x0800fe5c
 8004394:	0800fe64 	.word	0x0800fe64

08004398 <SubghzApp_Init>:
{
 8004398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439c:	b08a      	sub	sp, #40	@ 0x28
	APP_LOG(TS_OFF, VLEVEL_M, "\n\rLORA GATEWAY\n\r");
 800439e:	4b46      	ldr	r3, [pc, #280]	@ (80044b8 <SubghzApp_Init+0x120>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	4611      	mov	r1, r2
 80043a4:	2002      	movs	r0, #2
 80043a6:	f006 fe87 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80043aa:	2501      	movs	r5, #1
 80043ac:	9502      	str	r5, [sp, #8]
 80043ae:	2403      	movs	r4, #3
 80043b0:	9401      	str	r4, [sp, #4]
 80043b2:	9500      	str	r5, [sp, #0]
 80043b4:	4b41      	ldr	r3, [pc, #260]	@ (80044bc <SubghzApp_Init+0x124>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	4611      	mov	r1, r2
 80043ba:	2002      	movs	r0, #2
 80043bc:	f006 fe7c 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80043c0:	9502      	str	r5, [sp, #8]
 80043c2:	9401      	str	r4, [sp, #4]
 80043c4:	9500      	str	r5, [sp, #0]
 80043c6:	4b3e      	ldr	r3, [pc, #248]	@ (80044c0 <SubghzApp_Init+0x128>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	4611      	mov	r1, r2
 80043cc:	2002      	movs	r0, #2
 80043ce:	f006 fe73 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent,
 80043d2:	4e3c      	ldr	r6, [pc, #240]	@ (80044c4 <SubghzApp_Init+0x12c>)
 80043d4:	2400      	movs	r4, #0
 80043d6:	9400      	str	r4, [sp, #0]
 80043d8:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <SubghzApp_Init+0x130>)
 80043da:	4622      	mov	r2, r4
 80043dc:	21c8      	movs	r1, #200	@ 0xc8
 80043de:	4630      	mov	r0, r6
 80043e0:	f007 f8bc 	bl	800b55c <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerLed);
 80043e4:	4630      	mov	r0, r6
 80043e6:	f007 f971 	bl	800b6cc <UTIL_TIMER_Start>
  RadioEvents.TxDone = OnTxDone;
 80043ea:	4838      	ldr	r0, [pc, #224]	@ (80044cc <SubghzApp_Init+0x134>)
 80043ec:	4b38      	ldr	r3, [pc, #224]	@ (80044d0 <SubghzApp_Init+0x138>)
 80043ee:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 80043f0:	4b38      	ldr	r3, [pc, #224]	@ (80044d4 <SubghzApp_Init+0x13c>)
 80043f2:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80043f4:	4b38      	ldr	r3, [pc, #224]	@ (80044d8 <SubghzApp_Init+0x140>)
 80043f6:	6043      	str	r3, [r0, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80043f8:	4b38      	ldr	r3, [pc, #224]	@ (80044dc <SubghzApp_Init+0x144>)
 80043fa:	60c3      	str	r3, [r0, #12]
  RadioEvents.RxError = OnRxError;
 80043fc:	4b38      	ldr	r3, [pc, #224]	@ (80044e0 <SubghzApp_Init+0x148>)
 80043fe:	6103      	str	r3, [r0, #16]
  Radio.Init(&RadioEvents);
 8004400:	4e38      	ldr	r6, [pc, #224]	@ (80044e4 <SubghzApp_Init+0x14c>)
 8004402:	6833      	ldr	r3, [r6, #0]
 8004404:	4798      	blx	r3
	Radio.SetChannel(RF_FREQUENCY);
 8004406:	68f3      	ldr	r3, [r6, #12]
 8004408:	4837      	ldr	r0, [pc, #220]	@ (80044e8 <SubghzApp_Init+0x150>)
 800440a:	4798      	blx	r3
	APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800440c:	4b37      	ldr	r3, [pc, #220]	@ (80044ec <SubghzApp_Init+0x154>)
 800440e:	4622      	mov	r2, r4
 8004410:	4621      	mov	r1, r4
 8004412:	2002      	movs	r0, #2
 8004414:	f006 fe50 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 8004418:	4b35      	ldr	r3, [pc, #212]	@ (80044f0 <SubghzApp_Init+0x158>)
 800441a:	4622      	mov	r2, r4
 800441c:	4621      	mov	r1, r4
 800441e:	2002      	movs	r0, #2
 8004420:	f006 fe4a 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8004424:	237d      	movs	r3, #125	@ 0x7d
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4b32      	ldr	r3, [pc, #200]	@ (80044f4 <SubghzApp_Init+0x15c>)
 800442a:	4622      	mov	r2, r4
 800442c:	4621      	mov	r1, r4
 800442e:	2002      	movs	r0, #2
 8004430:	f006 fe42 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8004434:	2707      	movs	r7, #7
 8004436:	9700      	str	r7, [sp, #0]
 8004438:	4b2f      	ldr	r3, [pc, #188]	@ (80044f8 <SubghzApp_Init+0x160>)
 800443a:	4622      	mov	r2, r4
 800443c:	4621      	mov	r1, r4
 800443e:	2002      	movs	r0, #2
 8004440:	f006 fe3a 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8004444:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004448:	9308      	str	r3, [sp, #32]
 800444a:	9407      	str	r4, [sp, #28]
 800444c:	9406      	str	r4, [sp, #24]
 800444e:	9405      	str	r4, [sp, #20]
 8004450:	9504      	str	r5, [sp, #16]
 8004452:	9403      	str	r4, [sp, #12]
 8004454:	f04f 0808 	mov.w	r8, #8
 8004458:	f8cd 8008 	str.w	r8, [sp, #8]
 800445c:	9501      	str	r5, [sp, #4]
 800445e:	9700      	str	r7, [sp, #0]
 8004460:	4623      	mov	r3, r4
 8004462:	4622      	mov	r2, r4
 8004464:	210e      	movs	r1, #14
 8004466:	4628      	mov	r0, r5
 8004468:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 800446c:	47e0      	blx	ip
	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800446e:	9509      	str	r5, [sp, #36]	@ 0x24
 8004470:	9408      	str	r4, [sp, #32]
 8004472:	9407      	str	r4, [sp, #28]
 8004474:	9406      	str	r4, [sp, #24]
 8004476:	9505      	str	r5, [sp, #20]
 8004478:	9404      	str	r4, [sp, #16]
 800447a:	9403      	str	r4, [sp, #12]
 800447c:	2305      	movs	r3, #5
 800447e:	9302      	str	r3, [sp, #8]
 8004480:	f8cd 8004 	str.w	r8, [sp, #4]
 8004484:	9400      	str	r4, [sp, #0]
 8004486:	462b      	mov	r3, r5
 8004488:	463a      	mov	r2, r7
 800448a:	4621      	mov	r1, r4
 800448c:	4628      	mov	r0, r5
 800448e:	69b7      	ldr	r7, [r6, #24]
 8004490:	47b8      	blx	r7
	Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8004492:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004494:	21ff      	movs	r1, #255	@ 0xff
 8004496:	4628      	mov	r0, r5
 8004498:	4798      	blx	r3
	memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800449a:	22ff      	movs	r2, #255	@ 0xff
 800449c:	4621      	mov	r1, r4
 800449e:	4817      	ldr	r0, [pc, #92]	@ (80044fc <SubghzApp_Init+0x164>)
 80044a0:	f008 fa64 	bl	800c96c <memset>
	APP_LOG(TS_ON, VLEVEL_L, "LoRa Gateway Radio initialized - Waiting for MQTT connection\n\r");
 80044a4:	4b16      	ldr	r3, [pc, #88]	@ (8004500 <SubghzApp_Init+0x168>)
 80044a6:	462a      	mov	r2, r5
 80044a8:	4621      	mov	r1, r4
 80044aa:	4628      	mov	r0, r5
 80044ac:	f006 fe04 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80044b0:	b00a      	add	sp, #40	@ 0x28
 80044b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b6:	bf00      	nop
 80044b8:	0800fe98 	.word	0x0800fe98
 80044bc:	0800feac 	.word	0x0800feac
 80044c0:	0800fed0 	.word	0x0800fed0
 80044c4:	20005604 	.word	0x20005604
 80044c8:	08003ec9 	.word	0x08003ec9
 80044cc:	20005820 	.word	0x20005820
 80044d0:	08003af9 	.word	0x08003af9
 80044d4:	08003be9 	.word	0x08003be9
 80044d8:	08003ad1 	.word	0x08003ad1
 80044dc:	08003aad 	.word	0x08003aad
 80044e0:	08003a85 	.word	0x08003a85
 80044e4:	08010b80 	.word	0x08010b80
 80044e8:	33bca100 	.word	0x33bca100
 80044ec:	0800fef4 	.word	0x0800fef4
 80044f0:	0800ff08 	.word	0x0800ff08
 80044f4:	0800ff1c 	.word	0x0800ff1c
 80044f8:	0800ff30 	.word	0x0800ff30
 80044fc:	20005620 	.word	0x20005620
 8004500:	0800ff40 	.word	0x0800ff40

08004504 <StartLoRaGateway>:
void StartLoRaGateway(void) {
 8004504:	b530      	push	{r4, r5, lr}
 8004506:	b083      	sub	sp, #12
	APP_LOG(TS_ON, VLEVEL_L, "Starting LoRa Gateway with 4-phase cycle\n\r");
 8004508:	4b24      	ldr	r3, [pc, #144]	@ (800459c <StartLoRaGateway+0x98>)
 800450a:	2201      	movs	r2, #1
 800450c:	2100      	movs	r1, #0
 800450e:	4610      	mov	r0, r2
 8004510:	f006 fdd2 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	packetCount = 0;
 8004514:	2400      	movs	r4, #0
 8004516:	4b22      	ldr	r3, [pc, #136]	@ (80045a0 <StartLoRaGateway+0x9c>)
 8004518:	801c      	strh	r4, [r3, #0]
	memset(packetBuffer, 0, sizeof(packetBuffer));
 800451a:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 800451e:	4621      	mov	r1, r4
 8004520:	4820      	ldr	r0, [pc, #128]	@ (80045a4 <StartLoRaGateway+0xa0>)
 8004522:	f008 fa23 	bl	800c96c <memset>
	printf("*** Packet buffer initialized: packetCount = %d ***\n", packetCount);
 8004526:	4621      	mov	r1, r4
 8004528:	481f      	ldr	r0, [pc, #124]	@ (80045a8 <StartLoRaGateway+0xa4>)
 800452a:	f008 f877 	bl	800c61c <iprintf>
	currentPhase = PHASE_LISTENING;
 800452e:	4b1f      	ldr	r3, [pc, #124]	@ (80045ac <StartLoRaGateway+0xa8>)
 8004530:	701c      	strb	r4, [r3, #0]
	gatewayConfig.broadcast_active = 0;
 8004532:	4b1f      	ldr	r3, [pc, #124]	@ (80045b0 <StartLoRaGateway+0xac>)
 8004534:	735c      	strb	r4, [r3, #13]
	UTIL_TIMER_Create(&phaseTimer, INITIAL_SEND_DELAY_MS, UTIL_TIMER_ONESHOT, GatewayPhaseHandler, NULL);
 8004536:	4d1f      	ldr	r5, [pc, #124]	@ (80045b4 <StartLoRaGateway+0xb0>)
 8004538:	9400      	str	r4, [sp, #0]
 800453a:	4b1f      	ldr	r3, [pc, #124]	@ (80045b8 <StartLoRaGateway+0xb4>)
 800453c:	4622      	mov	r2, r4
 800453e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004542:	4628      	mov	r0, r5
 8004544:	f007 f80a 	bl	800b55c <UTIL_TIMER_Create>
	UTIL_TIMER_Create(&configBroadcastTimer, 2000, UTIL_TIMER_ONESHOT, ConfigBroadcastHandler, NULL);
 8004548:	9400      	str	r4, [sp, #0]
 800454a:	4b1c      	ldr	r3, [pc, #112]	@ (80045bc <StartLoRaGateway+0xb8>)
 800454c:	4622      	mov	r2, r4
 800454e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8004552:	481b      	ldr	r0, [pc, #108]	@ (80045c0 <StartLoRaGateway+0xbc>)
 8004554:	f007 f802 	bl	800b55c <UTIL_TIMER_Create>
	InitializeNodeConfigTracker();
 8004558:	f7ff fd78 	bl	800404c <InitializeNodeConfigTracker>
	UTIL_TIMER_Start(&phaseTimer);
 800455c:	4628      	mov	r0, r5
 800455e:	f007 f8b5 	bl	800b6cc <UTIL_TIMER_Start>
	printf("*** PHASE TIMER STARTED - First send in 5s, then 60s intervals ***\n");
 8004562:	4818      	ldr	r0, [pc, #96]	@ (80045c4 <StartLoRaGateway+0xc0>)
 8004564:	f008 f8ca 	bl	800c6fc <puts>
	APP_LOG(TS_ON, VLEVEL_L, "Gateway phase timer started - Phase: LISTENING\n\r");
 8004568:	4b17      	ldr	r3, [pc, #92]	@ (80045c8 <StartLoRaGateway+0xc4>)
 800456a:	2201      	movs	r2, #1
 800456c:	4621      	mov	r1, r4
 800456e:	4610      	mov	r0, r2
 8004570:	f006 fda2 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU,
 8004574:	4a15      	ldr	r2, [pc, #84]	@ (80045cc <StartLoRaGateway+0xc8>)
 8004576:	4621      	mov	r1, r4
 8004578:	2001      	movs	r0, #1
 800457a:	f006 ff91 	bl	800b4a0 <UTIL_SEQ_RegTask>
	APP_LOG(TS_ON, VLEVEL_L, "Starting Gateway RX mode - Phase: LISTENING\n\r");
 800457e:	4b14      	ldr	r3, [pc, #80]	@ (80045d0 <StartLoRaGateway+0xcc>)
 8004580:	2201      	movs	r2, #1
 8004582:	4621      	mov	r1, r4
 8004584:	4610      	mov	r0, r2
 8004586:	f006 fd97 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
	LoRaState = RX;
 800458a:	4b12      	ldr	r3, [pc, #72]	@ (80045d4 <StartLoRaGateway+0xd0>)
 800458c:	701c      	strb	r4, [r3, #0]
	Radio.Rx(RX_TIMEOUT_VALUE);
 800458e:	4b12      	ldr	r3, [pc, #72]	@ (80045d8 <StartLoRaGateway+0xd4>)
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8004596:	4798      	blx	r3
}
 8004598:	b003      	add	sp, #12
 800459a:	bd30      	pop	{r4, r5, pc}
 800459c:	0800ff80 	.word	0x0800ff80
 80045a0:	20003530 	.word	0x20003530
 80045a4:	20003534 	.word	0x20003534
 80045a8:	0800ffac 	.word	0x0800ffac
 80045ac:	200011ba 	.word	0x200011ba
 80045b0:	200000cc 	.word	0x200000cc
 80045b4:	20003518 	.word	0x20003518
 80045b8:	08004abd 	.word	0x08004abd
 80045bc:	08003f65 	.word	0x08003f65
 80045c0:	20003500 	.word	0x20003500
 80045c4:	0800ffe4 	.word	0x0800ffe4
 80045c8:	08010028 	.word	0x08010028
 80045cc:	080039a1 	.word	0x080039a1
 80045d0:	0801005c 	.word	0x0801005c
 80045d4:	2000581f 	.word	0x2000581f
 80045d8:	08010b80 	.word	0x08010b80

080045dc <ParseConfigMessage>:
void ParseConfigMessage(const char* message) {
 80045dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e0:	b086      	sub	sp, #24
 80045e2:	4604      	mov	r4, r0
    printf("*** ENTERED ParseConfigMessage FUNCTION ***\n");
 80045e4:	48a4      	ldr	r0, [pc, #656]	@ (8004878 <ParseConfigMessage+0x29c>)
 80045e6:	f008 f889 	bl	800c6fc <puts>
    if (!message) {
 80045ea:	b1cc      	cbz	r4, 8004620 <ParseConfigMessage+0x44>
    printf("*** ParseConfigMessage: Processing: [%s] (len=%zu) ***\n", message, strlen(message));
 80045ec:	4620      	mov	r0, r4
 80045ee:	f7fb fe17 	bl	8000220 <strlen>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4621      	mov	r1, r4
 80045f6:	48a1      	ldr	r0, [pc, #644]	@ (800487c <ParseConfigMessage+0x2a0>)
 80045f8:	f008 f810 	bl	800c61c <iprintf>
    if (strstr(message, "\"type\"")) {
 80045fc:	49a0      	ldr	r1, [pc, #640]	@ (8004880 <ParseConfigMessage+0x2a4>)
 80045fe:	4620      	mov	r0, r4
 8004600:	f008 f9f2 	bl	800c9e8 <strstr>
 8004604:	2800      	cmp	r0, #0
 8004606:	f000 80c5 	beq.w	8004794 <ParseConfigMessage+0x1b8>
        printf("*** Found JSON type field ***\n");
 800460a:	489e      	ldr	r0, [pc, #632]	@ (8004884 <ParseConfigMessage+0x2a8>)
 800460c:	f008 f876 	bl	800c6fc <puts>
        char* type_ptr = strstr(message, "\"type\":");
 8004610:	499d      	ldr	r1, [pc, #628]	@ (8004888 <ParseConfigMessage+0x2ac>)
 8004612:	4620      	mov	r0, r4
 8004614:	f008 f9e8 	bl	800c9e8 <strstr>
        if (type_ptr) {
 8004618:	2800      	cmp	r0, #0
 800461a:	d040      	beq.n	800469e <ParseConfigMessage+0xc2>
            type_ptr += 7; // Skip "type":
 800461c:	3007      	adds	r0, #7
            while (*type_ptr == ' ' || *type_ptr == ':') type_ptr++; // Skip whitespace and :
 800461e:	e004      	b.n	800462a <ParseConfigMessage+0x4e>
        printf("*** ParseConfigMessage: NULL message received ***\n");
 8004620:	489a      	ldr	r0, [pc, #616]	@ (800488c <ParseConfigMessage+0x2b0>)
 8004622:	f008 f86b 	bl	800c6fc <puts>
        return;
 8004626:	e0c0      	b.n	80047aa <ParseConfigMessage+0x1ce>
            while (*type_ptr == ' ' || *type_ptr == ':') type_ptr++; // Skip whitespace and :
 8004628:	3001      	adds	r0, #1
 800462a:	7803      	ldrb	r3, [r0, #0]
 800462c:	2b20      	cmp	r3, #32
 800462e:	d0fb      	beq.n	8004628 <ParseConfigMessage+0x4c>
 8004630:	2b3a      	cmp	r3, #58	@ 0x3a
 8004632:	d0f9      	beq.n	8004628 <ParseConfigMessage+0x4c>
            config_type = (uint16_t)atoi(type_ptr);
 8004634:	f007 fa52 	bl	800badc <atoi>
 8004638:	b287      	uxth	r7, r0
            printf("*** Type parsed: %d ***\n", config_type);
 800463a:	4639      	mov	r1, r7
 800463c:	4894      	ldr	r0, [pc, #592]	@ (8004890 <ParseConfigMessage+0x2b4>)
 800463e:	f007 ffed 	bl	800c61c <iprintf>
        char* version_ptr = strstr(message, "\"version\":");
 8004642:	4994      	ldr	r1, [pc, #592]	@ (8004894 <ParseConfigMessage+0x2b8>)
 8004644:	4620      	mov	r0, r4
 8004646:	f008 f9cf 	bl	800c9e8 <strstr>
 800464a:	4606      	mov	r6, r0
        char* period_ptr = strstr(message, "\"period\":");
 800464c:	4992      	ldr	r1, [pc, #584]	@ (8004898 <ParseConfigMessage+0x2bc>)
 800464e:	4620      	mov	r0, r4
 8004650:	f008 f9ca 	bl	800c9e8 <strstr>
 8004654:	4605      	mov	r5, r0
        char* node_numbers_ptr = strstr(message, "\"Node_Numbers\":");
 8004656:	4991      	ldr	r1, [pc, #580]	@ (800489c <ParseConfigMessage+0x2c0>)
 8004658:	4620      	mov	r0, r4
 800465a:	f008 f9c5 	bl	800c9e8 <strstr>
 800465e:	4604      	mov	r4, r0
        printf("*** version_ptr found: %s ***\n", version_ptr ? "YES" : "NO");
 8004660:	b1fe      	cbz	r6, 80046a2 <ParseConfigMessage+0xc6>
 8004662:	498f      	ldr	r1, [pc, #572]	@ (80048a0 <ParseConfigMessage+0x2c4>)
 8004664:	488f      	ldr	r0, [pc, #572]	@ (80048a4 <ParseConfigMessage+0x2c8>)
 8004666:	f007 ffd9 	bl	800c61c <iprintf>
        printf("*** period_ptr found: %s ***\n", period_ptr ? "YES" : "NO");
 800466a:	b1e5      	cbz	r5, 80046a6 <ParseConfigMessage+0xca>
 800466c:	498c      	ldr	r1, [pc, #560]	@ (80048a0 <ParseConfigMessage+0x2c4>)
 800466e:	488e      	ldr	r0, [pc, #568]	@ (80048a8 <ParseConfigMessage+0x2cc>)
 8004670:	f007 ffd4 	bl	800c61c <iprintf>
        printf("*** node_numbers_ptr found: %s ***\n", node_numbers_ptr ? "YES" : "NO");
 8004674:	b1cc      	cbz	r4, 80046aa <ParseConfigMessage+0xce>
 8004676:	498a      	ldr	r1, [pc, #552]	@ (80048a0 <ParseConfigMessage+0x2c4>)
 8004678:	488c      	ldr	r0, [pc, #560]	@ (80048ac <ParseConfigMessage+0x2d0>)
 800467a:	f007 ffcf 	bl	800c61c <iprintf>
        if (config_type == 163 && node_numbers_ptr) {
 800467e:	2fa3      	cmp	r7, #163	@ 0xa3
 8004680:	d015      	beq.n	80046ae <ParseConfigMessage+0xd2>
        if (version_ptr && period_ptr && (config_type == 161 || config_type == 162)) {
 8004682:	2e00      	cmp	r6, #0
 8004684:	f000 80e6 	beq.w	8004854 <ParseConfigMessage+0x278>
 8004688:	2d00      	cmp	r5, #0
 800468a:	f000 80e6 	beq.w	800485a <ParseConfigMessage+0x27e>
 800468e:	f1a7 03a1 	sub.w	r3, r7, #161	@ 0xa1
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d935      	bls.n	8004704 <ParseConfigMessage+0x128>
    uint32_t config_period = 0;
 8004698:	2400      	movs	r4, #0
    uint8_t config_version = 0;
 800469a:	4626      	mov	r6, r4
 800469c:	e083      	b.n	80047a6 <ParseConfigMessage+0x1ca>
    uint16_t config_type = 0;
 800469e:	2700      	movs	r7, #0
 80046a0:	e7cf      	b.n	8004642 <ParseConfigMessage+0x66>
        printf("*** version_ptr found: %s ***\n", version_ptr ? "YES" : "NO");
 80046a2:	4983      	ldr	r1, [pc, #524]	@ (80048b0 <ParseConfigMessage+0x2d4>)
 80046a4:	e7de      	b.n	8004664 <ParseConfigMessage+0x88>
        printf("*** period_ptr found: %s ***\n", period_ptr ? "YES" : "NO");
 80046a6:	4982      	ldr	r1, [pc, #520]	@ (80048b0 <ParseConfigMessage+0x2d4>)
 80046a8:	e7e1      	b.n	800466e <ParseConfigMessage+0x92>
        printf("*** node_numbers_ptr found: %s ***\n", node_numbers_ptr ? "YES" : "NO");
 80046aa:	4981      	ldr	r1, [pc, #516]	@ (80048b0 <ParseConfigMessage+0x2d4>)
 80046ac:	e7e4      	b.n	8004678 <ParseConfigMessage+0x9c>
        if (config_type == 163 && node_numbers_ptr) {
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d0e7      	beq.n	8004682 <ParseConfigMessage+0xa6>
            node_numbers_ptr += 15; // Skip "Node_Numbers":
 80046b2:	f104 000f 	add.w	r0, r4, #15
            while (*node_numbers_ptr == ' ' || *node_numbers_ptr == ':') node_numbers_ptr++; // Skip whitespace and :
 80046b6:	e000      	b.n	80046ba <ParseConfigMessage+0xde>
 80046b8:	3001      	adds	r0, #1
 80046ba:	7803      	ldrb	r3, [r0, #0]
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d0fb      	beq.n	80046b8 <ParseConfigMessage+0xdc>
 80046c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80046c2:	d0f9      	beq.n	80046b8 <ParseConfigMessage+0xdc>
            uint8_t new_max_nodes = (uint8_t)atoi(node_numbers_ptr);
 80046c4:	f007 fa0a 	bl	800badc <atoi>
 80046c8:	b2c5      	uxtb	r5, r0
            if (new_max_nodes > 0 && new_max_nodes <= 20) { // Reasonable limit
 80046ca:	1e6b      	subs	r3, r5, #1
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b13      	cmp	r3, #19
 80046d0:	d813      	bhi.n	80046fa <ParseConfigMessage+0x11e>
                printf("*** Updating MAX_SNODES: %d -> %d ***\n", MAX_SNODES, new_max_nodes);
 80046d2:	4e78      	ldr	r6, [pc, #480]	@ (80048b4 <ParseConfigMessage+0x2d8>)
 80046d4:	462a      	mov	r2, r5
 80046d6:	7831      	ldrb	r1, [r6, #0]
 80046d8:	4877      	ldr	r0, [pc, #476]	@ (80048b8 <ParseConfigMessage+0x2dc>)
 80046da:	f007 ff9f 	bl	800c61c <iprintf>
                MAX_SNODES = new_max_nodes;
 80046de:	7035      	strb	r5, [r6, #0]
                memset(&configTracker, 0, sizeof(configTracker));
 80046e0:	4b76      	ldr	r3, [pc, #472]	@ (80048bc <ParseConfigMessage+0x2e0>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	609a      	str	r2, [r3, #8]
 80046ea:	60da      	str	r2, [r3, #12]
 80046ec:	611a      	str	r2, [r3, #16]
 80046ee:	829a      	strh	r2, [r3, #20]
                printf("*** MAX_SNODES successfully updated to %d ***\n", MAX_SNODES);
 80046f0:	4629      	mov	r1, r5
 80046f2:	4873      	ldr	r0, [pc, #460]	@ (80048c0 <ParseConfigMessage+0x2e4>)
 80046f4:	f007 ff92 	bl	800c61c <iprintf>
 80046f8:	e057      	b.n	80047aa <ParseConfigMessage+0x1ce>
                printf("*** ERROR: Invalid Node_Numbers value: %d (must be 1-20) ***\n", new_max_nodes);
 80046fa:	b2c1      	uxtb	r1, r0
 80046fc:	4871      	ldr	r0, [pc, #452]	@ (80048c4 <ParseConfigMessage+0x2e8>)
 80046fe:	f007 ff8d 	bl	800c61c <iprintf>
            return;
 8004702:	e052      	b.n	80047aa <ParseConfigMessage+0x1ce>
            version_ptr += 10; // Skip "version":
 8004704:	f106 040a 	add.w	r4, r6, #10
            while (*version_ptr == ' ' || *version_ptr == ':') version_ptr++; // Skip whitespace and :
 8004708:	e000      	b.n	800470c <ParseConfigMessage+0x130>
 800470a:	3401      	adds	r4, #1
 800470c:	7823      	ldrb	r3, [r4, #0]
 800470e:	2b20      	cmp	r3, #32
 8004710:	d0fb      	beq.n	800470a <ParseConfigMessage+0x12e>
 8004712:	2b3a      	cmp	r3, #58	@ 0x3a
 8004714:	d0f9      	beq.n	800470a <ParseConfigMessage+0x12e>
            config_version = (uint8_t)atoi(version_ptr);
 8004716:	4620      	mov	r0, r4
 8004718:	f007 f9e0 	bl	800badc <atoi>
 800471c:	b2c6      	uxtb	r6, r0
            printf("*** Version parsed: %d from string: [%.20s] ***\n", config_version, version_ptr);
 800471e:	46b0      	mov	r8, r6
 8004720:	4622      	mov	r2, r4
 8004722:	4631      	mov	r1, r6
 8004724:	4868      	ldr	r0, [pc, #416]	@ (80048c8 <ParseConfigMessage+0x2ec>)
 8004726:	f007 ff79 	bl	800c61c <iprintf>
            period_ptr += 9; // Skip "period":
 800472a:	3509      	adds	r5, #9
            while (*period_ptr == ' ' || *period_ptr == ':') period_ptr++; // Skip whitespace and :+
 800472c:	e000      	b.n	8004730 <ParseConfigMessage+0x154>
 800472e:	3501      	adds	r5, #1
 8004730:	782b      	ldrb	r3, [r5, #0]
 8004732:	2b20      	cmp	r3, #32
 8004734:	d0fb      	beq.n	800472e <ParseConfigMessage+0x152>
 8004736:	2b3a      	cmp	r3, #58	@ 0x3a
 8004738:	d0f9      	beq.n	800472e <ParseConfigMessage+0x152>
            printf("*** Period pointer at: [%.20s] ***\n", period_ptr);
 800473a:	4629      	mov	r1, r5
 800473c:	4863      	ldr	r0, [pc, #396]	@ (80048cc <ParseConfigMessage+0x2f0>)
 800473e:	f007 ff6d 	bl	800c61c <iprintf>
            char period_str[16] = {0};
 8004742:	2300      	movs	r3, #0
 8004744:	9302      	str	r3, [sp, #8]
 8004746:	9303      	str	r3, [sp, #12]
 8004748:	9304      	str	r3, [sp, #16]
 800474a:	9305      	str	r3, [sp, #20]
            while (period_ptr[i] >= '0' && period_ptr[i] <= '9' && i < 15) {
 800474c:	e005      	b.n	800475a <ParseConfigMessage+0x17e>
                period_str[i] = period_ptr[i];
 800474e:	f103 0218 	add.w	r2, r3, #24
 8004752:	446a      	add	r2, sp
 8004754:	f802 1c10 	strb.w	r1, [r2, #-16]
                i++;
 8004758:	3301      	adds	r3, #1
            while (period_ptr[i] >= '0' && period_ptr[i] <= '9' && i < 15) {
 800475a:	5ce9      	ldrb	r1, [r5, r3]
 800475c:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	2a09      	cmp	r2, #9
 8004764:	d801      	bhi.n	800476a <ParseConfigMessage+0x18e>
 8004766:	2b0e      	cmp	r3, #14
 8004768:	ddf1      	ble.n	800474e <ParseConfigMessage+0x172>
            period_str[i] = '\0';
 800476a:	3318      	adds	r3, #24
 800476c:	446b      	add	r3, sp
 800476e:	2200      	movs	r2, #0
 8004770:	f803 2c10 	strb.w	r2, [r3, #-16]
            config_period = (uint32_t)atoi(period_str);
 8004774:	a802      	add	r0, sp, #8
 8004776:	f007 f9b1 	bl	800badc <atoi>
 800477a:	4604      	mov	r4, r0
            printf("*** Period extracted: [%s] → parsed as: %lu ***\n", period_str, config_period);
 800477c:	4602      	mov	r2, r0
 800477e:	a902      	add	r1, sp, #8
 8004780:	4853      	ldr	r0, [pc, #332]	@ (80048d0 <ParseConfigMessage+0x2f4>)
 8004782:	f007 ff4b 	bl	800c61c <iprintf>
            printf("*** JSON Config parsed: type=%d, version=%d, period=%lu ms ***\n",
 8004786:	4623      	mov	r3, r4
 8004788:	4642      	mov	r2, r8
 800478a:	4639      	mov	r1, r7
 800478c:	4851      	ldr	r0, [pc, #324]	@ (80048d4 <ParseConfigMessage+0x2f8>)
 800478e:	f007 ff45 	bl	800c61c <iprintf>
 8004792:	e028      	b.n	80047e6 <ParseConfigMessage+0x20a>
    else if ((message[0] == 0xA1 || message[0] == 0xA2) && strlen(message) >= 7) {
 8004794:	7825      	ldrb	r5, [r4, #0]
 8004796:	f105 035f 	add.w	r3, r5, #95	@ 0x5f
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	d907      	bls.n	80047b0 <ParseConfigMessage+0x1d4>
    uint16_t config_type = 0;
 80047a0:	2700      	movs	r7, #0
    uint32_t config_period = 0;
 80047a2:	463c      	mov	r4, r7
    uint8_t config_version = 0;
 80047a4:	463e      	mov	r6, r7
    } else if (config_type != 163) { // Type 163 is handled above and doesn't need version/period
 80047a6:	2fa3      	cmp	r7, #163	@ 0xa3
 80047a8:	d15e      	bne.n	8004868 <ParseConfigMessage+0x28c>
}
 80047aa:	b006      	add	sp, #24
 80047ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if ((message[0] == 0xA1 || message[0] == 0xA2) && strlen(message) >= 7) {
 80047b0:	4620      	mov	r0, r4
 80047b2:	f7fb fd35 	bl	8000220 <strlen>
 80047b6:	2806      	cmp	r0, #6
 80047b8:	d952      	bls.n	8004860 <ParseConfigMessage+0x284>
        if (message[0] == 0xA1) {
 80047ba:	2da1      	cmp	r5, #161	@ 0xa1
 80047bc:	d02b      	beq.n	8004816 <ParseConfigMessage+0x23a>
        } else if (message[0] == 0xA2) {
 80047be:	2da2      	cmp	r5, #162	@ 0xa2
 80047c0:	d02b      	beq.n	800481a <ParseConfigMessage+0x23e>
    uint16_t config_type = 0;
 80047c2:	2700      	movs	r7, #0
        config_version = message[1];
 80047c4:	7866      	ldrb	r6, [r4, #1]
        config_period = (uint32_t)(message[2] | (message[3] << 8) | (message[4] << 16) | (message[5] << 24));
 80047c6:	78a3      	ldrb	r3, [r4, #2]
 80047c8:	78e2      	ldrb	r2, [r4, #3]
 80047ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80047ce:	7922      	ldrb	r2, [r4, #4]
 80047d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047d4:	7962      	ldrb	r2, [r4, #5]
 80047d6:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
        printf("*** Binary Config parsed: type=%d, version=%d, period=%lu ms ***\n", config_type, config_version, config_period);
 80047da:	4623      	mov	r3, r4
 80047dc:	4632      	mov	r2, r6
 80047de:	4639      	mov	r1, r7
 80047e0:	483d      	ldr	r0, [pc, #244]	@ (80048d8 <ParseConfigMessage+0x2fc>)
 80047e2:	f007 ff1b 	bl	800c61c <iprintf>
    if (config_version > 0 && config_period > 0) {
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	d0dd      	beq.n	80047a6 <ParseConfigMessage+0x1ca>
 80047ea:	2c00      	cmp	r4, #0
 80047ec:	d0db      	beq.n	80047a6 <ParseConfigMessage+0x1ca>
        if (config_type == 161) {
 80047ee:	2fa1      	cmp	r7, #161	@ 0xa1
 80047f0:	d015      	beq.n	800481e <ParseConfigMessage+0x242>
        } else if (config_type == 162) {
 80047f2:	2fa2      	cmp	r7, #162	@ 0xa2
 80047f4:	d1d9      	bne.n	80047aa <ParseConfigMessage+0x1ce>
            if (config_version != gatewayConfig.gateway_version) {
 80047f6:	4b39      	ldr	r3, [pc, #228]	@ (80048dc <ParseConfigMessage+0x300>)
 80047f8:	7859      	ldrb	r1, [r3, #1]
 80047fa:	42b1      	cmp	r1, r6
 80047fc:	d025      	beq.n	800484a <ParseConfigMessage+0x26e>
                printf("*** Updating GATEWAY config: version=%d -> %d, batch_period=%lu -> %lu ms ***\n",
 80047fe:	9400      	str	r4, [sp, #0]
 8004800:	4b37      	ldr	r3, [pc, #220]	@ (80048e0 <ParseConfigMessage+0x304>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4632      	mov	r2, r6
 8004806:	4837      	ldr	r0, [pc, #220]	@ (80048e4 <ParseConfigMessage+0x308>)
 8004808:	f007 ff08 	bl	800c61c <iprintf>
                UpdateGatewayBatchPeriod(config_version, config_period);
 800480c:	4621      	mov	r1, r4
 800480e:	4630      	mov	r0, r6
 8004810:	f7ff fc40 	bl	8004094 <UpdateGatewayBatchPeriod>
 8004814:	e7c9      	b.n	80047aa <ParseConfigMessage+0x1ce>
            config_type = 161; // Node config
 8004816:	27a1      	movs	r7, #161	@ 0xa1
 8004818:	e7d4      	b.n	80047c4 <ParseConfigMessage+0x1e8>
            config_type = 162; // Gateway batch config
 800481a:	27a2      	movs	r7, #162	@ 0xa2
 800481c:	e7d2      	b.n	80047c4 <ParseConfigMessage+0x1e8>
            if (config_version != gatewayConfig.nodes_version) {
 800481e:	4b2f      	ldr	r3, [pc, #188]	@ (80048dc <ParseConfigMessage+0x300>)
 8004820:	7819      	ldrb	r1, [r3, #0]
 8004822:	42b1      	cmp	r1, r6
 8004824:	d00c      	beq.n	8004840 <ParseConfigMessage+0x264>
                printf("*** Updating NODE config: version=%d -> %d, period=%lu -> %lu ***\n",
 8004826:	9400      	str	r4, [sp, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4632      	mov	r2, r6
 800482c:	482e      	ldr	r0, [pc, #184]	@ (80048e8 <ParseConfigMessage+0x30c>)
 800482e:	f007 fef5 	bl	800c61c <iprintf>
                UpdateGatewayConfig(config_version, config_period);
 8004832:	4621      	mov	r1, r4
 8004834:	4630      	mov	r0, r6
 8004836:	f7ff f9a7 	bl	8003b88 <UpdateGatewayConfig>
                last_checked_version = config_version;
 800483a:	4b2c      	ldr	r3, [pc, #176]	@ (80048ec <ParseConfigMessage+0x310>)
 800483c:	701e      	strb	r6, [r3, #0]
 800483e:	e7b4      	b.n	80047aa <ParseConfigMessage+0x1ce>
                printf("*** NODE Config NOT updated: same version=%d ***\n", config_version);
 8004840:	4631      	mov	r1, r6
 8004842:	482b      	ldr	r0, [pc, #172]	@ (80048f0 <ParseConfigMessage+0x314>)
 8004844:	f007 feea 	bl	800c61c <iprintf>
 8004848:	e7af      	b.n	80047aa <ParseConfigMessage+0x1ce>
                printf("*** GATEWAY Config NOT updated: same version=%d ***\n", config_version);
 800484a:	4631      	mov	r1, r6
 800484c:	4829      	ldr	r0, [pc, #164]	@ (80048f4 <ParseConfigMessage+0x318>)
 800484e:	f007 fee5 	bl	800c61c <iprintf>
 8004852:	e7aa      	b.n	80047aa <ParseConfigMessage+0x1ce>
    uint32_t config_period = 0;
 8004854:	2400      	movs	r4, #0
    uint8_t config_version = 0;
 8004856:	4626      	mov	r6, r4
 8004858:	e7a5      	b.n	80047a6 <ParseConfigMessage+0x1ca>
    uint32_t config_period = 0;
 800485a:	2400      	movs	r4, #0
    uint8_t config_version = 0;
 800485c:	4626      	mov	r6, r4
 800485e:	e7a2      	b.n	80047a6 <ParseConfigMessage+0x1ca>
    uint16_t config_type = 0;
 8004860:	2700      	movs	r7, #0
    uint32_t config_period = 0;
 8004862:	463c      	mov	r4, r7
    uint8_t config_version = 0;
 8004864:	463e      	mov	r6, r7
 8004866:	e79e      	b.n	80047a6 <ParseConfigMessage+0x1ca>
        printf("*** Config NOT updated: type=%d, version=%d, period=%lu (invalid values) ***\n",
 8004868:	4623      	mov	r3, r4
 800486a:	4632      	mov	r2, r6
 800486c:	4639      	mov	r1, r7
 800486e:	4822      	ldr	r0, [pc, #136]	@ (80048f8 <ParseConfigMessage+0x31c>)
 8004870:	f007 fed4 	bl	800c61c <iprintf>
 8004874:	e799      	b.n	80047aa <ParseConfigMessage+0x1ce>
 8004876:	bf00      	nop
 8004878:	08010094 	.word	0x08010094
 800487c:	080100f4 	.word	0x080100f4
 8004880:	0800eb34 	.word	0x0800eb34
 8004884:	0801012c 	.word	0x0801012c
 8004888:	0801014c 	.word	0x0801014c
 800488c:	080100c0 	.word	0x080100c0
 8004890:	08010154 	.word	0x08010154
 8004894:	0800eb44 	.word	0x0800eb44
 8004898:	08010170 	.word	0x08010170
 800489c:	0801017c 	.word	0x0801017c
 80048a0:	0801008c 	.word	0x0801008c
 80048a4:	0801018c 	.word	0x0801018c
 80048a8:	080101ac 	.word	0x080101ac
 80048ac:	080101cc 	.word	0x080101cc
 80048b0:	08010090 	.word	0x08010090
 80048b4:	200000e0 	.word	0x200000e0
 80048b8:	080101f0 	.word	0x080101f0
 80048bc:	200011bc 	.word	0x200011bc
 80048c0:	08010218 	.word	0x08010218
 80048c4:	08010248 	.word	0x08010248
 80048c8:	08010288 	.word	0x08010288
 80048cc:	080102bc 	.word	0x080102bc
 80048d0:	080102e0 	.word	0x080102e0
 80048d4:	08010314 	.word	0x08010314
 80048d8:	08010354 	.word	0x08010354
 80048dc:	200000cc 	.word	0x200000cc
 80048e0:	200000dc 	.word	0x200000dc
 80048e4:	08010410 	.word	0x08010410
 80048e8:	08010398 	.word	0x08010398
 80048ec:	200011b9 	.word	0x200011b9
 80048f0:	080103dc 	.word	0x080103dc
 80048f4:	08010460 	.word	0x08010460
 80048f8:	08010498 	.word	0x08010498

080048fc <CheckBrokerConfig>:
static void CheckBrokerConfig(void) {
 80048fc:	b530      	push	{r4, r5, lr}
 80048fe:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
    printf("\n=== CheckBrokerConfig: Enhanced MQTT Config Reception ===\n");
 8004902:	484e      	ldr	r0, [pc, #312]	@ (8004a3c <CheckBrokerConfig+0x140>)
 8004904:	f007 fefa 	bl	800c6fc <puts>
    printf("MQTT Status: connected=%d, mainState=%d, flag_rx_done=%d\n",
 8004908:	4c4d      	ldr	r4, [pc, #308]	@ (8004a40 <CheckBrokerConfig+0x144>)
 800490a:	7821      	ldrb	r1, [r4, #0]
 800490c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a44 <CheckBrokerConfig+0x148>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	4a4d      	ldr	r2, [pc, #308]	@ (8004a48 <CheckBrokerConfig+0x14c>)
 8004912:	7812      	ldrb	r2, [r2, #0]
 8004914:	484d      	ldr	r0, [pc, #308]	@ (8004a4c <CheckBrokerConfig+0x150>)
 8004916:	f007 fe81 	bl	800c61c <iprintf>
    if (flag_mqtt_connected != SET) {
 800491a:	7823      	ldrb	r3, [r4, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b01      	cmp	r3, #1
 8004920:	d005      	beq.n	800492e <CheckBrokerConfig+0x32>
        printf("ERROR: MQTT NOT CONNECTED!\n");
 8004922:	484b      	ldr	r0, [pc, #300]	@ (8004a50 <CheckBrokerConfig+0x154>)
 8004924:	f007 feea 	bl	800c6fc <puts>
}
 8004928:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
 800492c:	bd30      	pop	{r4, r5, pc}
    memset(mqttPacketBuffer, 0, MQTT_DATA_PACKET_BUFF_SIZE);
 800492e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8004932:	2100      	movs	r1, #0
 8004934:	4847      	ldr	r0, [pc, #284]	@ (8004a54 <CheckBrokerConfig+0x158>)
 8004936:	f008 f819 	bl	800c96c <memset>
    printf("Starting MQTT config check with ring buffer...\n");
 800493a:	4847      	ldr	r0, [pc, #284]	@ (8004a58 <CheckBrokerConfig+0x15c>)
 800493c:	f007 fede 	bl	800c6fc <puts>
        printf("=== RING BUFFER DEBUG INFO ===\n");
 8004940:	4846      	ldr	r0, [pc, #280]	@ (8004a5c <CheckBrokerConfig+0x160>)
 8004942:	f007 fedb 	bl	800c6fc <puts>
        printf("IRQ Count: %lu, RXNE Hits: %lu, RDR Reads: %lu, Flag Sets: %lu\n",
 8004946:	4b46      	ldr	r3, [pc, #280]	@ (8004a60 <CheckBrokerConfig+0x164>)
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	4b46      	ldr	r3, [pc, #280]	@ (8004a64 <CheckBrokerConfig+0x168>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b46      	ldr	r3, [pc, #280]	@ (8004a68 <CheckBrokerConfig+0x16c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4846      	ldr	r0, [pc, #280]	@ (8004a6c <CheckBrokerConfig+0x170>)
 8004954:	6800      	ldr	r0, [r0, #0]
 8004956:	9000      	str	r0, [sp, #0]
 8004958:	4845      	ldr	r0, [pc, #276]	@ (8004a70 <CheckBrokerConfig+0x174>)
 800495a:	f007 fe5f 	bl	800c61c <iprintf>
        printf("IDLE Hits: %lu, ORE Hits: %lu, Last Byte: 0x%02X\n",
 800495e:	4b45      	ldr	r3, [pc, #276]	@ (8004a74 <CheckBrokerConfig+0x178>)
 8004960:	6819      	ldr	r1, [r3, #0]
 8004962:	4b45      	ldr	r3, [pc, #276]	@ (8004a78 <CheckBrokerConfig+0x17c>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b45      	ldr	r3, [pc, #276]	@ (8004a7c <CheckBrokerConfig+0x180>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	4845      	ldr	r0, [pc, #276]	@ (8004a80 <CheckBrokerConfig+0x184>)
 800496c:	f007 fe56 	bl	800c61c <iprintf>
    for (int attempt = 0; attempt < 3; attempt++) {
 8004970:	2500      	movs	r5, #0
 8004972:	e004      	b.n	800497e <CheckBrokerConfig+0x82>
        if (flag_mqtt_rx_done == SET) {
 8004974:	4b33      	ldr	r3, [pc, #204]	@ (8004a44 <CheckBrokerConfig+0x148>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b01      	cmp	r3, #1
 800497c:	d053      	beq.n	8004a26 <CheckBrokerConfig+0x12a>
    for (int attempt = 0; attempt < 3; attempt++) {
 800497e:	2d02      	cmp	r5, #2
 8004980:	dc58      	bgt.n	8004a34 <CheckBrokerConfig+0x138>
        printf("Attempt %d: Triggering MQTT task...\n", attempt + 1);
 8004982:	3501      	adds	r5, #1
 8004984:	4629      	mov	r1, r5
 8004986:	483f      	ldr	r0, [pc, #252]	@ (8004a84 <CheckBrokerConfig+0x188>)
 8004988:	f007 fe48 	bl	800c61c <iprintf>
        flag_mqtt_rx_done = RESET;
 800498c:	2100      	movs	r1, #0
 800498e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <CheckBrokerConfig+0x148>)
 8004990:	7019      	strb	r1, [r3, #0]
        flag_waitMqttData = SET;
 8004992:	4b3d      	ldr	r3, [pc, #244]	@ (8004a88 <CheckBrokerConfig+0x18c>)
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MQTT_Process), CFG_SEQ_Prio_0);
 8004998:	2002      	movs	r0, #2
 800499a:	f006 fcb7 	bl	800b30c <UTIL_SEQ_SetTask>
        uint16_t available_bytes = MQTT_GetAvailableBytes();
 800499e:	f7fe faeb 	bl	8002f78 <MQTT_GetAvailableBytes>
 80049a2:	4604      	mov	r4, r0
        printf("Available bytes in ring buffer: %d\n", available_bytes);
 80049a4:	4601      	mov	r1, r0
 80049a6:	4839      	ldr	r0, [pc, #228]	@ (8004a8c <CheckBrokerConfig+0x190>)
 80049a8:	f007 fe38 	bl	800c61c <iprintf>
        if (available_bytes > 0) {
 80049ac:	2c00      	cmp	r4, #0
 80049ae:	d0e1      	beq.n	8004974 <CheckBrokerConfig+0x78>
            char config_message[512] = {0};
 80049b0:	f44f 7400 	mov.w	r4, #512	@ 0x200
 80049b4:	4622      	mov	r2, r4
 80049b6:	2100      	movs	r1, #0
 80049b8:	a802      	add	r0, sp, #8
 80049ba:	f007 ffd7 	bl	800c96c <memset>
            uint16_t bytes_read = MQTT_ReadString(config_message, sizeof(config_message));
 80049be:	4621      	mov	r1, r4
 80049c0:	a802      	add	r0, sp, #8
 80049c2:	f7fe fb05 	bl	8002fd0 <MQTT_ReadString>
 80049c6:	4601      	mov	r1, r0
            printf("Read %d bytes from ring buffer: %s\n", bytes_read, config_message);
 80049c8:	aa02      	add	r2, sp, #8
 80049ca:	4831      	ldr	r0, [pc, #196]	@ (8004a90 <CheckBrokerConfig+0x194>)
 80049cc:	f007 fe26 	bl	800c61c <iprintf>
            if (strstr(config_message, "\"type\"") &&
 80049d0:	4930      	ldr	r1, [pc, #192]	@ (8004a94 <CheckBrokerConfig+0x198>)
 80049d2:	a802      	add	r0, sp, #8
 80049d4:	f008 f808 	bl	800c9e8 <strstr>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d0cb      	beq.n	8004974 <CheckBrokerConfig+0x78>
                (strstr(config_message, "161") || strstr(config_message, "162") || strstr(config_message, "163") ||
 80049dc:	492e      	ldr	r1, [pc, #184]	@ (8004a98 <CheckBrokerConfig+0x19c>)
 80049de:	a802      	add	r0, sp, #8
 80049e0:	f008 f802 	bl	800c9e8 <strstr>
            if (strstr(config_message, "\"type\"") &&
 80049e4:	b9a0      	cbnz	r0, 8004a10 <CheckBrokerConfig+0x114>
                (strstr(config_message, "161") || strstr(config_message, "162") || strstr(config_message, "163") ||
 80049e6:	492d      	ldr	r1, [pc, #180]	@ (8004a9c <CheckBrokerConfig+0x1a0>)
 80049e8:	a802      	add	r0, sp, #8
 80049ea:	f007 fffd 	bl	800c9e8 <strstr>
 80049ee:	b978      	cbnz	r0, 8004a10 <CheckBrokerConfig+0x114>
 80049f0:	492b      	ldr	r1, [pc, #172]	@ (8004aa0 <CheckBrokerConfig+0x1a4>)
 80049f2:	a802      	add	r0, sp, #8
 80049f4:	f007 fff8 	bl	800c9e8 <strstr>
 80049f8:	b950      	cbnz	r0, 8004a10 <CheckBrokerConfig+0x114>
                 strstr(config_message, "0xA1") || strstr(config_message, "0xA2"))) {
 80049fa:	492a      	ldr	r1, [pc, #168]	@ (8004aa4 <CheckBrokerConfig+0x1a8>)
 80049fc:	a802      	add	r0, sp, #8
 80049fe:	f007 fff3 	bl	800c9e8 <strstr>
                (strstr(config_message, "161") || strstr(config_message, "162") || strstr(config_message, "163") ||
 8004a02:	b928      	cbnz	r0, 8004a10 <CheckBrokerConfig+0x114>
                 strstr(config_message, "0xA1") || strstr(config_message, "0xA2"))) {
 8004a04:	4928      	ldr	r1, [pc, #160]	@ (8004aa8 <CheckBrokerConfig+0x1ac>)
 8004a06:	a802      	add	r0, sp, #8
 8004a08:	f007 ffee 	bl	800c9e8 <strstr>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d0b1      	beq.n	8004974 <CheckBrokerConfig+0x78>
                printf("*** SUCCESS: Config message found! ***\n");
 8004a10:	4826      	ldr	r0, [pc, #152]	@ (8004aac <CheckBrokerConfig+0x1b0>)
 8004a12:	f007 fe73 	bl	800c6fc <puts>
                printf("Config message: %s\n", config_message);
 8004a16:	a902      	add	r1, sp, #8
 8004a18:	4825      	ldr	r0, [pc, #148]	@ (8004ab0 <CheckBrokerConfig+0x1b4>)
 8004a1a:	f007 fdff 	bl	800c61c <iprintf>
                ParseConfigMessage(config_message);
 8004a1e:	a802      	add	r0, sp, #8
 8004a20:	f7ff fddc 	bl	80045dc <ParseConfigMessage>
                return;
 8004a24:	e780      	b.n	8004928 <CheckBrokerConfig+0x2c>
            printf("Legacy flag set, but no ring buffer data\n");
 8004a26:	4823      	ldr	r0, [pc, #140]	@ (8004ab4 <CheckBrokerConfig+0x1b8>)
 8004a28:	f007 fe68 	bl	800c6fc <puts>
            flag_mqtt_rx_done = RESET;
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <CheckBrokerConfig+0x148>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e7a4      	b.n	800497e <CheckBrokerConfig+0x82>
    printf("=== CheckBrokerConfig: No config message found ===\n");
 8004a34:	4820      	ldr	r0, [pc, #128]	@ (8004ab8 <CheckBrokerConfig+0x1bc>)
 8004a36:	f007 fe61 	bl	800c6fc <puts>
 8004a3a:	e775      	b.n	8004928 <CheckBrokerConfig+0x2c>
 8004a3c:	080104e8 	.word	0x080104e8
 8004a40:	200005a9 	.word	0x200005a9
 8004a44:	20000d22 	.word	0x20000d22
 8004a48:	200000a0 	.word	0x200000a0
 8004a4c:	08010524 	.word	0x08010524
 8004a50:	08010560 	.word	0x08010560
 8004a54:	200005ac 	.word	0x200005ac
 8004a58:	0801057c 	.word	0x0801057c
 8004a5c:	080105ac 	.word	0x080105ac
 8004a60:	20000fbc 	.word	0x20000fbc
 8004a64:	20000fb8 	.word	0x20000fb8
 8004a68:	20000fa8 	.word	0x20000fa8
 8004a6c:	20000fac 	.word	0x20000fac
 8004a70:	080105cc 	.word	0x080105cc
 8004a74:	20000fb4 	.word	0x20000fb4
 8004a78:	20000fb0 	.word	0x20000fb0
 8004a7c:	20000fa4 	.word	0x20000fa4
 8004a80:	0801060c 	.word	0x0801060c
 8004a84:	08010640 	.word	0x08010640
 8004a88:	200005aa 	.word	0x200005aa
 8004a8c:	08010668 	.word	0x08010668
 8004a90:	0801068c 	.word	0x0801068c
 8004a94:	0800eb34 	.word	0x0800eb34
 8004a98:	0800eb70 	.word	0x0800eb70
 8004a9c:	0800eb64 	.word	0x0800eb64
 8004aa0:	0800eb68 	.word	0x0800eb68
 8004aa4:	080106b0 	.word	0x080106b0
 8004aa8:	080106b8 	.word	0x080106b8
 8004aac:	080106c0 	.word	0x080106c0
 8004ab0:	080106e8 	.word	0x080106e8
 8004ab4:	080106fc 	.word	0x080106fc
 8004ab8:	08010728 	.word	0x08010728

08004abc <GatewayPhaseHandler>:
static void GatewayPhaseHandler(void *context) {
 8004abc:	b538      	push	{r3, r4, r5, lr}
    printf("\n=== GATEWAY PHASE TRANSITION ===\n");
 8004abe:	485f      	ldr	r0, [pc, #380]	@ (8004c3c <GatewayPhaseHandler+0x180>)
 8004ac0:	f007 fe1c 	bl	800c6fc <puts>
    printf("Current phase: %d\n", currentPhase);
 8004ac4:	4c5e      	ldr	r4, [pc, #376]	@ (8004c40 <GatewayPhaseHandler+0x184>)
 8004ac6:	7821      	ldrb	r1, [r4, #0]
 8004ac8:	485e      	ldr	r0, [pc, #376]	@ (8004c44 <GatewayPhaseHandler+0x188>)
 8004aca:	f007 fda7 	bl	800c61c <iprintf>
    printf("Current time: %lu ms\n", HAL_GetTick());
 8004ace:	f7fe fb19 	bl	8003104 <HAL_GetTick>
 8004ad2:	4601      	mov	r1, r0
 8004ad4:	485c      	ldr	r0, [pc, #368]	@ (8004c48 <GatewayPhaseHandler+0x18c>)
 8004ad6:	f007 fda1 	bl	800c61c <iprintf>
    printf("Packets collected: %d\n", packetCount);
 8004ada:	4b5c      	ldr	r3, [pc, #368]	@ (8004c4c <GatewayPhaseHandler+0x190>)
 8004adc:	8819      	ldrh	r1, [r3, #0]
 8004ade:	485c      	ldr	r0, [pc, #368]	@ (8004c50 <GatewayPhaseHandler+0x194>)
 8004ae0:	f007 fd9c 	bl	800c61c <iprintf>
    switch (currentPhase) {
 8004ae4:	7823      	ldrb	r3, [r4, #0]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d80c      	bhi.n	8004b04 <GatewayPhaseHandler+0x48>
 8004aea:	e8df f003 	tbb	[pc, r3]
 8004aee:	1102      	.short	0x1102
 8004af0:	7a1d      	.short	0x7a1d
            printf("*** PHASE 1 COMPLETE: 30s Listening finished ***\n");
 8004af2:	4858      	ldr	r0, [pc, #352]	@ (8004c54 <GatewayPhaseHandler+0x198>)
 8004af4:	f007 fe02 	bl	800c6fc <puts>
            currentPhase = PHASE_CONFIG_CHECK;
 8004af8:	4b51      	ldr	r3, [pc, #324]	@ (8004c40 <GatewayPhaseHandler+0x184>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
            GatewayPhaseHandler(NULL);
 8004afe:	2000      	movs	r0, #0
 8004b00:	f7ff ffdc 	bl	8004abc <GatewayPhaseHandler>
    printf("=== NEW PHASE: %d ===\n\n", currentPhase);
 8004b04:	4b4e      	ldr	r3, [pc, #312]	@ (8004c40 <GatewayPhaseHandler+0x184>)
 8004b06:	7819      	ldrb	r1, [r3, #0]
 8004b08:	4853      	ldr	r0, [pc, #332]	@ (8004c58 <GatewayPhaseHandler+0x19c>)
 8004b0a:	f007 fd87 	bl	800c61c <iprintf>
}
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
            printf("*** PHASE 2: Config check from broker ***\n");
 8004b10:	4852      	ldr	r0, [pc, #328]	@ (8004c5c <GatewayPhaseHandler+0x1a0>)
 8004b12:	f007 fdf3 	bl	800c6fc <puts>
            CheckBrokerConfig();
 8004b16:	f7ff fef1 	bl	80048fc <CheckBrokerConfig>
            currentPhase = PHASE_DATA_SEND;
 8004b1a:	4b49      	ldr	r3, [pc, #292]	@ (8004c40 <GatewayPhaseHandler+0x184>)
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	701a      	strb	r2, [r3, #0]
            GatewayPhaseHandler(NULL);
 8004b20:	2000      	movs	r0, #0
 8004b22:	f7ff ffcb 	bl	8004abc <GatewayPhaseHandler>
            break;
 8004b26:	e7ed      	b.n	8004b04 <GatewayPhaseHandler+0x48>
            printf("*** PHASE 3: Sending data to broker ***\n");
 8004b28:	484d      	ldr	r0, [pc, #308]	@ (8004c60 <GatewayPhaseHandler+0x1a4>)
 8004b2a:	f007 fde7 	bl	800c6fc <puts>
            SendDataToBroker();
 8004b2e:	f7ff fad3 	bl	80040d8 <SendDataToBroker>
            if (gatewayConfig.updated) {
 8004b32:	4b4c      	ldr	r3, [pc, #304]	@ (8004c64 <GatewayPhaseHandler+0x1a8>)
 8004b34:	7b1b      	ldrb	r3, [r3, #12]
 8004b36:	b38b      	cbz	r3, 8004b9c <GatewayPhaseHandler+0xe0>
            	if (CheckAllNodesUpdated()) {
 8004b38:	f7ff fa2e 	bl	8003f98 <CheckAllNodesUpdated>
 8004b3c:	b170      	cbz	r0, 8004b5c <GatewayPhaseHandler+0xa0>
				   printf("*** All nodes updated! Config tracking complete ***\n");
 8004b3e:	484a      	ldr	r0, [pc, #296]	@ (8004c68 <GatewayPhaseHandler+0x1ac>)
 8004b40:	f007 fddc 	bl	800c6fc <puts>
				   ResetConfigTracker();
 8004b44:	f7ff fa68 	bl	8004018 <ResetConfigTracker>
				    UTIL_TIMER_SetPeriod(&phaseTimer, BATCH_PERIOD_MS);
 8004b48:	4c48      	ldr	r4, [pc, #288]	@ (8004c6c <GatewayPhaseHandler+0x1b0>)
 8004b4a:	4b49      	ldr	r3, [pc, #292]	@ (8004c70 <GatewayPhaseHandler+0x1b4>)
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f006 fe02 	bl	800b758 <UTIL_TIMER_SetPeriod>
				    UTIL_TIMER_Start(&phaseTimer);
 8004b54:	4620      	mov	r0, r4
 8004b56:	f006 fdb9 	bl	800b6cc <UTIL_TIMER_Start>
 8004b5a:	e7d3      	b.n	8004b04 <GatewayPhaseHandler+0x48>
					UTIL_TIMER_Stop(&phaseTimer);
 8004b5c:	4c43      	ldr	r4, [pc, #268]	@ (8004c6c <GatewayPhaseHandler+0x1b0>)
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f006 fd5a 	bl	800b618 <UTIL_TIMER_Stop>
					UTIL_TIMER_Stop(&configBroadcastTimer);
 8004b64:	4d43      	ldr	r5, [pc, #268]	@ (8004c74 <GatewayPhaseHandler+0x1b8>)
 8004b66:	4628      	mov	r0, r5
 8004b68:	f006 fd56 	bl	800b618 <UTIL_TIMER_Stop>
					printf("*** Config updated - Starting PHASE 4: Config broadcast (15s) ***\n");
 8004b6c:	4842      	ldr	r0, [pc, #264]	@ (8004c78 <GatewayPhaseHandler+0x1bc>)
 8004b6e:	f007 fdc5 	bl	800c6fc <puts>
					currentPhase = PHASE_CONFIG_BROADCAST;
 8004b72:	4b33      	ldr	r3, [pc, #204]	@ (8004c40 <GatewayPhaseHandler+0x184>)
 8004b74:	2203      	movs	r2, #3
 8004b76:	701a      	strb	r2, [r3, #0]
					gatewayConfig.broadcast_active = 1;
 8004b78:	4a3a      	ldr	r2, [pc, #232]	@ (8004c64 <GatewayPhaseHandler+0x1a8>)
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	7353      	strb	r3, [r2, #13]
					configTracker.config_update_active = 1;
 8004b7e:	493f      	ldr	r1, [pc, #252]	@ (8004c7c <GatewayPhaseHandler+0x1c0>)
 8004b80:	754b      	strb	r3, [r1, #21]
					gatewayConfig.updated = 1;
 8004b82:	7313      	strb	r3, [r2, #12]
					UTIL_TIMER_Start(&configBroadcastTimer);
 8004b84:	4628      	mov	r0, r5
 8004b86:	f006 fda1 	bl	800b6cc <UTIL_TIMER_Start>
					UTIL_TIMER_SetPeriod(&phaseTimer, 15000);
 8004b8a:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f006 fde2 	bl	800b758 <UTIL_TIMER_SetPeriod>
					UTIL_TIMER_Start(&phaseTimer);
 8004b94:	4620      	mov	r0, r4
 8004b96:	f006 fd99 	bl	800b6cc <UTIL_TIMER_Start>
 8004b9a:	e7b3      	b.n	8004b04 <GatewayPhaseHandler+0x48>
                printf("*** No config update - Returning to PHASE 1: Listening (30s) ***\n");
 8004b9c:	4838      	ldr	r0, [pc, #224]	@ (8004c80 <GatewayPhaseHandler+0x1c4>)
 8004b9e:	f007 fdad 	bl	800c6fc <puts>
                currentPhase = PHASE_LISTENING;
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4b26      	ldr	r3, [pc, #152]	@ (8004c40 <GatewayPhaseHandler+0x184>)
 8004ba6:	7019      	strb	r1, [r3, #0]
                packetCount = 0;
 8004ba8:	4b28      	ldr	r3, [pc, #160]	@ (8004c4c <GatewayPhaseHandler+0x190>)
 8004baa:	8019      	strh	r1, [r3, #0]
                memset(packetBuffer, 0, sizeof(packetBuffer));
 8004bac:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8004bb0:	4834      	ldr	r0, [pc, #208]	@ (8004c84 <GatewayPhaseHandler+0x1c8>)
 8004bb2:	f007 fedb 	bl	800c96c <memset>
                UTIL_TIMER_SetPeriod(&phaseTimer, BATCH_PERIOD_MS);
 8004bb6:	4c2d      	ldr	r4, [pc, #180]	@ (8004c6c <GatewayPhaseHandler+0x1b0>)
 8004bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c70 <GatewayPhaseHandler+0x1b4>)
 8004bba:	6819      	ldr	r1, [r3, #0]
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f006 fdcb 	bl	800b758 <UTIL_TIMER_SetPeriod>
                UTIL_TIMER_Start(&phaseTimer);
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f006 fd82 	bl	800b6cc <UTIL_TIMER_Start>
                if (LoRaState != RX) {
 8004bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004c88 <GatewayPhaseHandler+0x1cc>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d099      	beq.n	8004b04 <GatewayPhaseHandler+0x48>
                    Radio.Rx(RX_TIMEOUT_VALUE);
 8004bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c8c <GatewayPhaseHandler+0x1d0>)
 8004bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd4:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8004bd8:	4798      	blx	r3
                    LoRaState = RX;
 8004bda:	4b2b      	ldr	r3, [pc, #172]	@ (8004c88 <GatewayPhaseHandler+0x1cc>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	e790      	b.n	8004b04 <GatewayPhaseHandler+0x48>
            printf("*** PHASE 4 COMPLETE: 15s Config broadcast finished ***\n");
 8004be2:	482b      	ldr	r0, [pc, #172]	@ (8004c90 <GatewayPhaseHandler+0x1d4>)
 8004be4:	f007 fd8a 	bl	800c6fc <puts>
            gatewayConfig.broadcast_active = 0;
 8004be8:	2400      	movs	r4, #0
 8004bea:	4b1e      	ldr	r3, [pc, #120]	@ (8004c64 <GatewayPhaseHandler+0x1a8>)
 8004bec:	735c      	strb	r4, [r3, #13]
            UTIL_TIMER_Stop(&configBroadcastTimer);
 8004bee:	4821      	ldr	r0, [pc, #132]	@ (8004c74 <GatewayPhaseHandler+0x1b8>)
 8004bf0:	f006 fd12 	bl	800b618 <UTIL_TIMER_Stop>
            currentPhase = PHASE_LISTENING;
 8004bf4:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <GatewayPhaseHandler+0x184>)
 8004bf6:	701c      	strb	r4, [r3, #0]
            packetCount = 0;
 8004bf8:	4b14      	ldr	r3, [pc, #80]	@ (8004c4c <GatewayPhaseHandler+0x190>)
 8004bfa:	801c      	strh	r4, [r3, #0]
            memset(packetBuffer, 0, sizeof(packetBuffer));
 8004bfc:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8004c00:	4621      	mov	r1, r4
 8004c02:	4820      	ldr	r0, [pc, #128]	@ (8004c84 <GatewayPhaseHandler+0x1c8>)
 8004c04:	f007 feb2 	bl	800c96c <memset>
            UTIL_TIMER_SetPeriod(&phaseTimer, BATCH_PERIOD_MS);
 8004c08:	4c18      	ldr	r4, [pc, #96]	@ (8004c6c <GatewayPhaseHandler+0x1b0>)
 8004c0a:	4b19      	ldr	r3, [pc, #100]	@ (8004c70 <GatewayPhaseHandler+0x1b4>)
 8004c0c:	6819      	ldr	r1, [r3, #0]
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f006 fda2 	bl	800b758 <UTIL_TIMER_SetPeriod>
            UTIL_TIMER_Start(&phaseTimer);
 8004c14:	4620      	mov	r0, r4
 8004c16:	f006 fd59 	bl	800b6cc <UTIL_TIMER_Start>
            printf("*** Returning to PHASE 1: Listening (30s) ***\n");
 8004c1a:	481e      	ldr	r0, [pc, #120]	@ (8004c94 <GatewayPhaseHandler+0x1d8>)
 8004c1c:	f007 fd6e 	bl	800c6fc <puts>
            if (LoRaState != RX) {
 8004c20:	4b19      	ldr	r3, [pc, #100]	@ (8004c88 <GatewayPhaseHandler+0x1cc>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f43f af6d 	beq.w	8004b04 <GatewayPhaseHandler+0x48>
                Radio.Rx(RX_TIMEOUT_VALUE);
 8004c2a:	4b18      	ldr	r3, [pc, #96]	@ (8004c8c <GatewayPhaseHandler+0x1d0>)
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8004c32:	4798      	blx	r3
                LoRaState = RX;
 8004c34:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <GatewayPhaseHandler+0x1cc>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	e763      	b.n	8004b04 <GatewayPhaseHandler+0x48>
 8004c3c:	0801075c 	.word	0x0801075c
 8004c40:	200011ba 	.word	0x200011ba
 8004c44:	08010780 	.word	0x08010780
 8004c48:	08010794 	.word	0x08010794
 8004c4c:	20003530 	.word	0x20003530
 8004c50:	080107ac 	.word	0x080107ac
 8004c54:	080107c4 	.word	0x080107c4
 8004c58:	08010970 	.word	0x08010970
 8004c5c:	080107f8 	.word	0x080107f8
 8004c60:	08010824 	.word	0x08010824
 8004c64:	200000cc 	.word	0x200000cc
 8004c68:	0801084c 	.word	0x0801084c
 8004c6c:	20003518 	.word	0x20003518
 8004c70:	200000dc 	.word	0x200000dc
 8004c74:	20003500 	.word	0x20003500
 8004c78:	08010880 	.word	0x08010880
 8004c7c:	200011bc 	.word	0x200011bc
 8004c80:	080108c4 	.word	0x080108c4
 8004c84:	20003534 	.word	0x20003534
 8004c88:	2000581f 	.word	0x2000581f
 8004c8c:	08010b80 	.word	0x08010b80
 8004c90:	08010908 	.word	0x08010908
 8004c94:	08010940 	.word	0x08010940

08004c98 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8004c98:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8004c9a:	f000 f815 	bl	8004cc8 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8004c9e:	bd08      	pop	{r3, pc}

08004ca0 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8004ca0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8004ca2:	f000 f851 	bl	8004d48 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8004ca6:	bd08      	pop	{r3, pc}

08004ca8 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8004ca8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8004caa:	f000 f88f 	bl	8004dcc <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8004cae:	bd08      	pop	{r3, pc}

08004cb0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8004cb0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8004cb2:	f000 f88d 	bl	8004dd0 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8004cb6:	bd08      	pop	{r3, pc}

08004cb8 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8004cb8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8004cba:	f000 f88b 	bl	8004dd4 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8004cbe:	bd08      	pop	{r3, pc}

08004cc0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8004cc0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8004cc2:	f000 f889 	bl	8004dd8 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8004cc6:	bd08      	pop	{r3, pc}

08004cc8 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cca:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8004ccc:	2400      	movs	r4, #0
 8004cce:	9403      	str	r4, [sp, #12]
 8004cd0:	9404      	str	r4, [sp, #16]
 8004cd2:	9405      	str	r4, [sp, #20]
 8004cd4:	9406      	str	r4, [sp, #24]
 8004cd6:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ce4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ce6:	f002 0201 	and.w	r2, r2, #1
 8004cea:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8004cec:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004cee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cf0:	f042 0204 	orr.w	r2, r2, #4
 8004cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004cfe:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  RF_SW_CTRL2_GPIO_CLK_ENABLE();
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL2_PIN;
 8004d00:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 8004d04:	9703      	str	r7, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004d06:	2301      	movs	r3, #1
 8004d08:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	9306      	str	r3, [sp, #24]

  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8004d0e:	4e0d      	ldr	r6, [pc, #52]	@ (8004d44 <BSP_RADIO_Init+0x7c>)
 8004d10:	a903      	add	r1, sp, #12
 8004d12:	4630      	mov	r0, r6
 8004d14:	f000 fba4 	bl	8005460 <HAL_GPIO_Init>

  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8004d18:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8004d1c:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8004d1e:	a903      	add	r1, sp, #12
 8004d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d24:	f000 fb9c 	bl	8005460 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004d28:	4622      	mov	r2, r4
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f000 fce7 	bl	8005700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8004d32:	4622      	mov	r2, r4
 8004d34:	4629      	mov	r1, r5
 8004d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d3a:	f000 fce1 	bl	8005700 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8004d3e:	4620      	mov	r0, r4
 8004d40:	b009      	add	sp, #36	@ 0x24
 8004d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d44:	48000800 	.word	0x48000800

08004d48 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8004d48:	b508      	push	{r3, lr}
  switch (Config)
 8004d4a:	2803      	cmp	r0, #3
 8004d4c:	d810      	bhi.n	8004d70 <BSP_RADIO_ConfigRFSwitch+0x28>
 8004d4e:	e8df f000 	tbb	[pc, r0]
 8004d52:	1102      	.short	0x1102
 8004d54:	2d1f      	.short	0x2d1f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8004d56:	2200      	movs	r2, #0
 8004d58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d60:	f000 fcce 	bl	8005700 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004d64:	2200      	movs	r2, #0
 8004d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d6a:	4817      	ldr	r0, [pc, #92]	@ (8004dc8 <BSP_RADIO_ConfigRFSwitch+0x80>)
 8004d6c:	f000 fcc8 	bl	8005700 <HAL_GPIO_WritePin>
    default:
      break;
  }

  return BSP_ERROR_NONE;
}
 8004d70:	2000      	movs	r0, #0
 8004d72:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8004d74:	2201      	movs	r2, #1
 8004d76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d7e:	f000 fcbf 	bl	8005700 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004d82:	2200      	movs	r2, #0
 8004d84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d88:	480f      	ldr	r0, [pc, #60]	@ (8004dc8 <BSP_RADIO_ConfigRFSwitch+0x80>)
 8004d8a:	f000 fcb9 	bl	8005700 <HAL_GPIO_WritePin>
      break;
 8004d8e:	e7ef      	b.n	8004d70 <BSP_RADIO_ConfigRFSwitch+0x28>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8004d90:	2201      	movs	r2, #1
 8004d92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d9a:	f000 fcb1 	bl	8005700 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004da4:	4808      	ldr	r0, [pc, #32]	@ (8004dc8 <BSP_RADIO_ConfigRFSwitch+0x80>)
 8004da6:	f000 fcab 	bl	8005700 <HAL_GPIO_WritePin>
      break;
 8004daa:	e7e1      	b.n	8004d70 <BSP_RADIO_ConfigRFSwitch+0x28>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8004dac:	2201      	movs	r2, #1
 8004dae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004db2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004db6:	f000 fca3 	bl	8005700 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004dc0:	4801      	ldr	r0, [pc, #4]	@ (8004dc8 <BSP_RADIO_ConfigRFSwitch+0x80>)
 8004dc2:	f000 fc9d 	bl	8005700 <HAL_GPIO_WritePin>
      break;
 8004dc6:	e7d3      	b.n	8004d70 <BSP_RADIO_ConfigRFSwitch+0x28>
 8004dc8:	48000800 	.word	0x48000800

08004dcc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_HP;
}
 8004dcc:	2002      	movs	r0, #2
 8004dce:	4770      	bx	lr

08004dd0 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_NOT_SUPPORTED;
}
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	4770      	bx	lr

08004dd4 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	4770      	bx	lr

08004dd8 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8004dd8:	b908      	cbnz	r0, 8004dde <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8004dda:	200f      	movs	r0, #15
 8004ddc:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8004dde:	2016      	movs	r0, #22
  }

  return ret;
}
 8004de0:	4770      	bx	lr

08004de2 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8004de2:	4770      	bx	lr

08004de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004de4:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004de6:	2003      	movs	r0, #3
 8004de8:	f000 f88c 	bl	8004f04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004dec:	f000 fe20 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_Init+0x28>)
 8004df2:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004df4:	200f      	movs	r0, #15
 8004df6:	f7fe f983 	bl	8003100 <HAL_InitTick>
 8004dfa:	b110      	cbz	r0, 8004e02 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8004dfc:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8004dfe:	4620      	mov	r0, r4
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	4604      	mov	r4, r0
    HAL_MspInit();
 8004e04:	f7fe f86e 	bl	8002ee4 <HAL_MspInit>
 8004e08:	e7f9      	b.n	8004dfe <HAL_Init+0x1a>
 8004e0a:	bf00      	nop
 8004e0c:	200000e4 	.word	0x200000e4

08004e10 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004e10:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004e14:	6913      	ldr	r3, [r2, #16]
 8004e16:	f023 0302 	bic.w	r3, r3, #2
 8004e1a:	6113      	str	r3, [r2, #16]
}
 8004e1c:	4770      	bx	lr

08004e1e <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004e1e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004e22:	6913      	ldr	r3, [r2, #16]
 8004e24:	f043 0302 	orr.w	r3, r3, #2
 8004e28:	6113      	str	r3, [r2, #16]
}
 8004e2a:	4770      	bx	lr

08004e2c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004e2c:	4a02      	ldr	r2, [pc, #8]	@ (8004e38 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8004e2e:	6853      	ldr	r3, [r2, #4]
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8004e36:	4770      	bx	lr
 8004e38:	e0042000 	.word	0xe0042000

08004e3c <HAL_DBGMCU_EnableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004e3c:	4a02      	ldr	r2, [pc, #8]	@ (8004e48 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8004e3e:	6853      	ldr	r3, [r2, #4]
 8004e40:	f043 0302 	orr.w	r3, r3, #2
 8004e44:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8004e46:	4770      	bx	lr
 8004e48:	e0042000 	.word	0xe0042000

08004e4c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004e4c:	4a02      	ldr	r2, [pc, #8]	@ (8004e58 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8004e4e:	6853      	ldr	r3, [r2, #4]
 8004e50:	f043 0304 	orr.w	r3, r3, #4
 8004e54:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8004e56:	4770      	bx	lr
 8004e58:	e0042000 	.word	0xe0042000

08004e5c <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	db07      	blt.n	8004e70 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e60:	f000 021f 	and.w	r2, r0, #31
 8004e64:	0940      	lsrs	r0, r0, #5
 8004e66:	2301      	movs	r3, #1
 8004e68:	4093      	lsls	r3, r2
 8004e6a:	4a02      	ldr	r2, [pc, #8]	@ (8004e74 <__NVIC_EnableIRQ+0x18>)
 8004e6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	e000e100 	.word	0xe000e100

08004e78 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	db0c      	blt.n	8004e96 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e7c:	f000 021f 	and.w	r2, r0, #31
 8004e80:	0940      	lsrs	r0, r0, #5
 8004e82:	2301      	movs	r3, #1
 8004e84:	4093      	lsls	r3, r2
 8004e86:	3020      	adds	r0, #32
 8004e88:	4a03      	ldr	r2, [pc, #12]	@ (8004e98 <__NVIC_DisableIRQ+0x20>)
 8004e8a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004e8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004e92:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004e96:	4770      	bx	lr
 8004e98:	e000e100 	.word	0xe000e100

08004e9c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	db08      	blt.n	8004eb2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea0:	0109      	lsls	r1, r1, #4
 8004ea2:	b2c9      	uxtb	r1, r1
 8004ea4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004ea8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004eac:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8004eb0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb2:	f000 000f 	and.w	r0, r0, #15
 8004eb6:	0109      	lsls	r1, r1, #4
 8004eb8:	b2c9      	uxtb	r1, r1
 8004eba:	4b01      	ldr	r3, [pc, #4]	@ (8004ec0 <__NVIC_SetPriority+0x24>)
 8004ebc:	5419      	strb	r1, [r3, r0]
  }
}
 8004ebe:	4770      	bx	lr
 8004ec0:	e000ed14 	.word	0xe000ed14

08004ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ec4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eca:	f1c0 0c07 	rsb	ip, r0, #7
 8004ece:	f1bc 0f04 	cmp.w	ip, #4
 8004ed2:	bf28      	it	cs
 8004ed4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ed8:	1d03      	adds	r3, r0, #4
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d90f      	bls.n	8004efe <NVIC_EncodePriority+0x3a>
 8004ede:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8004ee4:	fa0e f00c 	lsl.w	r0, lr, ip
 8004ee8:	ea21 0100 	bic.w	r1, r1, r0
 8004eec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004eee:	fa0e fe03 	lsl.w	lr, lr, r3
 8004ef2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8004ef6:	ea41 0002 	orr.w	r0, r1, r2
 8004efa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004efe:	2300      	movs	r3, #0
 8004f00:	e7ee      	b.n	8004ee0 <NVIC_EncodePriority+0x1c>
	...

08004f04 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f04:	4a07      	ldr	r2, [pc, #28]	@ (8004f24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004f06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f08:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f10:	0200      	lsls	r0, r0, #8
 8004f12:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f16:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004f20:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004f22:	4770      	bx	lr
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f2c:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <HAL_NVIC_SetPriority+0x1c>)
 8004f2e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f30:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004f34:	f7ff ffc6 	bl	8004ec4 <NVIC_EncodePriority>
 8004f38:	4601      	mov	r1, r0
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7ff ffae 	bl	8004e9c <__NVIC_SetPriority>
}
 8004f40:	bd10      	pop	{r4, pc}
 8004f42:	bf00      	nop
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f48:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f4a:	f7ff ff87 	bl	8004e5c <__NVIC_EnableIRQ>
}
 8004f4e:	bd08      	pop	{r3, pc}

08004f50 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f50:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004f52:	f7ff ff91 	bl	8004e78 <__NVIC_DisableIRQ>
}
 8004f56:	bd08      	pop	{r3, pc}

08004f58 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f58:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f5a:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8004f5c:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 8004f60:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004f64:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8004f66:	b124      	cbz	r4, 8004f72 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f68:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8004f6a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 8004f6e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f72:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004f74:	f004 0c1c 	and.w	ip, r4, #28
 8004f78:	2401      	movs	r4, #1
 8004f7a:	fa04 f40c 	lsl.w	r4, r4, ip
 8004f7e:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 8004f82:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f86:	6804      	ldr	r4, [r0, #0]
 8004f88:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f8a:	6883      	ldr	r3, [r0, #8]
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d005      	beq.n	8004f9c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004f90:	6803      	ldr	r3, [r0, #0]
 8004f92:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004f94:	6803      	ldr	r3, [r0, #0]
 8004f96:	60da      	str	r2, [r3, #12]
  }
}
 8004f98:	bc10      	pop	{r4}
 8004f9a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004f9c:	6803      	ldr	r3, [r0, #0]
 8004f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004fa0:	6803      	ldr	r3, [r0, #0]
 8004fa2:	60d9      	str	r1, [r3, #12]
 8004fa4:	e7f8      	b.n	8004f98 <DMA_SetConfig+0x40>
	...

08004fa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004fa8:	6803      	ldr	r3, [r0, #0]
 8004faa:	4a14      	ldr	r2, [pc, #80]	@ (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d816      	bhi.n	8004fde <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004fb0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004fb2:	f022 0203 	bic.w	r2, r2, #3
 8004fb6:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004fba:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 8004fbe:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	3b08      	subs	r3, #8
 8004fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8004fce:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8004fdc:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004fde:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004fe0:	f022 0103 	bic.w	r1, r2, #3
 8004fe4:	4a08      	ldr	r2, [pc, #32]	@ (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004fe6:	440a      	add	r2, r1
 8004fe8:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	3b08      	subs	r3, #8
 8004fee:	4a04      	ldr	r2, [pc, #16]	@ (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	3307      	adds	r3, #7
 8004ff8:	e7e8      	b.n	8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004ffa:	bf00      	nop
 8004ffc:	40020407 	.word	0x40020407
 8005000:	cccccccd 	.word	0xcccccccd
 8005004:	40020880 	.word	0x40020880
 8005008:	4002081c 	.word	0x4002081c

0800500c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800500c:	6843      	ldr	r3, [r0, #4]
 800500e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005012:	4a07      	ldr	r2, [pc, #28]	@ (8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8005014:	441a      	add	r2, r3
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800501a:	4a06      	ldr	r2, [pc, #24]	@ (8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 800501c:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800501e:	3b01      	subs	r3, #1
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	2201      	movs	r2, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	1000823f 	.word	0x1000823f
 8005034:	40020940 	.word	0x40020940

08005038 <HAL_DMA_Init>:
  if (hdma == NULL)
 8005038:	2800      	cmp	r0, #0
 800503a:	d05e      	beq.n	80050fa <HAL_DMA_Init+0xc2>
{
 800503c:	b510      	push	{r4, lr}
 800503e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005040:	6803      	ldr	r3, [r0, #0]
 8005042:	4a2f      	ldr	r2, [pc, #188]	@ (8005100 <HAL_DMA_Init+0xc8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d840      	bhi.n	80050ca <HAL_DMA_Init+0x92>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005048:	4a2e      	ldr	r2, [pc, #184]	@ (8005104 <HAL_DMA_Init+0xcc>)
 800504a:	441a      	add	r2, r3
 800504c:	492e      	ldr	r1, [pc, #184]	@ (8005108 <HAL_DMA_Init+0xd0>)
 800504e:	fba1 1202 	umull	r1, r2, r1, r2
 8005052:	0912      	lsrs	r2, r2, #4
 8005054:	0092      	lsls	r2, r2, #2
 8005056:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005058:	4a2c      	ldr	r2, [pc, #176]	@ (800510c <HAL_DMA_Init+0xd4>)
 800505a:	6402      	str	r2, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800505c:	2202      	movs	r2, #2
 800505e:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	f36f 120e 	bfc	r2, #4, #11
 8005068:	601a      	str	r2, [r3, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800506a:	6821      	ldr	r1, [r4, #0]
 800506c:	680a      	ldr	r2, [r1, #0]
 800506e:	68a3      	ldr	r3, [r4, #8]
 8005070:	68e0      	ldr	r0, [r4, #12]
 8005072:	4303      	orrs	r3, r0
 8005074:	6920      	ldr	r0, [r4, #16]
 8005076:	4303      	orrs	r3, r0
 8005078:	6960      	ldr	r0, [r4, #20]
 800507a:	4303      	orrs	r3, r0
 800507c:	69a0      	ldr	r0, [r4, #24]
 800507e:	4303      	orrs	r3, r0
 8005080:	69e0      	ldr	r0, [r4, #28]
 8005082:	4303      	orrs	r3, r0
 8005084:	6a20      	ldr	r0, [r4, #32]
 8005086:	4303      	orrs	r3, r0
 8005088:	4313      	orrs	r3, r2
 800508a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800508c:	4620      	mov	r0, r4
 800508e:	f7ff ff8b 	bl	8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005092:	68a3      	ldr	r3, [r4, #8]
 8005094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005098:	d022      	beq.n	80050e0 <HAL_DMA_Init+0xa8>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800509e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050a4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80050a6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80050a8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050aa:	6863      	ldr	r3, [r4, #4]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d919      	bls.n	80050e6 <HAL_DMA_Init+0xae>
    hdma->DMAmuxRequestGen = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80050b6:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050b8:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ba:	2000      	movs	r0, #0
 80050bc:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80050be:	2301      	movs	r3, #1
 80050c0:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 80050c4:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80050c8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80050ca:	4a11      	ldr	r2, [pc, #68]	@ (8005110 <HAL_DMA_Init+0xd8>)
 80050cc:	441a      	add	r2, r3
 80050ce:	490e      	ldr	r1, [pc, #56]	@ (8005108 <HAL_DMA_Init+0xd0>)
 80050d0:	fba1 1202 	umull	r1, r2, r1, r2
 80050d4:	0912      	lsrs	r2, r2, #4
 80050d6:	0092      	lsls	r2, r2, #2
 80050d8:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80050da:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <HAL_DMA_Init+0xdc>)
 80050dc:	6402      	str	r2, [r0, #64]	@ 0x40
 80050de:	e7bd      	b.n	800505c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050e0:	2300      	movs	r3, #0
 80050e2:	6063      	str	r3, [r4, #4]
 80050e4:	e7d9      	b.n	800509a <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050e6:	4620      	mov	r0, r4
 80050e8:	f7ff ff90 	bl	800500c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050f4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80050f6:	605a      	str	r2, [r3, #4]
 80050f8:	e7df      	b.n	80050ba <HAL_DMA_Init+0x82>
    return HAL_ERROR;
 80050fa:	2001      	movs	r0, #1
}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40020407 	.word	0x40020407
 8005104:	bffdfff8 	.word	0xbffdfff8
 8005108:	cccccccd 	.word	0xcccccccd
 800510c:	40020000 	.word	0x40020000
 8005110:	bffdfbf8 	.word	0xbffdfbf8
 8005114:	40020400 	.word	0x40020400

08005118 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8005118:	2800      	cmp	r0, #0
 800511a:	d04b      	beq.n	80051b4 <HAL_DMA_DeInit+0x9c>
{
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8005120:	6802      	ldr	r2, [r0, #0]
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800512a:	6802      	ldr	r2, [r0, #0]
 800512c:	4b22      	ldr	r3, [pc, #136]	@ (80051b8 <HAL_DMA_DeInit+0xa0>)
 800512e:	429a      	cmp	r2, r3
 8005130:	d82c      	bhi.n	800518c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005132:	4b22      	ldr	r3, [pc, #136]	@ (80051bc <HAL_DMA_DeInit+0xa4>)
 8005134:	4413      	add	r3, r2
 8005136:	4922      	ldr	r1, [pc, #136]	@ (80051c0 <HAL_DMA_DeInit+0xa8>)
 8005138:	fba1 1303 	umull	r1, r3, r1, r3
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005142:	4b20      	ldr	r3, [pc, #128]	@ (80051c4 <HAL_DMA_DeInit+0xac>)
 8005144:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8005146:	2500      	movs	r5, #0
 8005148:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800514a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800514c:	f003 021c 	and.w	r2, r3, #28
 8005150:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005152:	2301      	movs	r3, #1
 8005154:	4093      	lsls	r3, r2
 8005156:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005158:	4620      	mov	r0, r4
 800515a:	f7ff ff25 	bl	8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800515e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005160:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005162:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005164:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005166:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005168:	6863      	ldr	r3, [r4, #4]
 800516a:	3b01      	subs	r3, #1
 800516c:	2b03      	cmp	r3, #3
 800516e:	d918      	bls.n	80051a2 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8005170:	2000      	movs	r0, #0
 8005172:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8005174:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005176:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8005178:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800517a:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800517c:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800517e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005180:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8005182:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8005186:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 800518a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800518c:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <HAL_DMA_DeInit+0xb0>)
 800518e:	4413      	add	r3, r2
 8005190:	490b      	ldr	r1, [pc, #44]	@ (80051c0 <HAL_DMA_DeInit+0xa8>)
 8005192:	fba1 1303 	umull	r1, r3, r1, r3
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800519c:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <HAL_DMA_DeInit+0xb4>)
 800519e:	6403      	str	r3, [r0, #64]	@ 0x40
 80051a0:	e7d1      	b.n	8005146 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff ff32 	bl	800500c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80051a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80051aa:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051ae:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	e7dd      	b.n	8005170 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80051b4:	2001      	movs	r0, #1
}
 80051b6:	4770      	bx	lr
 80051b8:	40020407 	.word	0x40020407
 80051bc:	bffdfff8 	.word	0xbffdfff8
 80051c0:	cccccccd 	.word	0xcccccccd
 80051c4:	40020000 	.word	0x40020000
 80051c8:	bffdfbf8 	.word	0xbffdfbf8
 80051cc:	40020400 	.word	0x40020400

080051d0 <HAL_DMA_Start_IT>:
{
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80051d4:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 80051d8:	2801      	cmp	r0, #1
 80051da:	d043      	beq.n	8005264 <HAL_DMA_Start_IT+0x94>
 80051dc:	2001      	movs	r0, #1
 80051de:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 80051e2:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 80051e6:	b2c0      	uxtb	r0, r0
 80051e8:	2801      	cmp	r0, #1
 80051ea:	d006      	beq.n	80051fa <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051ec:	2380      	movs	r3, #128	@ 0x80
 80051ee:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80051f0:	2300      	movs	r3, #0
 80051f2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 80051f6:	2001      	movs	r0, #1
}
 80051f8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80051fa:	2002      	movs	r0, #2
 80051fc:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005200:	2000      	movs	r0, #0
 8005202:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005204:	6825      	ldr	r5, [r4, #0]
 8005206:	6828      	ldr	r0, [r5, #0]
 8005208:	f020 0001 	bic.w	r0, r0, #1
 800520c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800520e:	4620      	mov	r0, r4
 8005210:	f7ff fea2 	bl	8004f58 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8005214:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005216:	b1d3      	cbz	r3, 800524e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	6813      	ldr	r3, [r2, #0]
 800521c:	f043 030e 	orr.w	r3, r3, #14
 8005220:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005222:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800522a:	d003      	beq.n	8005234 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005232:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8005234:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005236:	b11b      	cbz	r3, 8005240 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800523e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524a:	2000      	movs	r0, #0
 800524c:	e7d4      	b.n	80051f8 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	6813      	ldr	r3, [r2, #0]
 8005252:	f023 0304 	bic.w	r3, r3, #4
 8005256:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	6813      	ldr	r3, [r2, #0]
 800525c:	f043 030a 	orr.w	r3, r3, #10
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e7de      	b.n	8005222 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8005264:	2002      	movs	r0, #2
 8005266:	e7c7      	b.n	80051f8 <HAL_DMA_Start_IT+0x28>

08005268 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8005268:	4603      	mov	r3, r0
 800526a:	2800      	cmp	r0, #0
 800526c:	d034      	beq.n	80052d8 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800526e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	2a02      	cmp	r2, #2
 8005276:	d006      	beq.n	8005286 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005278:	2204      	movs	r2, #4
 800527a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800527c:	2200      	movs	r2, #0
 800527e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8005282:	2001      	movs	r0, #1
 8005284:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005286:	6801      	ldr	r1, [r0, #0]
 8005288:	680a      	ldr	r2, [r1, #0]
 800528a:	f022 020e 	bic.w	r2, r2, #14
 800528e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005290:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005292:	680a      	ldr	r2, [r1, #0]
 8005294:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005298:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800529a:	6801      	ldr	r1, [r0, #0]
 800529c:	680a      	ldr	r2, [r1, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052a4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80052a6:	f002 011c 	and.w	r1, r2, #28
 80052aa:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80052ac:	2201      	movs	r2, #1
 80052ae:	408a      	lsls	r2, r1
 80052b0:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80052b6:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80052b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052ba:	b132      	cbz	r2, 80052ca <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052bc:	6811      	ldr	r1, [r2, #0]
 80052be:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80052c2:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80052c6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80052c8:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80052d0:	2000      	movs	r0, #0
 80052d2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 80052d6:	4770      	bx	lr
    return HAL_ERROR;
 80052d8:	2001      	movs	r0, #1
}
 80052da:	4770      	bx	lr

080052dc <HAL_DMA_Abort_IT>:
{
 80052dc:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052de:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d003      	beq.n	80052f0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052e8:	2304      	movs	r3, #4
 80052ea:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80052ec:	2001      	movs	r0, #1
}
 80052ee:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052f0:	6802      	ldr	r2, [r0, #0]
 80052f2:	6813      	ldr	r3, [r2, #0]
 80052f4:	f023 030e 	bic.w	r3, r3, #14
 80052f8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80052fa:	6802      	ldr	r2, [r0, #0]
 80052fc:	6813      	ldr	r3, [r2, #0]
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005304:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800530c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800530e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005310:	f003 021c 	and.w	r2, r3, #28
 8005314:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005316:	2301      	movs	r3, #1
 8005318:	4093      	lsls	r3, r2
 800531a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800531e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8005320:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8005322:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005324:	b133      	cbz	r3, 8005334 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800532c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005330:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8005332:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005334:	2301      	movs	r3, #1
 8005336:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800533a:	2300      	movs	r3, #0
 800533c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8005340:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005342:	b113      	cbz	r3, 800534a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8005344:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005346:	2000      	movs	r0, #0
 8005348:	e7d1      	b.n	80052ee <HAL_DMA_Abort_IT+0x12>
 800534a:	2000      	movs	r0, #0
 800534c:	e7cf      	b.n	80052ee <HAL_DMA_Abort_IT+0x12>
	...

08005350 <HAL_DMA_IRQHandler>:
{
 8005350:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005352:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005354:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005356:	6804      	ldr	r4, [r0, #0]
 8005358:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800535a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800535c:	f003 031c 	and.w	r3, r3, #28
 8005360:	2204      	movs	r2, #4
 8005362:	409a      	lsls	r2, r3
 8005364:	420a      	tst	r2, r1
 8005366:	d015      	beq.n	8005394 <HAL_DMA_IRQHandler+0x44>
 8005368:	f015 0f04 	tst.w	r5, #4
 800536c:	d012      	beq.n	8005394 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f013 0f20 	tst.w	r3, #32
 8005374:	d103      	bne.n	800537e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f023 0304 	bic.w	r3, r3, #4
 800537c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800537e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005380:	f003 021c 	and.w	r2, r3, #28
 8005384:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005386:	2304      	movs	r3, #4
 8005388:	4093      	lsls	r3, r2
 800538a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800538c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800538e:	b103      	cbz	r3, 8005392 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8005390:	4798      	blx	r3
}
 8005392:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005394:	2202      	movs	r2, #2
 8005396:	409a      	lsls	r2, r3
 8005398:	420a      	tst	r2, r1
 800539a:	d028      	beq.n	80053ee <HAL_DMA_IRQHandler+0x9e>
 800539c:	f015 0f02 	tst.w	r5, #2
 80053a0:	d025      	beq.n	80053ee <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f013 0f20 	tst.w	r3, #32
 80053a8:	d106      	bne.n	80053b8 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	f023 030a 	bic.w	r3, r3, #10
 80053b0:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80053b8:	6802      	ldr	r2, [r0, #0]
 80053ba:	4b1c      	ldr	r3, [pc, #112]	@ (800542c <HAL_DMA_IRQHandler+0xdc>)
 80053bc:	429a      	cmp	r2, r3
 80053be:	d90e      	bls.n	80053de <HAL_DMA_IRQHandler+0x8e>
 80053c0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80053c2:	f003 021c 	and.w	r2, r3, #28
 80053c6:	2302      	movs	r3, #2
 80053c8:	4093      	lsls	r3, r2
 80053ca:	4a19      	ldr	r2, [pc, #100]	@ (8005430 <HAL_DMA_IRQHandler+0xe0>)
 80053cc:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80053ce:	2300      	movs	r3, #0
 80053d0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 80053d4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0db      	beq.n	8005392 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80053da:	4798      	blx	r3
 80053dc:	e7d9      	b.n	8005392 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80053de:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80053e0:	f003 021c 	and.w	r2, r3, #28
 80053e4:	2302      	movs	r3, #2
 80053e6:	4093      	lsls	r3, r2
 80053e8:	4a12      	ldr	r2, [pc, #72]	@ (8005434 <HAL_DMA_IRQHandler+0xe4>)
 80053ea:	6053      	str	r3, [r2, #4]
 80053ec:	e7ef      	b.n	80053ce <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80053ee:	2208      	movs	r2, #8
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	420b      	tst	r3, r1
 80053f6:	d0cc      	beq.n	8005392 <HAL_DMA_IRQHandler+0x42>
 80053f8:	f015 0f08 	tst.w	r5, #8
 80053fc:	d0c9      	beq.n	8005392 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	f023 030e 	bic.w	r3, r3, #14
 8005404:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005406:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005408:	f003 031c 	and.w	r3, r3, #28
 800540c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800540e:	2201      	movs	r2, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005416:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005418:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800541c:	2300      	movs	r3, #0
 800541e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8005422:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0b4      	beq.n	8005392 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8005428:	4798      	blx	r3
  return;
 800542a:	e7b2      	b.n	8005392 <HAL_DMA_IRQHandler+0x42>
 800542c:	40020080 	.word	0x40020080
 8005430:	40020400 	.word	0x40020400
 8005434:	40020000 	.word	0x40020000

08005438 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8005438:	b178      	cbz	r0, 800545a <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 800543a:	6803      	ldr	r3, [r0, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800543e:	f011 0f10 	tst.w	r1, #16
 8005442:	d004      	beq.n	800544e <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8005444:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005448:	d004      	beq.n	8005454 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 800544a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800544e:	601a      	str	r2, [r3, #0]
  return status;
 8005450:	2000      	movs	r0, #0
 8005452:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8005454:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005458:	e7f9      	b.n	800544e <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 800545a:	2001      	movs	r0, #1
}
 800545c:	4770      	bx	lr
	...

08005460 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005460:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8005462:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005464:	e069      	b.n	800553a <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005466:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005468:	005e      	lsls	r6, r3, #1
 800546a:	2403      	movs	r4, #3
 800546c:	40b4      	lsls	r4, r6
 800546e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005472:	68cc      	ldr	r4, [r1, #12]
 8005474:	40b4      	lsls	r4, r6
 8005476:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005478:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800547a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800547c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005480:	684c      	ldr	r4, [r1, #4]
 8005482:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8005486:	409c      	lsls	r4, r3
 8005488:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800548a:	6044      	str	r4, [r0, #4]
 800548c:	e066      	b.n	800555c <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800548e:	08dd      	lsrs	r5, r3, #3
 8005490:	3508      	adds	r5, #8
 8005492:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005496:	f003 0c07 	and.w	ip, r3, #7
 800549a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800549e:	f04f 0e0f 	mov.w	lr, #15
 80054a2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80054a6:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054aa:	690c      	ldr	r4, [r1, #16]
 80054ac:	fa04 f40c 	lsl.w	r4, r4, ip
 80054b0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 80054b4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80054b8:	e067      	b.n	800558a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054ba:	2402      	movs	r4, #2
 80054bc:	e000      	b.n	80054c0 <HAL_GPIO_Init+0x60>
 80054be:	2400      	movs	r4, #0
 80054c0:	fa04 f40e 	lsl.w	r4, r4, lr
 80054c4:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054c6:	f10c 0c02 	add.w	ip, ip, #2
 80054ca:	4d4b      	ldr	r5, [pc, #300]	@ (80055f8 <HAL_GPIO_Init+0x198>)
 80054cc:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054d0:	4c4a      	ldr	r4, [pc, #296]	@ (80055fc <HAL_GPIO_Init+0x19c>)
 80054d2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80054d4:	43d4      	mvns	r4, r2
 80054d6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054da:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80054de:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 80054e2:	d001      	beq.n	80054e8 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80054e4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80054e8:	4d44      	ldr	r5, [pc, #272]	@ (80055fc <HAL_GPIO_Init+0x19c>)
 80054ea:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80054ec:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80054ee:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054f2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80054f6:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 80054fa:	d001      	beq.n	8005500 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80054fc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8005500:	4d3e      	ldr	r5, [pc, #248]	@ (80055fc <HAL_GPIO_Init+0x19c>)
 8005502:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005504:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005508:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800550c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005510:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 8005514:	d001      	beq.n	800551a <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8005516:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800551a:	4d38      	ldr	r5, [pc, #224]	@ (80055fc <HAL_GPIO_Init+0x19c>)
 800551c:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005520:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005524:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005526:	684e      	ldr	r6, [r1, #4]
 8005528:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800552c:	d001      	beq.n	8005532 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 800552e:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005532:	4a32      	ldr	r2, [pc, #200]	@ (80055fc <HAL_GPIO_Init+0x19c>)
 8005534:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005538:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800553a:	680a      	ldr	r2, [r1, #0]
 800553c:	fa32 f403 	lsrs.w	r4, r2, r3
 8005540:	d058      	beq.n	80055f4 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005542:	f04f 0c01 	mov.w	ip, #1
 8005546:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800554a:	ea1c 0202 	ands.w	r2, ip, r2
 800554e:	d0f3      	beq.n	8005538 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005550:	684c      	ldr	r4, [r1, #4]
 8005552:	f004 0403 	and.w	r4, r4, #3
 8005556:	3c01      	subs	r4, #1
 8005558:	2c01      	cmp	r4, #1
 800555a:	d984      	bls.n	8005466 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800555c:	684c      	ldr	r4, [r1, #4]
 800555e:	f004 0403 	and.w	r4, r4, #3
 8005562:	2c03      	cmp	r4, #3
 8005564:	d00c      	beq.n	8005580 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8005566:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005568:	005d      	lsls	r5, r3, #1
 800556a:	f04f 0c03 	mov.w	ip, #3
 800556e:	fa0c fc05 	lsl.w	ip, ip, r5
 8005572:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005576:	688c      	ldr	r4, [r1, #8]
 8005578:	40ac      	lsls	r4, r5
 800557a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800557e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005580:	684c      	ldr	r4, [r1, #4]
 8005582:	f004 0403 	and.w	r4, r4, #3
 8005586:	2c02      	cmp	r4, #2
 8005588:	d081      	beq.n	800548e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800558a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800558c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005590:	f04f 0c03 	mov.w	ip, #3
 8005594:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005598:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800559c:	684c      	ldr	r4, [r1, #4]
 800559e:	f004 0403 	and.w	r4, r4, #3
 80055a2:	fa04 f40e 	lsl.w	r4, r4, lr
 80055a6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80055aa:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055ac:	684c      	ldr	r4, [r1, #4]
 80055ae:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80055b2:	d0c1      	beq.n	8005538 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 80055b4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80055b8:	f10c 0502 	add.w	r5, ip, #2
 80055bc:	4c0e      	ldr	r4, [pc, #56]	@ (80055f8 <HAL_GPIO_Init+0x198>)
 80055be:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80055c2:	f003 0e03 	and.w	lr, r3, #3
 80055c6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80055ca:	2407      	movs	r4, #7
 80055cc:	fa04 f40e 	lsl.w	r4, r4, lr
 80055d0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055d4:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80055d8:	f43f af71 	beq.w	80054be <HAL_GPIO_Init+0x5e>
 80055dc:	4c08      	ldr	r4, [pc, #32]	@ (8005600 <HAL_GPIO_Init+0x1a0>)
 80055de:	42a0      	cmp	r0, r4
 80055e0:	d006      	beq.n	80055f0 <HAL_GPIO_Init+0x190>
 80055e2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80055e6:	42a0      	cmp	r0, r4
 80055e8:	f43f af67 	beq.w	80054ba <HAL_GPIO_Init+0x5a>
 80055ec:	2407      	movs	r4, #7
 80055ee:	e767      	b.n	80054c0 <HAL_GPIO_Init+0x60>
 80055f0:	2401      	movs	r4, #1
 80055f2:	e765      	b.n	80054c0 <HAL_GPIO_Init+0x60>
  }
}
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	58000800 	.word	0x58000800
 8005600:	48000400 	.word	0x48000400

08005604 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8005604:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005606:	fa31 f203 	lsrs.w	r2, r1, r3
 800560a:	d071      	beq.n	80056f0 <HAL_GPIO_DeInit+0xec>
{
 800560c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800560e:	e02e      	b.n	800566e <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005610:	2502      	movs	r5, #2
 8005612:	e000      	b.n	8005616 <HAL_GPIO_DeInit+0x12>
 8005614:	2500      	movs	r5, #0
 8005616:	fa05 f50c 	lsl.w	r5, r5, ip
 800561a:	42a5      	cmp	r5, r4
 800561c:	d049      	beq.n	80056b2 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800561e:	6804      	ldr	r4, [r0, #0]
 8005620:	005d      	lsls	r5, r3, #1
 8005622:	f04f 0c03 	mov.w	ip, #3
 8005626:	fa0c fc05 	lsl.w	ip, ip, r5
 800562a:	ea44 040c 	orr.w	r4, r4, ip
 800562e:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005630:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8005634:	f10e 0e08 	add.w	lr, lr, #8
 8005638:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800563c:	f003 0607 	and.w	r6, r3, #7
 8005640:	00b6      	lsls	r6, r6, #2
 8005642:	250f      	movs	r5, #15
 8005644:	40b5      	lsls	r5, r6
 8005646:	ea24 0405 	bic.w	r4, r4, r5
 800564a:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800564e:	6884      	ldr	r4, [r0, #8]
 8005650:	ea24 040c 	bic.w	r4, r4, ip
 8005654:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005656:	6844      	ldr	r4, [r0, #4]
 8005658:	ea24 0202 	bic.w	r2, r4, r2
 800565c:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800565e:	68c2      	ldr	r2, [r0, #12]
 8005660:	ea22 020c 	bic.w	r2, r2, ip
 8005664:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8005666:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8005668:	fa31 f203 	lsrs.w	r2, r1, r3
 800566c:	d03f      	beq.n	80056ee <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800566e:	2201      	movs	r2, #1
 8005670:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8005672:	ea12 0701 	ands.w	r7, r2, r1
 8005676:	d0f6      	beq.n	8005666 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005678:	089e      	lsrs	r6, r3, #2
 800567a:	1cb5      	adds	r5, r6, #2
 800567c:	4c1d      	ldr	r4, [pc, #116]	@ (80056f4 <HAL_GPIO_DeInit+0xf0>)
 800567e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005682:	f003 0c03 	and.w	ip, r3, #3
 8005686:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800568a:	f04f 0e07 	mov.w	lr, #7
 800568e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005692:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005696:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800569a:	d0bb      	beq.n	8005614 <HAL_GPIO_DeInit+0x10>
 800569c:	4d16      	ldr	r5, [pc, #88]	@ (80056f8 <HAL_GPIO_DeInit+0xf4>)
 800569e:	42a8      	cmp	r0, r5
 80056a0:	d005      	beq.n	80056ae <HAL_GPIO_DeInit+0xaa>
 80056a2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056a6:	42a8      	cmp	r0, r5
 80056a8:	d0b2      	beq.n	8005610 <HAL_GPIO_DeInit+0xc>
 80056aa:	2507      	movs	r5, #7
 80056ac:	e7b3      	b.n	8005616 <HAL_GPIO_DeInit+0x12>
 80056ae:	2501      	movs	r5, #1
 80056b0:	e7b1      	b.n	8005616 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 80056b2:	4c12      	ldr	r4, [pc, #72]	@ (80056fc <HAL_GPIO_DeInit+0xf8>)
 80056b4:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 80056b8:	ea25 0507 	bic.w	r5, r5, r7
 80056bc:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80056c0:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 80056c4:	ea25 0507 	bic.w	r5, r5, r7
 80056c8:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80056cc:	6825      	ldr	r5, [r4, #0]
 80056ce:	ea25 0507 	bic.w	r5, r5, r7
 80056d2:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80056d4:	6865      	ldr	r5, [r4, #4]
 80056d6:	ea25 0507 	bic.w	r5, r5, r7
 80056da:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80056dc:	4d05      	ldr	r5, [pc, #20]	@ (80056f4 <HAL_GPIO_DeInit+0xf0>)
 80056de:	3602      	adds	r6, #2
 80056e0:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80056e4:	ea24 040e 	bic.w	r4, r4, lr
 80056e8:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80056ec:	e797      	b.n	800561e <HAL_GPIO_DeInit+0x1a>
  }
}
 80056ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	48000400 	.word	0x48000400
 80056fc:	58000800 	.word	0x58000800

08005700 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005700:	b10a      	cbz	r2, 8005706 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005702:	6181      	str	r1, [r0, #24]
 8005704:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005706:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005708:	4770      	bx	lr

0800570a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800570a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800570c:	ea01 0203 	and.w	r2, r1, r3
 8005710:	ea21 0103 	bic.w	r1, r1, r3
 8005714:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005718:	6181      	str	r1, [r0, #24]
}
 800571a:	4770      	bx	lr

0800571c <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800571c:	4a02      	ldr	r2, [pc, #8]	@ (8005728 <HAL_PWR_EnableBkUpAccess+0xc>)
 800571e:	6813      	ldr	r3, [r2, #0]
 8005720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005724:	6013      	str	r3, [r2, #0]
}
 8005726:	4770      	bx	lr
 8005728:	58000400 	.word	0x58000400

0800572c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800572c:	b510      	push	{r4, lr}
 800572e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005730:	b9a0      	cbnz	r0, 800575c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005732:	4b0f      	ldr	r3, [pc, #60]	@ (8005770 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800573a:	d10a      	bne.n	8005752 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800573c:	4a0d      	ldr	r2, [pc, #52]	@ (8005774 <HAL_PWR_EnterSLEEPMode+0x48>)
 800573e:	6913      	ldr	r3, [r2, #16]
 8005740:	f023 0304 	bic.w	r3, r3, #4
 8005744:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005746:	2c01      	cmp	r4, #1
 8005748:	d010      	beq.n	800576c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800574a:	bf40      	sev
    __WFE();
 800574c:	bf20      	wfe
    __WFE();
 800574e:	bf20      	wfe
  }
}
 8005750:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005752:	f000 f821 	bl	8005798 <HAL_PWREx_DisableLowPowerRunMode>
 8005756:	2800      	cmp	r0, #0
 8005758:	d0f0      	beq.n	800573c <HAL_PWR_EnterSLEEPMode+0x10>
 800575a:	e7f9      	b.n	8005750 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800575c:	4b04      	ldr	r3, [pc, #16]	@ (8005770 <HAL_PWR_EnterSLEEPMode+0x44>)
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8005764:	d1ea      	bne.n	800573c <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8005766:	f000 f80f 	bl	8005788 <HAL_PWREx_EnableLowPowerRunMode>
 800576a:	e7e7      	b.n	800573c <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 800576c:	bf30      	wfi
 800576e:	e7ef      	b.n	8005750 <HAL_PWR_EnterSLEEPMode+0x24>
 8005770:	58000400 	.word	0x58000400
 8005774:	e000ed00 	.word	0xe000ed00

08005778 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005778:	4b02      	ldr	r3, [pc, #8]	@ (8005784 <HAL_PWREx_GetVoltageRange+0xc>)
 800577a:	6818      	ldr	r0, [r3, #0]
}
 800577c:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	58000400 	.word	0x58000400

08005788 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005788:	4a02      	ldr	r2, [pc, #8]	@ (8005794 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005790:	6013      	str	r3, [r2, #0]
}
 8005792:	4770      	bx	lr
 8005794:	58000400 	.word	0x58000400

08005798 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005798:	4a0f      	ldr	r2, [pc, #60]	@ (80057d8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800579a:	6813      	ldr	r3, [r2, #0]
 800579c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057a0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80057a2:	4b0e      	ldr	r3, [pc, #56]	@ (80057dc <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2232      	movs	r2, #50	@ 0x32
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	4a0c      	ldr	r2, [pc, #48]	@ (80057e0 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80057b4:	e000      	b.n	80057b8 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80057b6:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80057b8:	4a07      	ldr	r2, [pc, #28]	@ (80057d8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80057ba:	6952      	ldr	r2, [r2, #20]
 80057bc:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80057c0:	d001      	beq.n	80057c6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f7      	bne.n	80057b6 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80057c6:	4b04      	ldr	r3, [pc, #16]	@ (80057d8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80057ce:	d101      	bne.n	80057d4 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80057d0:	2000      	movs	r0, #0
 80057d2:	4770      	bx	lr
    return HAL_TIMEOUT;
 80057d4:	2003      	movs	r0, #3
}
 80057d6:	4770      	bx	lr
 80057d8:	58000400 	.word	0x58000400
 80057dc:	200000e4 	.word	0x200000e4
 80057e0:	431bde83 	.word	0x431bde83

080057e4 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80057e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005818 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80057e6:	6813      	ldr	r3, [r2, #0]
 80057e8:	f023 0307 	bic.w	r3, r3, #7
 80057ec:	f043 0302 	orr.w	r3, r3, #2
 80057f0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057f2:	4a0a      	ldr	r2, [pc, #40]	@ (800581c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80057f4:	6913      	ldr	r3, [r2, #16]
 80057f6:	f043 0304 	orr.w	r3, r3, #4
 80057fa:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80057fc:	2801      	cmp	r0, #1
 80057fe:	d008      	beq.n	8005812 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005800:	bf40      	sev
    __WFE();
 8005802:	bf20      	wfe
    __WFE();
 8005804:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005806:	4a05      	ldr	r2, [pc, #20]	@ (800581c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005808:	6913      	ldr	r3, [r2, #16]
 800580a:	f023 0304 	bic.w	r3, r3, #4
 800580e:	6113      	str	r3, [r2, #16]
}
 8005810:	4770      	bx	lr
    __WFI();
 8005812:	bf30      	wfi
 8005814:	e7f7      	b.n	8005806 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005816:	bf00      	nop
 8005818:	58000400 	.word	0x58000400
 800581c:	e000ed00 	.word	0xe000ed00

08005820 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005820:	b530      	push	{r4, r5, lr}
 8005822:	b089      	sub	sp, #36	@ 0x24
 8005824:	4604      	mov	r4, r0
 8005826:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005828:	4b2a      	ldr	r3, [pc, #168]	@ (80058d4 <RCC_SetFlashLatency+0xb4>)
 800582a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800582e:	9006      	str	r0, [sp, #24]
 8005830:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005834:	f103 0208 	add.w	r2, r3, #8
 8005838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800583c:	9004      	str	r0, [sp, #16]
 800583e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005842:	ad01      	add	r5, sp, #4
 8005844:	3310      	adds	r3, #16
 8005846:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800584a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800584e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8005852:	d007      	beq.n	8005864 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005854:	2300      	movs	r3, #0
 8005856:	e014      	b.n	8005882 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005858:	aa08      	add	r2, sp, #32
 800585a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800585e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005862:	e01e      	b.n	80058a2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005864:	2300      	movs	r3, #0
 8005866:	2b02      	cmp	r3, #2
 8005868:	d808      	bhi.n	800587c <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800586a:	aa08      	add	r2, sp, #32
 800586c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005870:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005874:	42a2      	cmp	r2, r4
 8005876:	d2ef      	bcs.n	8005858 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005878:	3301      	adds	r3, #1
 800587a:	e7f4      	b.n	8005866 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800587c:	2500      	movs	r5, #0
 800587e:	e010      	b.n	80058a2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005880:	3301      	adds	r3, #1
 8005882:	2b02      	cmp	r3, #2
 8005884:	d80c      	bhi.n	80058a0 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005886:	aa08      	add	r2, sp, #32
 8005888:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800588c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005890:	42a2      	cmp	r2, r4
 8005892:	d3f5      	bcc.n	8005880 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005894:	aa08      	add	r2, sp, #32
 8005896:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800589a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800589e:	e000      	b.n	80058a2 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80058a0:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058a2:	4a0d      	ldr	r2, [pc, #52]	@ (80058d8 <RCC_SetFlashLatency+0xb8>)
 80058a4:	6813      	ldr	r3, [r2, #0]
 80058a6:	f023 0307 	bic.w	r3, r3, #7
 80058aa:	432b      	orrs	r3, r5
 80058ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058ae:	f7fd fc29 	bl	8003104 <HAL_GetTick>
 80058b2:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80058b4:	4b08      	ldr	r3, [pc, #32]	@ (80058d8 <RCC_SetFlashLatency+0xb8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	42ab      	cmp	r3, r5
 80058be:	d006      	beq.n	80058ce <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058c0:	f7fd fc20 	bl	8003104 <HAL_GetTick>
 80058c4:	1b00      	subs	r0, r0, r4
 80058c6:	2802      	cmp	r0, #2
 80058c8:	d9f4      	bls.n	80058b4 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80058ca:	2003      	movs	r0, #3
 80058cc:	e000      	b.n	80058d0 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80058ce:	2000      	movs	r0, #0
}
 80058d0:	b009      	add	sp, #36	@ 0x24
 80058d2:	bd30      	pop	{r4, r5, pc}
 80058d4:	0800eae8 	.word	0x0800eae8
 80058d8:	58004000 	.word	0x58004000

080058dc <RCC_SetFlashLatencyFromMSIRange>:
{
 80058dc:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80058de:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80058e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80058e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	4a08      	ldr	r2, [pc, #32]	@ (8005918 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80058f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fa:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80058fe:	f7ff ff3b 	bl	8005778 <HAL_PWREx_GetVoltageRange>
 8005902:	4601      	mov	r1, r0
 8005904:	4b05      	ldr	r3, [pc, #20]	@ (800591c <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8005906:	fba3 3404 	umull	r3, r4, r3, r4
 800590a:	0ca0      	lsrs	r0, r4, #18
 800590c:	f7ff ff88 	bl	8005820 <RCC_SetFlashLatency>
}
 8005910:	bd10      	pop	{r4, pc}
 8005912:	bf00      	nop
 8005914:	08010ab4 	.word	0x08010ab4
 8005918:	08010b14 	.word	0x08010b14
 800591c:	431bde83 	.word	0x431bde83

08005920 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005924:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800592c:	f011 010c 	ands.w	r1, r1, #12
 8005930:	d00a      	beq.n	8005948 <HAL_RCC_GetSysClockFreq+0x28>
 8005932:	290c      	cmp	r1, #12
 8005934:	d006      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005936:	2904      	cmp	r1, #4
 8005938:	d047      	beq.n	80059ca <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800593a:	2908      	cmp	r1, #8
 800593c:	d03b      	beq.n	80059b6 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800593e:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005940:	4610      	mov	r0, r2
 8005942:	e026      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005944:	2b01      	cmp	r3, #1
 8005946:	d1f6      	bne.n	8005936 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f013 0308 	ands.w	r3, r3, #8
 8005952:	d00d      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0x50>
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f013 0308 	ands.w	r3, r3, #8
 800595e:	d124      	bne.n	80059aa <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005960:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005964:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005968:	4a2e      	ldr	r2, [pc, #184]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0x104>)
 800596a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800596e:	e00e      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	f012 0f08 	tst.w	r2, #8
 800597a:	d112      	bne.n	80059a2 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005984:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005988:	4a26      	ldr	r2, [pc, #152]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0x104>)
 800598a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800598e:	b1d1      	cbz	r1, 80059c6 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005990:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800599c:	2b0c      	cmp	r3, #12
 800599e:	d01a      	beq.n	80059d6 <HAL_RCC_GetSysClockFreq+0xb6>
}
 80059a0:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80059a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	e7ee      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x68>
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ae:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80059b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80059b4:	e7d8      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 80059c0:	d106      	bne.n	80059d0 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80059c2:	4819      	ldr	r0, [pc, #100]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80059c4:	e7e5      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80059c6:	4610      	mov	r0, r2
 80059c8:	e7e3      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80059ca:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80059cc:	4817      	ldr	r0, [pc, #92]	@ (8005a2c <HAL_RCC_GetSysClockFreq+0x10c>)
 80059ce:	e7e0      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80059d0:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80059d2:	4816      	ldr	r0, [pc, #88]	@ (8005a2c <HAL_RCC_GetSysClockFreq+0x10c>)
 80059d4:	e7dd      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d009      	beq.n	80059f8 <HAL_RCC_GetSysClockFreq+0xd8>
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d108      	bne.n	80059fa <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80059e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80059f2:	d115      	bne.n	8005a20 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80059f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80059f6:	e000      	b.n	80059fa <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80059f8:	4a0c      	ldr	r2, [pc, #48]	@ (8005a2c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80059fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059fe:	68cb      	ldr	r3, [r1, #12]
 8005a00:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005a04:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a08:	68cb      	ldr	r3, [r1, #12]
 8005a0a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005a0e:	3301      	adds	r3, #1
 8005a10:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005a14:	68c8      	ldr	r0, [r1, #12]
 8005a16:	0f40      	lsrs	r0, r0, #29
 8005a18:	3001      	adds	r0, #1
 8005a1a:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005a1e:	e7bf      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005a20:	4a02      	ldr	r2, [pc, #8]	@ (8005a2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a22:	e7ea      	b.n	80059fa <HAL_RCC_GetSysClockFreq+0xda>
 8005a24:	08010ab4 	.word	0x08010ab4
 8005a28:	01e84800 	.word	0x01e84800
 8005a2c:	00f42400 	.word	0x00f42400

08005a30 <HAL_RCC_GetHCLKFreq>:
{
 8005a30:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005a32:	f7ff ff75 	bl	8005920 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a40:	4a02      	ldr	r2, [pc, #8]	@ (8005a4c <HAL_RCC_GetHCLKFreq+0x1c>)
 8005a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005a46:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a4a:	bd08      	pop	{r3, pc}
 8005a4c:	08010b14 	.word	0x08010b14

08005a50 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f000 8311 	beq.w	8006078 <HAL_RCC_OscConfig+0x628>
{
 8005a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a58:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5e:	689d      	ldr	r5, [r3, #8]
 8005a60:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a64:	68de      	ldr	r6, [r3, #12]
 8005a66:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a6a:	6803      	ldr	r3, [r0, #0]
 8005a6c:	f013 0f20 	tst.w	r3, #32
 8005a70:	d02a      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a72:	2d00      	cmp	r5, #0
 8005a74:	d065      	beq.n	8005b42 <HAL_RCC_OscConfig+0xf2>
 8005a76:	2d0c      	cmp	r5, #12
 8005a78:	d061      	beq.n	8005b3e <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a7a:	6a23      	ldr	r3, [r4, #32]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80bf 	beq.w	8005c00 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a86:	6813      	ldr	r3, [r2, #0]
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a8e:	f7fd fb39 	bl	8003104 <HAL_GetTick>
 8005a92:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f013 0f02 	tst.w	r3, #2
 8005a9e:	f000 80a7 	beq.w	8005bf0 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	f042 0208 	orr.w	r2, r2, #8
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005ab4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005ac2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ac6:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f013 0f01 	tst.w	r3, #1
 8005ace:	f000 80b5 	beq.w	8005c3c <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ad2:	2d08      	cmp	r5, #8
 8005ad4:	f000 80ae 	beq.w	8005c34 <HAL_RCC_OscConfig+0x1e4>
 8005ad8:	2d0c      	cmp	r5, #12
 8005ada:	f000 80a8 	beq.w	8005c2e <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005ade:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ae2:	6813      	ldr	r3, [r2, #0]
 8005ae4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ae8:	68a1      	ldr	r1, [r4, #8]
 8005aea:	430b      	orrs	r3, r1
 8005aec:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af4:	f000 80c4 	beq.w	8005c80 <HAL_RCC_OscConfig+0x230>
 8005af8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005afc:	f000 80c5 	beq.w	8005c8a <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005b0a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8005b12:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b14:	6863      	ldr	r3, [r4, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80c2 	beq.w	8005ca0 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8005b1c:	f7fd faf2 	bl	8003104 <HAL_GetTick>
 8005b20:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005b2c:	f040 8086 	bne.w	8005c3c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b30:	f7fd fae8 	bl	8003104 <HAL_GetTick>
 8005b34:	1bc0      	subs	r0, r0, r7
 8005b36:	2864      	cmp	r0, #100	@ 0x64
 8005b38:	d9f3      	bls.n	8005b22 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8005b3a:	2003      	movs	r0, #3
 8005b3c:	e2a9      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b3e:	2e01      	cmp	r6, #1
 8005b40:	d19b      	bne.n	8005a7a <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005b42:	6a23      	ldr	r3, [r4, #32]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8299 	beq.w	800607c <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b4a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f013 0f08 	tst.w	r3, #8
 8005b56:	d029      	beq.n	8005bac <HAL_RCC_OscConfig+0x15c>
 8005b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b62:	4298      	cmp	r0, r3
 8005b64:	d92a      	bls.n	8005bbc <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b66:	f7ff feb9 	bl	80058dc <RCC_SetFlashLatencyFromMSIRange>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	f040 8288 	bne.w	8006080 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005b82:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005b84:	430a      	orrs	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b88:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005b90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b94:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b96:	f7ff ff4b 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
 8005b9a:	4bba      	ldr	r3, [pc, #744]	@ (8005e84 <HAL_RCC_OscConfig+0x434>)
 8005b9c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005b9e:	4bba      	ldr	r3, [pc, #744]	@ (8005e88 <HAL_RCC_OscConfig+0x438>)
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	f7fd faad 	bl	8003100 <HAL_InitTick>
        if (status != HAL_OK)
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d08e      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x78>
 8005baa:	e272      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bba:	e7d2      	b.n	8005b62 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	f042 0208 	orr.w	r2, r2, #8
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005bce:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bd4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005bdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005be0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005be2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005be4:	f7ff fe7a 	bl	80058dc <RCC_SetFlashLatencyFromMSIRange>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d0d4      	beq.n	8005b96 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8005bec:	2001      	movs	r0, #1
 8005bee:	e250      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bf0:	f7fd fa88 	bl	8003104 <HAL_GetTick>
 8005bf4:	1bc0      	subs	r0, r0, r7
 8005bf6:	2802      	cmp	r0, #2
 8005bf8:	f67f af4c 	bls.w	8005a94 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005bfc:	2003      	movs	r0, #3
 8005bfe:	e248      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005c00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c04:	6813      	ldr	r3, [r2, #0]
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c0c:	f7fd fa7a 	bl	8003104 <HAL_GetTick>
 8005c10:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f013 0f02 	tst.w	r3, #2
 8005c1c:	f43f af54 	beq.w	8005ac8 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c20:	f7fd fa70 	bl	8003104 <HAL_GetTick>
 8005c24:	1bc0      	subs	r0, r0, r7
 8005c26:	2802      	cmp	r0, #2
 8005c28:	d9f3      	bls.n	8005c12 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8005c2a:	2003      	movs	r0, #3
 8005c2c:	e231      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c2e:	2e03      	cmp	r6, #3
 8005c30:	f47f af55 	bne.w	8005ade <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005c34:	6863      	ldr	r3, [r4, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 8224 	beq.w	8006084 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	f013 0f02 	tst.w	r3, #2
 8005c42:	d056      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c44:	2d04      	cmp	r5, #4
 8005c46:	d03d      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x274>
 8005c48:	2d0c      	cmp	r5, #12
 8005c4a:	d039      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 808a 	beq.w	8005d68 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c58:	6813      	ldr	r3, [r2, #0]
 8005c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c60:	f7fd fa50 	bl	8003104 <HAL_GetTick>
 8005c64:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005c70:	d136      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c72:	f7fd fa47 	bl	8003104 <HAL_GetTick>
 8005c76:	1b80      	subs	r0, r0, r6
 8005c78:	2802      	cmp	r0, #2
 8005c7a:	d9f4      	bls.n	8005c66 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8005c7c:	2003      	movs	r0, #3
 8005c7e:	e208      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c80:	6813      	ldr	r3, [r2, #0]
 8005c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
}
 8005c88:	e744      	b.n	8005b14 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8005c94:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c9c:	601a      	str	r2, [r3, #0]
}
 8005c9e:	e739      	b.n	8005b14 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005ca0:	f7fd fa30 	bl	8003104 <HAL_GetTick>
 8005ca4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005cb0:	d0c4      	beq.n	8005c3c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cb2:	f7fd fa27 	bl	8003104 <HAL_GetTick>
 8005cb6:	1bc0      	subs	r0, r0, r7
 8005cb8:	2864      	cmp	r0, #100	@ 0x64
 8005cba:	d9f4      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8005cbc:	2003      	movs	r0, #3
 8005cbe:	e1e8      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cc0:	2e02      	cmp	r6, #2
 8005cc2:	d1c3      	bne.n	8005c4c <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005cc4:	6923      	ldr	r3, [r4, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 81de 	beq.w	8006088 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ccc:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005cce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cd2:	6853      	ldr	r3, [r2, #4]
 8005cd4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005cd8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005cdc:	6053      	str	r3, [r2, #4]
}
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005ce2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ce6:	6853      	ldr	r3, [r2, #4]
 8005ce8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005cec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005cf0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	f013 0f08 	tst.w	r3, #8
 8005cf8:	d07e      	beq.n	8005df8 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cfa:	69a3      	ldr	r3, [r4, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d062      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005d08:	69e1      	ldr	r1, [r4, #28]
 8005d0a:	f003 0210 	and.w	r2, r3, #16
 8005d0e:	4291      	cmp	r1, r2
 8005d10:	d011      	beq.n	8005d36 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d12:	f003 0203 	and.w	r2, r3, #3
 8005d16:	2a02      	cmp	r2, #2
 8005d18:	f000 81b8 	beq.w	800608c <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005d1c:	f013 0f01 	tst.w	r3, #1
 8005d20:	d138      	bne.n	8005d94 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005d22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d26:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005d2a:	f023 0310 	bic.w	r3, r3, #16
 8005d2e:	69e1      	ldr	r1, [r4, #28]
 8005d30:	430b      	orrs	r3, r1
 8005d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d3a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005d46:	f7fd f9dd 	bl	8003104 <HAL_GetTick>
 8005d4a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d54:	f013 0f02 	tst.w	r3, #2
 8005d58:	d14e      	bne.n	8005df8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d5a:	f7fd f9d3 	bl	8003104 <HAL_GetTick>
 8005d5e:	1b80      	subs	r0, r0, r6
 8005d60:	2811      	cmp	r0, #17
 8005d62:	d9f3      	bls.n	8005d4c <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8005d64:	2003      	movs	r0, #3
 8005d66:	e194      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005d68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d6c:	6813      	ldr	r3, [r2, #0]
 8005d6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d72:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005d74:	f7fd f9c6 	bl	8003104 <HAL_GetTick>
 8005d78:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005d84:	d0b5      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d86:	f7fd f9bd 	bl	8003104 <HAL_GetTick>
 8005d8a:	1b80      	subs	r0, r0, r6
 8005d8c:	2802      	cmp	r0, #2
 8005d8e:	d9f4      	bls.n	8005d7a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005d90:	2003      	movs	r0, #3
 8005d92:	e17e      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d98:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8005da4:	f7fd f9ae 	bl	8003104 <HAL_GetTick>
 8005da8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005db2:	f013 0f02 	tst.w	r3, #2
 8005db6:	d0b4      	beq.n	8005d22 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db8:	f7fd f9a4 	bl	8003104 <HAL_GetTick>
 8005dbc:	1b80      	subs	r0, r0, r6
 8005dbe:	2811      	cmp	r0, #17
 8005dc0:	d9f3      	bls.n	8005daa <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8005dc2:	2003      	movs	r0, #3
 8005dc4:	e165      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005dc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dca:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005dd6:	f7fd f995 	bl	8003104 <HAL_GetTick>
 8005dda:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005de4:	f013 0f02 	tst.w	r3, #2
 8005de8:	d006      	beq.n	8005df8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dea:	f7fd f98b 	bl	8003104 <HAL_GetTick>
 8005dee:	1b80      	subs	r0, r0, r6
 8005df0:	2811      	cmp	r0, #17
 8005df2:	d9f3      	bls.n	8005ddc <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8005df4:	2003      	movs	r0, #3
 8005df6:	e14c      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	f013 0f04 	tst.w	r3, #4
 8005dfe:	f000 80b8 	beq.w	8005f72 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005e02:	4b22      	ldr	r3, [pc, #136]	@ (8005e8c <HAL_RCC_OscConfig+0x43c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005e0a:	d110      	bne.n	8005e2e <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8005e0c:	f7ff fc86 	bl	800571c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005e10:	f7fd f978 	bl	8003104 <HAL_GetTick>
 8005e14:	4606      	mov	r6, r0
 8005e16:	4b1d      	ldr	r3, [pc, #116]	@ (8005e8c <HAL_RCC_OscConfig+0x43c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e20:	f7fd f970 	bl	8003104 <HAL_GetTick>
 8005e24:	1b80      	subs	r0, r0, r6
 8005e26:	2802      	cmp	r0, #2
 8005e28:	d9f5      	bls.n	8005e16 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8005e2a:	2003      	movs	r0, #3
 8005e2c:	e131      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d068      	beq.n	8005f06 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005e34:	2b85      	cmp	r3, #133	@ 0x85
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e40:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005e44:	f043 0304 	orr.w	r3, r3, #4
 8005e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8005e4c:	f7fd f95a 	bl	8003104 <HAL_GetTick>
 8005e50:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e56:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6a:	f013 0f02 	tst.w	r3, #2
 8005e6e:	d10f      	bne.n	8005e90 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e70:	f7fd f948 	bl	8003104 <HAL_GetTick>
 8005e74:	1b80      	subs	r0, r0, r6
 8005e76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	d9f1      	bls.n	8005e62 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8005e7e:	2003      	movs	r0, #3
 8005e80:	e107      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
 8005e82:	bf00      	nop
 8005e84:	200000e4 	.word	0x200000e4
 8005e88:	200000e8 	.word	0x200000e8
 8005e8c:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005e90:	68e3      	ldr	r3, [r4, #12]
 8005e92:	2b81      	cmp	r3, #129	@ 0x81
 8005e94:	d001      	beq.n	8005e9a <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005e96:	2b85      	cmp	r3, #133	@ 0x85
 8005e98:	d11a      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8005e9a:	f7fd f933 	bl	8003104 <HAL_GetTick>
 8005e9e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ea4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb8:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005ebc:	d159      	bne.n	8005f72 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebe:	f7fd f921 	bl	8003104 <HAL_GetTick>
 8005ec2:	1b80      	subs	r0, r0, r6
 8005ec4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ec8:	4298      	cmp	r0, r3
 8005eca:	d9f1      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8005ecc:	2003      	movs	r0, #3
 8005ece:	e0e0      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8005ed0:	f7fd f918 	bl	8003104 <HAL_GetTick>
 8005ed4:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eda:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005ede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eee:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005ef2:	d03e      	beq.n	8005f72 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef4:	f7fd f906 	bl	8003104 <HAL_GetTick>
 8005ef8:	1b80      	subs	r0, r0, r6
 8005efa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005efe:	4298      	cmp	r0, r3
 8005f00:	d9f1      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8005f02:	2003      	movs	r0, #3
 8005f04:	e0c5      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005f06:	f7fd f8fd 	bl	8003104 <HAL_GetTick>
 8005f0a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005f0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f10:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005f14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f24:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005f28:	d008      	beq.n	8005f3c <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2a:	f7fd f8eb 	bl	8003104 <HAL_GetTick>
 8005f2e:	1b80      	subs	r0, r0, r6
 8005f30:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f34:	4298      	cmp	r0, r3
 8005f36:	d9f1      	bls.n	8005f1c <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8005f38:	2003      	movs	r0, #3
 8005f3a:	e0aa      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005f3c:	f7fd f8e2 	bl	8003104 <HAL_GetTick>
 8005f40:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f46:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5a:	f013 0f02 	tst.w	r3, #2
 8005f5e:	d008      	beq.n	8005f72 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f60:	f7fd f8d0 	bl	8003104 <HAL_GetTick>
 8005f64:	1b80      	subs	r0, r0, r6
 8005f66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f6a:	4298      	cmp	r0, r3
 8005f6c:	d9f1      	bls.n	8005f52 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8005f6e:	2003      	movs	r0, #3
 8005f70:	e08f      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 808b 	beq.w	8006090 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f7a:	2d0c      	cmp	r5, #12
 8005f7c:	d060      	beq.n	8006040 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d016      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f86:	6813      	ldr	r3, [r2, #0]
 8005f88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f8e:	f7fd f8b9 	bl	8003104 <HAL_GetTick>
 8005f92:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005f9e:	d148      	bne.n	8006032 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005fa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fa4:	68d1      	ldr	r1, [r2, #12]
 8005fa6:	4b41      	ldr	r3, [pc, #260]	@ (80060ac <HAL_RCC_OscConfig+0x65c>)
 8005fa8:	400b      	ands	r3, r1
 8005faa:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005fac:	2000      	movs	r0, #0
 8005fae:	e070      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005fb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fb4:	6813      	ldr	r3, [r2, #0]
 8005fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005fbc:	f7fd f8a2 	bl	8003104 <HAL_GetTick>
 8005fc0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005fcc:	d12a      	bne.n	8006024 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fd2:	68d3      	ldr	r3, [r2, #12]
 8005fd4:	4936      	ldr	r1, [pc, #216]	@ (80060b0 <HAL_RCC_OscConfig+0x660>)
 8005fd6:	4019      	ands	r1, r3
 8005fd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005fda:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005fdc:	4303      	orrs	r3, r0
 8005fde:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005fe0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005fe4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005fe6:	4303      	orrs	r3, r0
 8005fe8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005fea:	4303      	orrs	r3, r0
 8005fec:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005fee:	4303      	orrs	r3, r0
 8005ff0:	4319      	orrs	r1, r3
 8005ff2:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ff4:	6813      	ldr	r3, [r2, #0]
 8005ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ffa:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ffc:	68d3      	ldr	r3, [r2, #12]
 8005ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006002:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006004:	f7fd f87e 	bl	8003104 <HAL_GetTick>
 8006008:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800600a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006014:	d13e      	bne.n	8006094 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006016:	f7fd f875 	bl	8003104 <HAL_GetTick>
 800601a:	1b00      	subs	r0, r0, r4
 800601c:	280a      	cmp	r0, #10
 800601e:	d9f4      	bls.n	800600a <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8006020:	2003      	movs	r0, #3
 8006022:	e036      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006024:	f7fd f86e 	bl	8003104 <HAL_GetTick>
 8006028:	1b40      	subs	r0, r0, r5
 800602a:	280a      	cmp	r0, #10
 800602c:	d9c9      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800602e:	2003      	movs	r0, #3
 8006030:	e02f      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006032:	f7fd f867 	bl	8003104 <HAL_GetTick>
 8006036:	1b00      	subs	r0, r0, r4
 8006038:	280a      	cmp	r0, #10
 800603a:	d9ab      	bls.n	8005f94 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 800603c:	2003      	movs	r0, #3
 800603e:	e028      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006040:	2b01      	cmp	r3, #1
 8006042:	d029      	beq.n	8006098 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006048:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800604a:	f003 0103 	and.w	r1, r3, #3
 800604e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006050:	4291      	cmp	r1, r2
 8006052:	d123      	bne.n	800609c <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006054:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800605a:	428a      	cmp	r2, r1
 800605c:	d120      	bne.n	80060a0 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800605e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006062:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006064:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006068:	d11c      	bne.n	80060a4 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800606a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800606e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006070:	4293      	cmp	r3, r2
 8006072:	d119      	bne.n	80060a8 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8006074:	2000      	movs	r0, #0
 8006076:	e00c      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8006078:	2001      	movs	r0, #1
}
 800607a:	4770      	bx	lr
        return HAL_ERROR;
 800607c:	2001      	movs	r0, #1
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8006080:	2001      	movs	r0, #1
 8006082:	e006      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8006084:	2001      	movs	r0, #1
 8006086:	e004      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8006088:	2001      	movs	r0, #1
 800608a:	e002      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800608c:	2001      	movs	r0, #1
 800608e:	e000      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8006090:	2000      	movs	r0, #0
}
 8006092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8006094:	2000      	movs	r0, #0
 8006096:	e7fc      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8006098:	2001      	movs	r0, #1
 800609a:	e7fa      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800609c:	2001      	movs	r0, #1
 800609e:	e7f8      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
 80060a0:	2001      	movs	r0, #1
 80060a2:	e7f6      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
 80060a4:	2001      	movs	r0, #1
 80060a6:	e7f4      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
 80060a8:	2001      	movs	r0, #1
 80060aa:	e7f2      	b.n	8006092 <HAL_RCC_OscConfig+0x642>
 80060ac:	eefefffc 	.word	0xeefefffc
 80060b0:	11c1808c 	.word	0x11c1808c

080060b4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f000 8127 	beq.w	8006308 <HAL_RCC_ClockConfig+0x254>
{
 80060ba:	b570      	push	{r4, r5, r6, lr}
 80060bc:	460c      	mov	r4, r1
 80060be:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060c0:	4b93      	ldr	r3, [pc, #588]	@ (8006310 <HAL_RCC_ClockConfig+0x25c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	428b      	cmp	r3, r1
 80060ca:	d32d      	bcc.n	8006128 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	f013 0f02 	tst.w	r3, #2
 80060d2:	d13f      	bne.n	8006154 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	f013 0f20 	tst.w	r3, #32
 80060da:	d153      	bne.n	8006184 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80060e2:	d16a      	bne.n	80061ba <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	f013 0f04 	tst.w	r3, #4
 80060ea:	f040 8083 	bne.w	80061f4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ee:	682b      	ldr	r3, [r5, #0]
 80060f0:	f013 0f08 	tst.w	r3, #8
 80060f4:	f040 8097 	bne.w	8006226 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	f013 0f01 	tst.w	r3, #1
 80060fe:	f000 80de 	beq.w	80062be <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006102:	686b      	ldr	r3, [r5, #4]
 8006104:	2b02      	cmp	r3, #2
 8006106:	f000 80a8 	beq.w	800625a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800610a:	2b03      	cmp	r3, #3
 800610c:	f000 80ad 	beq.w	800626a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006110:	2b00      	cmp	r3, #0
 8006112:	f040 80b2 	bne.w	800627a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006116:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	f012 0f02 	tst.w	r2, #2
 8006120:	f040 80b1 	bne.w	8006286 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006124:	2001      	movs	r0, #1
 8006126:	e0ee      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006128:	4a79      	ldr	r2, [pc, #484]	@ (8006310 <HAL_RCC_ClockConfig+0x25c>)
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	f023 0307 	bic.w	r3, r3, #7
 8006130:	430b      	orrs	r3, r1
 8006132:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006134:	f7fc ffe6 	bl	8003104 <HAL_GetTick>
 8006138:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800613a:	4b75      	ldr	r3, [pc, #468]	@ (8006310 <HAL_RCC_ClockConfig+0x25c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	42a3      	cmp	r3, r4
 8006144:	d0c2      	beq.n	80060cc <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006146:	f7fc ffdd 	bl	8003104 <HAL_GetTick>
 800614a:	1b80      	subs	r0, r0, r6
 800614c:	2802      	cmp	r0, #2
 800614e:	d9f4      	bls.n	800613a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8006150:	2003      	movs	r0, #3
 8006152:	e0d8      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006154:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800615a:	688a      	ldr	r2, [r1, #8]
 800615c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006160:	4313      	orrs	r3, r2
 8006162:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006164:	f7fc ffce 	bl	8003104 <HAL_GetTick>
 8006168:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006174:	d1ae      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006176:	f7fc ffc5 	bl	8003104 <HAL_GetTick>
 800617a:	1b80      	subs	r0, r0, r6
 800617c:	2802      	cmp	r0, #2
 800617e:	d9f4      	bls.n	800616a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8006180:	2003      	movs	r0, #3
 8006182:	e0c0      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006184:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800618a:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 800618e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8006198:	f7fc ffb4 	bl	8003104 <HAL_GetTick>
 800619c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800619e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80061a6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80061aa:	d197      	bne.n	80060dc <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061ac:	f7fc ffaa 	bl	8003104 <HAL_GetTick>
 80061b0:	1b80      	subs	r0, r0, r6
 80061b2:	2802      	cmp	r0, #2
 80061b4:	d9f3      	bls.n	800619e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80061b6:	2003      	movs	r0, #3
 80061b8:	e0a5      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80061ba:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80061bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061c0:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 80061c4:	f023 030f 	bic.w	r3, r3, #15
 80061c8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80061cc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 80061d0:	f7fc ff98 	bl	8003104 <HAL_GetTick>
 80061d4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80061d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80061de:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80061e2:	f47f af7f 	bne.w	80060e4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061e6:	f7fc ff8d 	bl	8003104 <HAL_GetTick>
 80061ea:	1b80      	subs	r0, r0, r6
 80061ec:	2802      	cmp	r0, #2
 80061ee:	d9f2      	bls.n	80061d6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80061f0:	2003      	movs	r0, #3
 80061f2:	e088      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80061f4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80061f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061fa:	688a      	ldr	r2, [r1, #8]
 80061fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006200:	4313      	orrs	r3, r2
 8006202:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006204:	f7fc ff7e 	bl	8003104 <HAL_GetTick>
 8006208:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800620a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006214:	f47f af6b 	bne.w	80060ee <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006218:	f7fc ff74 	bl	8003104 <HAL_GetTick>
 800621c:	1b80      	subs	r0, r0, r6
 800621e:	2802      	cmp	r0, #2
 8006220:	d9f3      	bls.n	800620a <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006222:	2003      	movs	r0, #3
 8006224:	e06f      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006226:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800622c:	6893      	ldr	r3, [r2, #8]
 800622e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8006232:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006236:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006238:	f7fc ff64 	bl	8003104 <HAL_GetTick>
 800623c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800623e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8006248:	f47f af56 	bne.w	80060f8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800624c:	f7fc ff5a 	bl	8003104 <HAL_GetTick>
 8006250:	1b80      	subs	r0, r0, r6
 8006252:	2802      	cmp	r0, #2
 8006254:	d9f3      	bls.n	800623e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8006256:	2003      	movs	r0, #3
 8006258:	e055      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800625a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8006264:	d10f      	bne.n	8006286 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006266:	2001      	movs	r0, #1
 8006268:	e04d      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800626a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8006274:	d107      	bne.n	8006286 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006276:	2001      	movs	r0, #1
 8006278:	e045      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800627a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8006284:	d042      	beq.n	800630c <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006286:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800628a:	688a      	ldr	r2, [r1, #8]
 800628c:	f022 0203 	bic.w	r2, r2, #3
 8006290:	4313      	orrs	r3, r2
 8006292:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006294:	f7fc ff36 	bl	8003104 <HAL_GetTick>
 8006298:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800629a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a4:	686a      	ldr	r2, [r5, #4]
 80062a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80062aa:	d008      	beq.n	80062be <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ac:	f7fc ff2a 	bl	8003104 <HAL_GetTick>
 80062b0:	1b80      	subs	r0, r0, r6
 80062b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062b6:	4298      	cmp	r0, r3
 80062b8:	d9ef      	bls.n	800629a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80062ba:	2003      	movs	r0, #3
 80062bc:	e023      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062be:	4b14      	ldr	r3, [pc, #80]	@ (8006310 <HAL_RCC_ClockConfig+0x25c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	d915      	bls.n	80062f6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ca:	4a11      	ldr	r2, [pc, #68]	@ (8006310 <HAL_RCC_ClockConfig+0x25c>)
 80062cc:	6813      	ldr	r3, [r2, #0]
 80062ce:	f023 0307 	bic.w	r3, r3, #7
 80062d2:	4323      	orrs	r3, r4
 80062d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80062d6:	f7fc ff15 	bl	8003104 <HAL_GetTick>
 80062da:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006310 <HAL_RCC_ClockConfig+0x25c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	d006      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062e8:	f7fc ff0c 	bl	8003104 <HAL_GetTick>
 80062ec:	1b40      	subs	r0, r0, r5
 80062ee:	2802      	cmp	r0, #2
 80062f0:	d9f4      	bls.n	80062dc <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80062f2:	2003      	movs	r0, #3
 80062f4:	e007      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80062f6:	f7ff fb9b 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
 80062fa:	4b06      	ldr	r3, [pc, #24]	@ (8006314 <HAL_RCC_ClockConfig+0x260>)
 80062fc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80062fe:	4b06      	ldr	r3, [pc, #24]	@ (8006318 <HAL_RCC_ClockConfig+0x264>)
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	f7fc fefd 	bl	8003100 <HAL_InitTick>
}
 8006306:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006308:	2001      	movs	r0, #1
}
 800630a:	4770      	bx	lr
        return HAL_ERROR;
 800630c:	2001      	movs	r0, #1
 800630e:	e7fa      	b.n	8006306 <HAL_RCC_ClockConfig+0x252>
 8006310:	58004000 	.word	0x58004000
 8006314:	200000e4 	.word	0x200000e4
 8006318:	200000e8 	.word	0x200000e8

0800631c <HAL_RCC_GetPCLK1Freq>:
{
 800631c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800631e:	f7ff fb87 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800632c:	4a02      	ldr	r2, [pc, #8]	@ (8006338 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800632e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006332:	40d8      	lsrs	r0, r3
 8006334:	bd08      	pop	{r3, pc}
 8006336:	bf00      	nop
 8006338:	08010af4 	.word	0x08010af4

0800633c <HAL_RCC_GetPCLK2Freq>:
{
 800633c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800633e:	f7ff fb77 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800634c:	4a02      	ldr	r2, [pc, #8]	@ (8006358 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800634e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006352:	40d8      	lsrs	r0, r3
 8006354:	bd08      	pop	{r3, pc}
 8006356:	bf00      	nop
 8006358:	08010af4 	.word	0x08010af4

0800635c <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800635c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006360:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006364:	0902      	lsrs	r2, r0, #4
 8006366:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 800636a:	ea23 0302 	bic.w	r3, r3, r2
 800636e:	0100      	lsls	r0, r0, #4
 8006370:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8006374:	4303      	orrs	r3, r0
 8006376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800637a:	4770      	bx	lr

0800637c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006380:	6803      	ldr	r3, [r0, #0]
 8006382:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006386:	f040 80aa 	bne.w	80064de <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800638a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	f013 0f01 	tst.w	r3, #1
 8006392:	d00a      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006394:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800639a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800639e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80063a2:	b292      	uxth	r2, r2
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	f013 0f02 	tst.w	r3, #2
 80063b0:	d00a      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063b2:	68a2      	ldr	r2, [r4, #8]
 80063b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063b8:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80063bc:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80063c0:	b292      	uxth	r2, r2
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	f013 0f20 	tst.w	r3, #32
 80063ce:	d009      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063d0:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80063d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80063da:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80063ea:	d00c      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063ec:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80063ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80063f6:	0c08      	lsrs	r0, r1, #16
 80063f8:	0400      	lsls	r0, r0, #16
 80063fa:	ea23 0300 	bic.w	r3, r3, r0
 80063fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006402:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800640c:	d00c      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800640e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006414:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006418:	0c08      	lsrs	r0, r1, #16
 800641a:	0400      	lsls	r0, r0, #16
 800641c:	ea23 0300 	bic.w	r3, r3, r0
 8006420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800642e:	d00c      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006430:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006432:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006436:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800643a:	0c08      	lsrs	r0, r1, #16
 800643c:	0400      	lsls	r0, r0, #16
 800643e:	ea23 0300 	bic.w	r3, r3, r0
 8006442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006446:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006450:	f040 809b 	bne.w	800658a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800645a:	f040 809a 	bne.w	8006592 <HAL_RCCEx_PeriphCLKConfig+0x216>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006464:	f040 8099 	bne.w	800659a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	f013 0f10 	tst.w	r3, #16
 800646e:	d00e      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006470:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006472:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006476:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800647a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006484:	68e3      	ldr	r3, [r4, #12]
 8006486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800648a:	f000 808a 	beq.w	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006494:	d00f      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006496:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006498:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800649c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80064a0:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80064ac:	b91b      	cbnz	r3, 80064b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80064ae:	68cb      	ldr	r3, [r1, #12]
 80064b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064b4:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80064bc:	d00d      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80064c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80064c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80064d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80064d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064d8:	d068      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x230>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80064da:	4628      	mov	r0, r5
 80064dc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80064de:	f7ff f91d 	bl	800571c <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80064e2:	f7fc fe0f 	bl	8003104 <HAL_GetTick>
 80064e6:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80064e8:	4b33      	ldr	r3, [pc, #204]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80064f0:	d106      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f2:	f7fc fe07 	bl	8003104 <HAL_GetTick>
 80064f6:	1b40      	subs	r0, r0, r5
 80064f8:	2802      	cmp	r0, #2
 80064fa:	d9f5      	bls.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 80064fc:	2503      	movs	r5, #3
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006500:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8006502:	2d00      	cmp	r5, #0
 8006504:	f47f af42 	bne.w	800638c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800650c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006514:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006516:	429a      	cmp	r2, r3
 8006518:	d016      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800651a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800651e:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8006522:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006526:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800652a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800652e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006532:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006536:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800653a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800653e:	f8c3 0090 	str.w	r0, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006542:	f011 0f02 	tst.w	r1, #2
 8006546:	d10d      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      if (ret == HAL_OK)
 8006548:	2d00      	cmp	r5, #0
 800654a:	f47f af1f 	bne.w	800638c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800654e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006554:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8006558:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006562:	e713      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x10>
        tickstart = HAL_GetTick();
 8006564:	f7fc fdce 	bl	8003104 <HAL_GetTick>
 8006568:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800656a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800656e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006572:	f013 0f02 	tst.w	r3, #2
 8006576:	d1e7      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006578:	f7fc fdc4 	bl	8003104 <HAL_GetTick>
 800657c:	1b83      	subs	r3, r0, r6
 800657e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006582:	4293      	cmp	r3, r2
 8006584:	d9f1      	bls.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            ret = HAL_TIMEOUT;
 8006586:	2503      	movs	r5, #3
 8006588:	e7de      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800658a:	6960      	ldr	r0, [r4, #20]
 800658c:	f7ff fee6 	bl	800635c <LL_RCC_SetI2CClockSource>
 8006590:	e760      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006592:	69a0      	ldr	r0, [r4, #24]
 8006594:	f7ff fee2 	bl	800635c <LL_RCC_SetI2CClockSource>
 8006598:	e761      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800659a:	69e0      	ldr	r0, [r4, #28]
 800659c:	f7ff fede 	bl	800635c <LL_RCC_SetI2CClockSource>
 80065a0:	e762      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80065a2:	68cb      	ldr	r3, [r1, #12]
 80065a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065a8:	60cb      	str	r3, [r1, #12]
 80065aa:	e770      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065ac:	68cb      	ldr	r3, [r1, #12]
 80065ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065b2:	60cb      	str	r3, [r1, #12]
 80065b4:	e791      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80065b6:	bf00      	nop
 80065b8:	58000400 	.word	0x58000400

080065bc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80065bc:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065be:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 80065c2:	2a01      	cmp	r2, #1
 80065c4:	d035      	beq.n	8006632 <HAL_RTC_DeactivateAlarm+0x76>
 80065c6:	2201      	movs	r2, #1
 80065c8:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065cc:	2202      	movs	r2, #2
 80065ce:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065d2:	4a19      	ldr	r2, [pc, #100]	@ (8006638 <HAL_RTC_DeactivateAlarm+0x7c>)
 80065d4:	20ca      	movs	r0, #202	@ 0xca
 80065d6:	6250      	str	r0, [r2, #36]	@ 0x24
 80065d8:	2053      	movs	r0, #83	@ 0x53
 80065da:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80065dc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80065e0:	d018      	beq.n	8006614 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80065e2:	4a15      	ldr	r2, [pc, #84]	@ (8006638 <HAL_RTC_DeactivateAlarm+0x7c>)
 80065e4:	6991      	ldr	r1, [r2, #24]
 80065e6:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 80065ea:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80065ec:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 80065ee:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80065f2:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80065f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80065f6:	f021 0102 	bic.w	r1, r1, #2
 80065fa:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80065fc:	2102      	movs	r1, #2
 80065fe:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006600:	4a0d      	ldr	r2, [pc, #52]	@ (8006638 <HAL_RTC_DeactivateAlarm+0x7c>)
 8006602:	21ff      	movs	r1, #255	@ 0xff
 8006604:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006606:	2201      	movs	r2, #1
 8006608:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800660c:	2000      	movs	r0, #0
 800660e:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006612:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006614:	6991      	ldr	r1, [r2, #24]
 8006616:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 800661a:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800661c:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800661e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006622:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006624:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006626:	f021 0101 	bic.w	r1, r1, #1
 800662a:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800662c:	2101      	movs	r1, #1
 800662e:	65d1      	str	r1, [r2, #92]	@ 0x5c
 8006630:	e7e6      	b.n	8006600 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8006632:	2002      	movs	r0, #2
}
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40002800 	.word	0x40002800

0800663c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006640:	4b0d      	ldr	r3, [pc, #52]	@ (8006678 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006642:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8006644:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006646:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006648:	f015 0f01 	tst.w	r5, #1
 800664c:	d106      	bne.n	800665c <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800664e:	f015 0f02 	tst.w	r5, #2
 8006652:	d109      	bne.n	8006668 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006654:	2301      	movs	r3, #1
 8006656:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 800665a:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800665c:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800665e:	2201      	movs	r2, #1
 8006660:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006662:	f7fc ff71 	bl	8003548 <HAL_RTC_AlarmAEventCallback>
 8006666:	e7f2      	b.n	800664e <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006668:	4b03      	ldr	r3, [pc, #12]	@ (8006678 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800666a:	2202      	movs	r2, #2
 800666c:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800666e:	4620      	mov	r0, r4
 8006670:	f000 f9ee 	bl	8006a50 <HAL_RTCEx_AlarmBEventCallback>
 8006674:	e7ee      	b.n	8006654 <HAL_RTC_AlarmIRQHandler+0x18>
 8006676:	bf00      	nop
 8006678:	40002800 	.word	0x40002800

0800667c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800667c:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800667e:	4a0b      	ldr	r2, [pc, #44]	@ (80066ac <HAL_RTC_WaitForSynchro+0x30>)
 8006680:	68d3      	ldr	r3, [r2, #12]
 8006682:	f023 0320 	bic.w	r3, r3, #32
 8006686:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006688:	f7fc fd3c 	bl	8003104 <HAL_GetTick>
 800668c:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800668e:	4b07      	ldr	r3, [pc, #28]	@ (80066ac <HAL_RTC_WaitForSynchro+0x30>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f013 0f20 	tst.w	r3, #32
 8006696:	d107      	bne.n	80066a8 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006698:	f7fc fd34 	bl	8003104 <HAL_GetTick>
 800669c:	1b00      	subs	r0, r0, r4
 800669e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80066a2:	d9f4      	bls.n	800668e <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80066a4:	2003      	movs	r0, #3
 80066a6:	e000      	b.n	80066aa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80066a8:	2000      	movs	r0, #0
}
 80066aa:	bd10      	pop	{r4, pc}
 80066ac:	40002800 	.word	0x40002800

080066b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066b0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80066b2:	4b11      	ldr	r3, [pc, #68]	@ (80066f8 <RTC_EnterInitMode+0x48>)
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80066ba:	d002      	beq.n	80066c2 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80066bc:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80066be:	4620      	mov	r0, r4
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80066c4:	4a0c      	ldr	r2, [pc, #48]	@ (80066f8 <RTC_EnterInitMode+0x48>)
 80066c6:	68d3      	ldr	r3, [r2, #12]
 80066c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066cc:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80066ce:	f7fc fd19 	bl	8003104 <HAL_GetTick>
 80066d2:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80066d4:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80066d6:	4b08      	ldr	r3, [pc, #32]	@ (80066f8 <RTC_EnterInitMode+0x48>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80066de:	d1ee      	bne.n	80066be <RTC_EnterInitMode+0xe>
 80066e0:	2c03      	cmp	r4, #3
 80066e2:	d0ec      	beq.n	80066be <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80066e4:	f7fc fd0e 	bl	8003104 <HAL_GetTick>
 80066e8:	1b43      	subs	r3, r0, r5
 80066ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066ee:	d9f2      	bls.n	80066d6 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066f0:	2403      	movs	r4, #3
 80066f2:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 80066f6:	e7ee      	b.n	80066d6 <RTC_EnterInitMode+0x26>
 80066f8:	40002800 	.word	0x40002800

080066fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80066fc:	b510      	push	{r4, lr}
 80066fe:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006700:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <RTC_ExitInitMode+0x48>)
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006708:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f013 0f20 	tst.w	r3, #32
 8006710:	d106      	bne.n	8006720 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006712:	f7ff ffb3 	bl	800667c <HAL_RTC_WaitForSynchro>
 8006716:	b198      	cbz	r0, 8006740 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006718:	2003      	movs	r0, #3
 800671a:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800671e:	e00f      	b.n	8006740 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006720:	4a08      	ldr	r2, [pc, #32]	@ (8006744 <RTC_ExitInitMode+0x48>)
 8006722:	6993      	ldr	r3, [r2, #24]
 8006724:	f023 0320 	bic.w	r3, r3, #32
 8006728:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800672a:	f7ff ffa7 	bl	800667c <HAL_RTC_WaitForSynchro>
 800672e:	b110      	cbz	r0, 8006736 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006730:	2003      	movs	r0, #3
 8006732:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006736:	4a03      	ldr	r2, [pc, #12]	@ (8006744 <RTC_ExitInitMode+0x48>)
 8006738:	6993      	ldr	r3, [r2, #24]
 800673a:	f043 0320 	orr.w	r3, r3, #32
 800673e:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006740:	bd10      	pop	{r4, pc}
 8006742:	bf00      	nop
 8006744:	40002800 	.word	0x40002800

08006748 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006748:	2800      	cmp	r0, #0
 800674a:	d055      	beq.n	80067f8 <HAL_RTC_Init+0xb0>
{
 800674c:	b510      	push	{r4, lr}
 800674e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006750:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8006754:	b163      	cbz	r3, 8006770 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006756:	2302      	movs	r3, #2
 8006758:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800675c:	4b27      	ldr	r3, [pc, #156]	@ (80067fc <HAL_RTC_Init+0xb4>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f013 0f10 	tst.w	r3, #16
 8006764:	d009      	beq.n	800677a <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8006766:	2301      	movs	r3, #1
 8006768:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800676c:	2000      	movs	r0, #0
}
 800676e:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006770:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 8006774:	f7fc fb56 	bl	8002e24 <HAL_RTC_MspInit>
 8006778:	e7ed      	b.n	8006756 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800677a:	4b20      	ldr	r3, [pc, #128]	@ (80067fc <HAL_RTC_Init+0xb4>)
 800677c:	22ca      	movs	r2, #202	@ 0xca
 800677e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006780:	2253      	movs	r2, #83	@ 0x53
 8006782:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8006784:	4620      	mov	r0, r4
 8006786:	f7ff ff93 	bl	80066b0 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800678a:	b118      	cbz	r0, 8006794 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800678c:	4b1b      	ldr	r3, [pc, #108]	@ (80067fc <HAL_RTC_Init+0xb4>)
 800678e:	22ff      	movs	r2, #255	@ 0xff
 8006790:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006792:	e7ec      	b.n	800676e <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006794:	4b19      	ldr	r3, [pc, #100]	@ (80067fc <HAL_RTC_Init+0xb4>)
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 800679c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067a0:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80067a2:	6999      	ldr	r1, [r3, #24]
 80067a4:	6862      	ldr	r2, [r4, #4]
 80067a6:	6920      	ldr	r0, [r4, #16]
 80067a8:	4302      	orrs	r2, r0
 80067aa:	69a0      	ldr	r0, [r4, #24]
 80067ac:	4302      	orrs	r2, r0
 80067ae:	430a      	orrs	r2, r1
 80067b0:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80067b2:	68e2      	ldr	r2, [r4, #12]
 80067b4:	68a1      	ldr	r1, [r4, #8]
 80067b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80067ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80067c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80067c4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80067c6:	4301      	orrs	r1, r0
 80067c8:	430a      	orrs	r2, r1
 80067ca:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7ff ff95 	bl	80066fc <RTC_ExitInitMode>
        if (status == HAL_OK)
 80067d2:	b118      	cbz	r0, 80067dc <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067d4:	4b09      	ldr	r3, [pc, #36]	@ (80067fc <HAL_RTC_Init+0xb4>)
 80067d6:	22ff      	movs	r2, #255	@ 0xff
 80067d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80067da:	e7c8      	b.n	800676e <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 80067dc:	4907      	ldr	r1, [pc, #28]	@ (80067fc <HAL_RTC_Init+0xb4>)
 80067de:	698b      	ldr	r3, [r1, #24]
 80067e0:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80067e4:	6a22      	ldr	r2, [r4, #32]
 80067e6:	69e0      	ldr	r0, [r4, #28]
 80067e8:	4302      	orrs	r2, r0
 80067ea:	6960      	ldr	r0, [r4, #20]
 80067ec:	4302      	orrs	r2, r0
 80067ee:	4313      	orrs	r3, r2
 80067f0:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067f2:	23ff      	movs	r3, #255	@ 0xff
 80067f4:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 80067f6:	e7b6      	b.n	8006766 <HAL_RTC_Init+0x1e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80067f8:	2001      	movs	r0, #1
}
 80067fa:	4770      	bx	lr
 80067fc:	40002800 	.word	0x40002800

08006800 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006800:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006802:	e002      	b.n	800680a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006804:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006806:	380a      	subs	r0, #10
 8006808:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800680a:	2809      	cmp	r0, #9
 800680c:	d8fa      	bhi.n	8006804 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	b2db      	uxtb	r3, r3
}
 8006812:	4318      	orrs	r0, r3
 8006814:	4770      	bx	lr
	...

08006818 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006818:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800681c:	2b01      	cmp	r3, #1
 800681e:	f000 80b0 	beq.w	8006982 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006826:	4605      	mov	r5, r0
 8006828:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800682a:	2301      	movs	r3, #1
 800682c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006830:	2302      	movs	r3, #2
 8006832:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006836:	4b54      	ldr	r3, [pc, #336]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 8006838:	68de      	ldr	r6, [r3, #12]
 800683a:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800683e:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8006842:	d043      	beq.n	80068cc <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006844:	bb12      	cbnz	r2, 800688c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800684c:	d101      	bne.n	8006852 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800684e:	2300      	movs	r3, #0
 8006850:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006852:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006856:	7820      	ldrb	r0, [r4, #0]
 8006858:	f7ff ffd2 	bl	8006800 <RTC_ByteToBcd2>
 800685c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800685e:	7860      	ldrb	r0, [r4, #1]
 8006860:	f7ff ffce 	bl	8006800 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006864:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006868:	78a0      	ldrb	r0, [r4, #2]
 800686a:	f7ff ffc9 	bl	8006800 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800686e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006870:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006872:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006876:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800687a:	f7ff ffc1 	bl	8006800 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800687e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006882:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006884:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006886:	ea48 0000 	orr.w	r0, r8, r0
 800688a:	e020      	b.n	80068ce <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800688c:	6948      	ldr	r0, [r1, #20]
 800688e:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 8006892:	d009      	beq.n	80068a8 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006894:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8006898:	d006      	beq.n	80068a8 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800689a:	4b3b      	ldr	r3, [pc, #236]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80068a2:	d101      	bne.n	80068a8 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068a8:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80068aa:	7863      	ldrb	r3, [r4, #1]
 80068ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80068b2:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80068b4:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80068b6:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80068b8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80068bc:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80068c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80068c4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80068c6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068c8:	4318      	orrs	r0, r3
 80068ca:	e000      	b.n	80068ce <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80068cc:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ce:	4b2e      	ldr	r3, [pc, #184]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 80068d0:	22ca      	movs	r2, #202	@ 0xca
 80068d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80068d4:	2253      	movs	r2, #83	@ 0x53
 80068d6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80068d8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80068da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068de:	d02a      	beq.n	8006936 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068e0:	4b29      	ldr	r3, [pc, #164]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 80068e2:	699a      	ldr	r2, [r3, #24]
 80068e4:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 80068e8:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80068ea:	2202      	movs	r2, #2
 80068ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80068ee:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80068f2:	d040      	beq.n	8006976 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80068f4:	4b24      	ldr	r3, [pc, #144]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 80068f6:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80068f8:	69a2      	ldr	r2, [r4, #24]
 80068fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80068fc:	6862      	ldr	r2, [r4, #4]
 80068fe:	4b22      	ldr	r3, [pc, #136]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 8006900:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006902:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8006904:	f042 0202 	orr.w	r2, r2, #2
 8006908:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800690a:	699a      	ldr	r2, [r3, #24]
 800690c:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8006910:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006912:	4a1e      	ldr	r2, [pc, #120]	@ (800698c <HAL_RTC_SetAlarm_IT+0x174>)
 8006914:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8006918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800691c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006920:	4b19      	ldr	r3, [pc, #100]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 8006922:	22ff      	movs	r2, #255	@ 0xff
 8006924:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006926:	2301      	movs	r3, #1
 8006928:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 800692c:	2000      	movs	r0, #0
 800692e:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 8006932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006936:	4b14      	ldr	r3, [pc, #80]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 800693e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006940:	2201      	movs	r2, #1
 8006942:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006944:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8006948:	d00f      	beq.n	800696a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800694a:	4b0f      	ldr	r3, [pc, #60]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 800694c:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800694e:	69a2      	ldr	r2, [r4, #24]
 8006950:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006952:	6862      	ldr	r2, [r4, #4]
 8006954:	4b0c      	ldr	r3, [pc, #48]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 8006956:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006958:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8006966:	619a      	str	r2, [r3, #24]
 8006968:	e7d3      	b.n	8006912 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800696a:	69a3      	ldr	r3, [r4, #24]
 800696c:	69e2      	ldr	r2, [r4, #28]
 800696e:	4313      	orrs	r3, r2
 8006970:	4a05      	ldr	r2, [pc, #20]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 8006972:	6453      	str	r3, [r2, #68]	@ 0x44
 8006974:	e7ed      	b.n	8006952 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006976:	69a3      	ldr	r3, [r4, #24]
 8006978:	69e2      	ldr	r2, [r4, #28]
 800697a:	4313      	orrs	r3, r2
 800697c:	4a02      	ldr	r2, [pc, #8]	@ (8006988 <HAL_RTC_SetAlarm_IT+0x170>)
 800697e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006980:	e7bc      	b.n	80068fc <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006982:	2002      	movs	r0, #2
}
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40002800 	.word	0x40002800
 800698c:	58000800 	.word	0x58000800

08006990 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006990:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d017      	beq.n	80069c8 <HAL_RTCEx_EnableBypassShadow+0x38>
 8006998:	2101      	movs	r1, #1
 800699a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800699e:	2302      	movs	r3, #2
 80069a0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069a4:	4b09      	ldr	r3, [pc, #36]	@ (80069cc <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80069a6:	22ca      	movs	r2, #202	@ 0xca
 80069a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80069aa:	2253      	movs	r2, #83	@ 0x53
 80069ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	f042 0220 	orr.w	r2, r2, #32
 80069b4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069b6:	22ff      	movs	r2, #255	@ 0xff
 80069b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069ba:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069be:	2300      	movs	r3, #0
 80069c0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 80069c4:	4618      	mov	r0, r3
 80069c6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80069c8:	2002      	movs	r0, #2
}
 80069ca:	4770      	bx	lr
 80069cc:	40002800 	.word	0x40002800

080069d0 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069d0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d020      	beq.n	8006a1a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80069d8:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80069da:	2101      	movs	r1, #1
 80069dc:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069e0:	2302      	movs	r3, #2
 80069e2:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a20 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80069e8:	22ca      	movs	r2, #202	@ 0xca
 80069ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80069ec:	2253      	movs	r2, #83	@ 0x53
 80069ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80069f6:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80069f8:	4c0a      	ldr	r4, [pc, #40]	@ (8006a24 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80069fa:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80069fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006a02:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a06:	22ff      	movs	r2, #255	@ 0xff
 8006a08:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006a0a:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8006a14:	4618      	mov	r0, r3
}
 8006a16:	bc10      	pop	{r4}
 8006a18:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006a1a:	2002      	movs	r0, #2
}
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40002800 	.word	0x40002800
 8006a24:	58000800 	.word	0x58000800

08006a28 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006a2c:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a30:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006a34:	d103      	bne.n	8006a3e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8006a3c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006a3e:	4b03      	ldr	r3, [pc, #12]	@ (8006a4c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006a40:	2240      	movs	r2, #64	@ 0x40
 8006a42:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006a44:	f7fc fd84 	bl	8003550 <HAL_RTCEx_SSRUEventCallback>
 8006a48:	e7f5      	b.n	8006a36 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006a4a:	bf00      	nop
 8006a4c:	40002800 	.word	0x40002800

08006a50 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006a50:	4770      	bx	lr

08006a52 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006a52:	0089      	lsls	r1, r1, #2
 8006a54:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8006a58:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006a5c:	600a      	str	r2, [r1, #0]
}
 8006a5e:	4770      	bx	lr

08006a60 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006a60:	0089      	lsls	r1, r1, #2
 8006a62:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8006a66:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006a6a:	6808      	ldr	r0, [r1, #0]
}
 8006a6c:	4770      	bx	lr
	...

08006a70 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006a70:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <SUBGHZSPI_Init+0x20>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a78:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006a7a:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8006a7e:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006a80:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8006a84:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a8c:	601a      	str	r2, [r3, #0]
}
 8006a8e:	4770      	bx	lr
 8006a90:	58010000 	.word	0x58010000

08006a94 <HAL_SUBGHZ_Init>:
{
 8006a94:	b530      	push	{r4, r5, lr}
 8006a96:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d05d      	beq.n	8006b58 <HAL_SUBGHZ_Init+0xc4>
 8006a9c:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8006a9e:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006aa0:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8006aa4:	b10b      	cbz	r3, 8006aaa <HAL_SUBGHZ_Init+0x16>
 8006aa6:	2d03      	cmp	r5, #3
 8006aa8:	d10b      	bne.n	8006ac2 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f7fc fab2 	bl	8003018 <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006ab4:	4a29      	ldr	r2, [pc, #164]	@ (8006b5c <HAL_SUBGHZ_Init+0xc8>)
 8006ab6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006aba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006abe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006ac2:	b185      	cbz	r5, 8006ae6 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006ac4:	4b26      	ldr	r3, [pc, #152]	@ (8006b60 <HAL_SUBGHZ_Init+0xcc>)
 8006ac6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aca:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8006acc:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006ace:	6820      	ldr	r0, [r4, #0]
 8006ad0:	f7ff ffce 	bl	8006a70 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006adc:	2301      	movs	r3, #1
 8006ade:	71a3      	strb	r3, [r4, #6]
}
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	b003      	add	sp, #12
 8006ae4:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006aee:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8006af2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006af6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006afa:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <HAL_SUBGHZ_Init+0xd0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b02:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b06:	2264      	movs	r2, #100	@ 0x64
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	e014      	b.n	8006b3a <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b10:	2501      	movs	r5, #1
 8006b12:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006b14:	4b12      	ldr	r3, [pc, #72]	@ (8006b60 <HAL_SUBGHZ_Init+0xcc>)
 8006b16:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006b1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b28:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006b2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b2e:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	d1d3      	bne.n	8006adc <HAL_SUBGHZ_Init+0x48>
 8006b34:	e7cb      	b.n	8006ace <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0ec      	beq.n	8006b14 <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0e7      	beq.n	8006b10 <HAL_SUBGHZ_Init+0x7c>
      count--;
 8006b40:	9b01      	ldr	r3, [sp, #4]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b4e:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 8006b52:	d0f0      	beq.n	8006b36 <HAL_SUBGHZ_Init+0xa2>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e7ee      	b.n	8006b36 <HAL_SUBGHZ_Init+0xa2>
    return status;
 8006b58:	2501      	movs	r5, #1
 8006b5a:	e7c1      	b.n	8006ae0 <HAL_SUBGHZ_Init+0x4c>
 8006b5c:	58000800 	.word	0x58000800
 8006b60:	58000400 	.word	0x58000400
 8006b64:	200000e4 	.word	0x200000e4

08006b68 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006b68:	b082      	sub	sp, #8
 8006b6a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <SUBGHZSPI_Transmit+0x70>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b74:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b78:	2064      	movs	r0, #100	@ 0x64
 8006b7a:	fb00 f303 	mul.w	r3, r0, r3
 8006b7e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006b80:	9b01      	ldr	r3, [sp, #4]
 8006b82:	b14b      	cbz	r3, 8006b98 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006b84:	9b01      	ldr	r3, [sp, #4]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006b8a:	4b14      	ldr	r3, [pc, #80]	@ (8006bdc <SUBGHZSPI_Transmit+0x74>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f013 0f02 	tst.w	r3, #2
 8006b92:	d0f5      	beq.n	8006b80 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006b94:	2000      	movs	r0, #0
 8006b96:	e001      	b.n	8006b9c <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b98:	2001      	movs	r0, #1
 8006b9a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006bdc <SUBGHZSPI_Transmit+0x74>)
 8006b9e:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd8 <SUBGHZSPI_Transmit+0x70>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006ba8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006bac:	2164      	movs	r1, #100	@ 0x64
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006bb4:	9b01      	ldr	r3, [sp, #4]
 8006bb6:	b143      	cbz	r3, 8006bca <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006bb8:	9b01      	ldr	r3, [sp, #4]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006bbe:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <SUBGHZSPI_Transmit+0x74>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f013 0f01 	tst.w	r3, #1
 8006bc6:	d0f5      	beq.n	8006bb4 <SUBGHZSPI_Transmit+0x4c>
 8006bc8:	e001      	b.n	8006bce <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006bca:	2001      	movs	r0, #1
 8006bcc:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006bce:	4b03      	ldr	r3, [pc, #12]	@ (8006bdc <SUBGHZSPI_Transmit+0x74>)
 8006bd0:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006bd2:	b002      	add	sp, #8
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	200000e4 	.word	0x200000e4
 8006bdc:	58010000 	.word	0x58010000

08006be0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006be0:	b082      	sub	sp, #8
 8006be2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006be4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c58 <SUBGHZSPI_Receive+0x78>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006bec:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006bf0:	2064      	movs	r0, #100	@ 0x64
 8006bf2:	fb00 f303 	mul.w	r3, r0, r3
 8006bf6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006bf8:	9b01      	ldr	r3, [sp, #4]
 8006bfa:	b14b      	cbz	r3, 8006c10 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006c02:	4b16      	ldr	r3, [pc, #88]	@ (8006c5c <SUBGHZSPI_Receive+0x7c>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f013 0f02 	tst.w	r3, #2
 8006c0a:	d0f5      	beq.n	8006bf8 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	e001      	b.n	8006c14 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006c10:	2001      	movs	r0, #1
 8006c12:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006c14:	4b11      	ldr	r3, [pc, #68]	@ (8006c5c <SUBGHZSPI_Receive+0x7c>)
 8006c16:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8006c1a:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c58 <SUBGHZSPI_Receive+0x78>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006c26:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006c2a:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8006c2e:	fb0c f303 	mul.w	r3, ip, r3
 8006c32:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006c34:	9b01      	ldr	r3, [sp, #4]
 8006c36:	b143      	cbz	r3, 8006c4a <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006c3e:	4b07      	ldr	r3, [pc, #28]	@ (8006c5c <SUBGHZSPI_Receive+0x7c>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f013 0f01 	tst.w	r3, #1
 8006c46:	d0f5      	beq.n	8006c34 <SUBGHZSPI_Receive+0x54>
 8006c48:	e001      	b.n	8006c4e <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006c4e:	4b03      	ldr	r3, [pc, #12]	@ (8006c5c <SUBGHZSPI_Receive+0x7c>)
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006c54:	b002      	add	sp, #8
 8006c56:	4770      	bx	lr
 8006c58:	200000e4 	.word	0x200000e4
 8006c5c:	58010000 	.word	0x58010000

08006c60 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006c60:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006c62:	4b13      	ldr	r3, [pc, #76]	@ (8006cb0 <SUBGHZ_WaitOnBusy+0x50>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c6a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006c6e:	2264      	movs	r2, #100	@ 0x64
 8006c70:	fb02 f303 	mul.w	r3, r2, r3
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	e006      	b.n	8006c86 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006c7c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006c7e:	b002      	add	sp, #8
 8006c80:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006c82:	4213      	tst	r3, r2
 8006c84:	d012      	beq.n	8006cac <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006c86:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <SUBGHZ_WaitOnBusy+0x54>)
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f013 0304 	ands.w	r3, r3, #4
 8006c8e:	d000      	beq.n	8006c92 <SUBGHZ_WaitOnBusy+0x32>
 8006c90:	2301      	movs	r3, #1
    if (count == 0U)
 8006c92:	9a01      	ldr	r2, [sp, #4]
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	d0ef      	beq.n	8006c78 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006c98:	9a01      	ldr	r2, [sp, #4]
 8006c9a:	3a01      	subs	r2, #1
 8006c9c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006c9e:	4a05      	ldr	r2, [pc, #20]	@ (8006cb4 <SUBGHZ_WaitOnBusy+0x54>)
 8006ca0:	6952      	ldr	r2, [r2, #20]
 8006ca2:	f012 0202 	ands.w	r2, r2, #2
 8006ca6:	d0ec      	beq.n	8006c82 <SUBGHZ_WaitOnBusy+0x22>
 8006ca8:	2201      	movs	r2, #1
 8006caa:	e7ea      	b.n	8006c82 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006cac:	2000      	movs	r0, #0
 8006cae:	e7e6      	b.n	8006c7e <SUBGHZ_WaitOnBusy+0x1e>
 8006cb0:	200000e4 	.word	0x200000e4
 8006cb4:	58000400 	.word	0x58000400

08006cb8 <SUBGHZ_CheckDeviceReady>:
{
 8006cb8:	b500      	push	{lr}
 8006cba:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006cbc:	7903      	ldrb	r3, [r0, #4]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d004      	beq.n	8006ccc <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006cc2:	f7ff ffcd 	bl	8006c60 <SUBGHZ_WaitOnBusy>
}
 8006cc6:	b003      	add	sp, #12
 8006cc8:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <SUBGHZ_CheckDeviceReady+0x4c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006cd4:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006cd8:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cda:	4a0b      	ldr	r2, [pc, #44]	@ (8006d08 <SUBGHZ_CheckDeviceReady+0x50>)
 8006cdc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006ce0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f9      	bne.n	8006ce8 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cf4:	4a04      	ldr	r2, [pc, #16]	@ (8006d08 <SUBGHZ_CheckDeviceReady+0x50>)
 8006cf6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d02:	e7de      	b.n	8006cc2 <SUBGHZ_CheckDeviceReady+0xa>
 8006d04:	200000e4 	.word	0x200000e4
 8006d08:	58000400 	.word	0x58000400

08006d0c <HAL_SUBGHZ_WriteRegisters>:
{
 8006d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d10:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d12:	7980      	ldrb	r0, [r0, #6]
 8006d14:	fa5f f880 	uxtb.w	r8, r0
 8006d18:	f1b8 0f01 	cmp.w	r8, #1
 8006d1c:	d13e      	bne.n	8006d9c <HAL_SUBGHZ_WriteRegisters+0x90>
 8006d1e:	460c      	mov	r4, r1
 8006d20:	4617      	mov	r7, r2
 8006d22:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006d24:	796b      	ldrb	r3, [r5, #5]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d03b      	beq.n	8006da2 <HAL_SUBGHZ_WriteRegisters+0x96>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7ff ffc0 	bl	8006cb8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d38:	4a1b      	ldr	r2, [pc, #108]	@ (8006da8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006d3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006d3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006d46:	210d      	movs	r1, #13
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f7ff ff0d 	bl	8006b68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006d4e:	0a21      	lsrs	r1, r4, #8
 8006d50:	4628      	mov	r0, r5
 8006d52:	f7ff ff09 	bl	8006b68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006d56:	b2e1      	uxtb	r1, r4
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f7ff ff05 	bl	8006b68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d5e:	2400      	movs	r4, #0
 8006d60:	e005      	b.n	8006d6e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006d62:	5d39      	ldrb	r1, [r7, r4]
 8006d64:	4628      	mov	r0, r5
 8006d66:	f7ff feff 	bl	8006b68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d6a:	3401      	adds	r4, #1
 8006d6c:	b2a4      	uxth	r4, r4
 8006d6e:	42b4      	cmp	r4, r6
 8006d70:	d3f7      	bcc.n	8006d62 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d72:	4a0d      	ldr	r2, [pc, #52]	@ (8006da8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006d74:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d80:	4628      	mov	r0, r5
 8006d82:	f7ff ff6d 	bl	8006c60 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d86:	68ab      	ldr	r3, [r5, #8]
 8006d88:	b90b      	cbnz	r3, 8006d8e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006d8a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006d92:	2300      	movs	r3, #0
 8006d94:	716b      	strb	r3, [r5, #5]
}
 8006d96:	4640      	mov	r0, r8
 8006d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006d9c:	f04f 0802 	mov.w	r8, #2
 8006da0:	e7f9      	b.n	8006d96 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006da2:	f04f 0802 	mov.w	r8, #2
 8006da6:	e7f6      	b.n	8006d96 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006da8:	58000400 	.word	0x58000400

08006dac <HAL_SUBGHZ_ReadRegisters>:
{
 8006dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006db2:	7980      	ldrb	r0, [r0, #6]
 8006db4:	fa5f f880 	uxtb.w	r8, r0
 8006db8:	f1b8 0f01 	cmp.w	r8, #1
 8006dbc:	d141      	bne.n	8006e42 <HAL_SUBGHZ_ReadRegisters+0x96>
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	4615      	mov	r5, r2
 8006dc2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006dc4:	7973      	ldrb	r3, [r6, #5]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d03e      	beq.n	8006e48 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7ff ff72 	bl	8006cb8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e50 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006dd6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006dda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006de2:	211d      	movs	r1, #29
 8006de4:	4630      	mov	r0, r6
 8006de6:	f7ff febf 	bl	8006b68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006dea:	0a21      	lsrs	r1, r4, #8
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff febb 	bl	8006b68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006df2:	b2e1      	uxtb	r1, r4
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7ff feb7 	bl	8006b68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f7ff feb3 	bl	8006b68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e02:	2400      	movs	r4, #0
 8006e04:	e006      	b.n	8006e14 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006e06:	4629      	mov	r1, r5
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f7ff fee9 	bl	8006be0 <SUBGHZSPI_Receive>
      pData++;
 8006e0e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006e10:	3401      	adds	r4, #1
 8006e12:	b2a4      	uxth	r4, r4
 8006e14:	42bc      	cmp	r4, r7
 8006e16:	d3f6      	bcc.n	8006e06 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e18:	4a0d      	ldr	r2, [pc, #52]	@ (8006e50 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006e1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e26:	4630      	mov	r0, r6
 8006e28:	f7ff ff1a 	bl	8006c60 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e2c:	68b3      	ldr	r3, [r6, #8]
 8006e2e:	b90b      	cbnz	r3, 8006e34 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8006e30:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e34:	2301      	movs	r3, #1
 8006e36:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	7173      	strb	r3, [r6, #5]
}
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006e42:	f04f 0802 	mov.w	r8, #2
 8006e46:	e7f9      	b.n	8006e3c <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006e48:	f04f 0802 	mov.w	r8, #2
 8006e4c:	e7f6      	b.n	8006e3c <HAL_SUBGHZ_ReadRegisters+0x90>
 8006e4e:	bf00      	nop
 8006e50:	58000400 	.word	0x58000400

08006e54 <HAL_SUBGHZ_ExecSetCmd>:
{
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e5a:	7980      	ldrb	r0, [r0, #6]
 8006e5c:	fa5f f980 	uxtb.w	r9, r0
 8006e60:	f1b9 0f01 	cmp.w	r9, #1
 8006e64:	d143      	bne.n	8006eee <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8006e66:	4688      	mov	r8, r1
 8006e68:	4617      	mov	r7, r2
 8006e6a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006e6c:	796b      	ldrb	r3, [r5, #5]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d040      	beq.n	8006ef4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8006e72:	2301      	movs	r3, #1
 8006e74:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e76:	4628      	mov	r0, r5
 8006e78:	f7ff ff1e 	bl	8006cb8 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006e7c:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8006e80:	d005      	beq.n	8006e8e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8006e82:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 8006e86:	d002      	beq.n	8006e8e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	712b      	strb	r3, [r5, #4]
 8006e8c:	e001      	b.n	8006e92 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e92:	4a1a      	ldr	r2, [pc, #104]	@ (8006efc <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006e94:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006e98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f7ff fe60 	bl	8006b68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ea8:	2400      	movs	r4, #0
 8006eaa:	e005      	b.n	8006eb8 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006eac:	5d39      	ldrb	r1, [r7, r4]
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f7ff fe5a 	bl	8006b68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006eb4:	3401      	adds	r4, #1
 8006eb6:	b2a4      	uxth	r4, r4
 8006eb8:	42b4      	cmp	r4, r6
 8006eba:	d3f7      	bcc.n	8006eac <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8006efc <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006ebe:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8006eca:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8006ece:	d10a      	bne.n	8006ee6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ed0:	68ab      	ldr	r3, [r5, #8]
 8006ed2:	b90b      	cbnz	r3, 8006ed8 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8006ed4:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006edc:	2300      	movs	r3, #0
 8006ede:	716b      	strb	r3, [r5, #5]
}
 8006ee0:	4648      	mov	r0, r9
 8006ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f7ff feba 	bl	8006c60 <SUBGHZ_WaitOnBusy>
 8006eec:	e7f0      	b.n	8006ed0 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8006eee:	f04f 0902 	mov.w	r9, #2
 8006ef2:	e7f5      	b.n	8006ee0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8006ef4:	f04f 0902 	mov.w	r9, #2
 8006ef8:	e7f2      	b.n	8006ee0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8006efa:	bf00      	nop
 8006efc:	58000400 	.word	0x58000400

08006f00 <HAL_SUBGHZ_ExecGetCmd>:
{
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f06:	7980      	ldrb	r0, [r0, #6]
 8006f08:	fa5f f880 	uxtb.w	r8, r0
 8006f0c:	f1b8 0f01 	cmp.w	r8, #1
 8006f10:	d139      	bne.n	8006f86 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8006f12:	460c      	mov	r4, r1
 8006f14:	4615      	mov	r5, r2
 8006f16:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006f18:	7973      	ldrb	r3, [r6, #5]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d036      	beq.n	8006f8c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f22:	4630      	mov	r0, r6
 8006f24:	f7ff fec8 	bl	8006cb8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f28:	4a1a      	ldr	r2, [pc, #104]	@ (8006f94 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006f2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006f2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006f36:	4621      	mov	r1, r4
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f7ff fe15 	bl	8006b68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff fe11 	bl	8006b68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f46:	2400      	movs	r4, #0
 8006f48:	e006      	b.n	8006f58 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f7ff fe47 	bl	8006be0 <SUBGHZSPI_Receive>
      pData++;
 8006f52:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006f54:	3401      	adds	r4, #1
 8006f56:	b2a4      	uxth	r4, r4
 8006f58:	42bc      	cmp	r4, r7
 8006f5a:	d3f6      	bcc.n	8006f4a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006f94 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006f5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f7ff fe78 	bl	8006c60 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f70:	68b3      	ldr	r3, [r6, #8]
 8006f72:	b90b      	cbnz	r3, 8006f78 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8006f74:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	7173      	strb	r3, [r6, #5]
}
 8006f80:	4640      	mov	r0, r8
 8006f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006f86:	f04f 0802 	mov.w	r8, #2
 8006f8a:	e7f9      	b.n	8006f80 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006f8c:	f04f 0802 	mov.w	r8, #2
 8006f90:	e7f6      	b.n	8006f80 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8006f92:	bf00      	nop
 8006f94:	58000400 	.word	0x58000400

08006f98 <HAL_SUBGHZ_IRQHandler>:
{
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	aa01      	add	r2, sp, #4
 8006fa8:	2112      	movs	r1, #18
 8006faa:	f7ff ffa9 	bl	8006f00 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006fae:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006fb2:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8006fb6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8006fba:	b226      	sxth	r6, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	aa01      	add	r2, sp, #4
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f7ff ff46 	bl	8006e54 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006fc8:	f016 0f01 	tst.w	r6, #1
 8006fcc:	d126      	bne.n	800701c <HAL_SUBGHZ_IRQHandler+0x84>
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8006fce:	f014 0f02 	tst.w	r4, #2
 8006fd2:	d002      	beq.n	8006fda <HAL_SUBGHZ_IRQHandler+0x42>
 8006fd4:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8006fd8:	d024      	beq.n	8007024 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006fda:	f014 0f04 	tst.w	r4, #4
 8006fde:	d125      	bne.n	800702c <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006fe0:	f014 0f08 	tst.w	r4, #8
 8006fe4:	d126      	bne.n	8007034 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006fe6:	f014 0f10 	tst.w	r4, #16
 8006fea:	d127      	bne.n	800703c <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006fec:	f014 0f20 	tst.w	r4, #32
 8006ff0:	d128      	bne.n	8007044 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006ff2:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8006ff6:	d129      	bne.n	800704c <HAL_SUBGHZ_IRQHandler+0xb4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006ff8:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8006ffc:	d006      	beq.n	800700c <HAL_SUBGHZ_IRQHandler+0x74>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006ffe:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8007002:	d027      	beq.n	8007054 <HAL_SUBGHZ_IRQHandler+0xbc>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007004:	2101      	movs	r1, #1
 8007006:	4628      	mov	r0, r5
 8007008:	f003 fec4 	bl	800ad94 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800700c:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8007010:	d125      	bne.n	800705e <HAL_SUBGHZ_IRQHandler+0xc6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007012:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 8007016:	d126      	bne.n	8007066 <HAL_SUBGHZ_IRQHandler+0xce>
}
 8007018:	b002      	add	sp, #8
 800701a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800701c:	4628      	mov	r0, r5
 800701e:	f003 fea1 	bl	800ad64 <HAL_SUBGHZ_TxCpltCallback>
 8007022:	e7d4      	b.n	8006fce <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007024:	4628      	mov	r0, r5
 8007026:	f003 fea5 	bl	800ad74 <HAL_SUBGHZ_RxCpltCallback>
 800702a:	e7d6      	b.n	8006fda <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800702c:	4628      	mov	r0, r5
 800702e:	f003 fed5 	bl	800addc <HAL_SUBGHZ_PreambleDetectedCallback>
 8007032:	e7d5      	b.n	8006fe0 <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007034:	4628      	mov	r0, r5
 8007036:	f003 fed9 	bl	800adec <HAL_SUBGHZ_SyncWordValidCallback>
 800703a:	e7d4      	b.n	8006fe6 <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800703c:	4628      	mov	r0, r5
 800703e:	f003 fedd 	bl	800adfc <HAL_SUBGHZ_HeaderValidCallback>
 8007042:	e7d3      	b.n	8006fec <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007044:	4628      	mov	r0, r5
 8007046:	f003 fec1 	bl	800adcc <HAL_SUBGHZ_HeaderErrorCallback>
 800704a:	e7d2      	b.n	8006ff2 <HAL_SUBGHZ_IRQHandler+0x5a>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800704c:	4628      	mov	r0, r5
 800704e:	f003 fe99 	bl	800ad84 <HAL_SUBGHZ_CRCErrorCallback>
 8007052:	e7d1      	b.n	8006ff8 <HAL_SUBGHZ_IRQHandler+0x60>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007054:	2100      	movs	r1, #0
 8007056:	4628      	mov	r0, r5
 8007058:	f003 fe9c 	bl	800ad94 <HAL_SUBGHZ_CADStatusCallback>
 800705c:	e7d6      	b.n	800700c <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800705e:	4628      	mov	r0, r5
 8007060:	f003 feaa 	bl	800adb8 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8007064:	e7d5      	b.n	8007012 <HAL_SUBGHZ_IRQHandler+0x7a>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007066:	4628      	mov	r0, r5
 8007068:	f003 fed0 	bl	800ae0c <HAL_SUBGHZ_LrFhssHopCallback>
}
 800706c:	e7d4      	b.n	8007018 <HAL_SUBGHZ_IRQHandler+0x80>
	...

08007070 <HAL_SUBGHZ_WriteBuffer>:
{
 8007070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007074:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007076:	7980      	ldrb	r0, [r0, #6]
 8007078:	fa5f f880 	uxtb.w	r8, r0
 800707c:	f1b8 0f01 	cmp.w	r8, #1
 8007080:	d138      	bne.n	80070f4 <HAL_SUBGHZ_WriteBuffer+0x84>
 8007082:	460c      	mov	r4, r1
 8007084:	4617      	mov	r7, r2
 8007086:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007088:	796b      	ldrb	r3, [r5, #5]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d035      	beq.n	80070fa <HAL_SUBGHZ_WriteBuffer+0x8a>
 800708e:	2301      	movs	r3, #1
 8007090:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007092:	4628      	mov	r0, r5
 8007094:	f7ff fe10 	bl	8006cb8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007098:	4a19      	ldr	r2, [pc, #100]	@ (8007100 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800709a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800709e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80070a6:	210e      	movs	r1, #14
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7ff fd5d 	bl	8006b68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	f7ff fd59 	bl	8006b68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070b6:	2400      	movs	r4, #0
 80070b8:	e005      	b.n	80070c6 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070ba:	5d39      	ldrb	r1, [r7, r4]
 80070bc:	4628      	mov	r0, r5
 80070be:	f7ff fd53 	bl	8006b68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070c2:	3401      	adds	r4, #1
 80070c4:	b2a4      	uxth	r4, r4
 80070c6:	42b4      	cmp	r4, r6
 80070c8:	d3f7      	bcc.n	80070ba <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007100 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80070cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80070d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070d8:	4628      	mov	r0, r5
 80070da:	f7ff fdc1 	bl	8006c60 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070de:	68ab      	ldr	r3, [r5, #8]
 80070e0:	b90b      	cbnz	r3, 80070e6 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80070e2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070e6:	2301      	movs	r3, #1
 80070e8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80070ea:	2300      	movs	r3, #0
 80070ec:	716b      	strb	r3, [r5, #5]
}
 80070ee:	4640      	mov	r0, r8
 80070f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80070f4:	f04f 0802 	mov.w	r8, #2
 80070f8:	e7f9      	b.n	80070ee <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80070fa:	f04f 0802 	mov.w	r8, #2
 80070fe:	e7f6      	b.n	80070ee <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007100:	58000400 	.word	0x58000400

08007104 <HAL_SUBGHZ_ReadBuffer>:
{
 8007104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007108:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800710a:	7980      	ldrb	r0, [r0, #6]
 800710c:	fa5f f880 	uxtb.w	r8, r0
 8007110:	f1b8 0f01 	cmp.w	r8, #1
 8007114:	d13d      	bne.n	8007192 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8007116:	460c      	mov	r4, r1
 8007118:	4615      	mov	r5, r2
 800711a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800711c:	7973      	ldrb	r3, [r6, #5]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d03a      	beq.n	8007198 <HAL_SUBGHZ_ReadBuffer+0x94>
 8007122:	2301      	movs	r3, #1
 8007124:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007126:	4630      	mov	r0, r6
 8007128:	f7ff fdc6 	bl	8006cb8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800712c:	4a1c      	ldr	r2, [pc, #112]	@ (80071a0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800712e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007132:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800713a:	211e      	movs	r1, #30
 800713c:	4630      	mov	r0, r6
 800713e:	f7ff fd13 	bl	8006b68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007142:	4621      	mov	r1, r4
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff fd0f 	bl	8006b68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800714a:	2100      	movs	r1, #0
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff fd0b 	bl	8006b68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007152:	2400      	movs	r4, #0
 8007154:	e006      	b.n	8007164 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007156:	4629      	mov	r1, r5
 8007158:	4630      	mov	r0, r6
 800715a:	f7ff fd41 	bl	8006be0 <SUBGHZSPI_Receive>
      pData++;
 800715e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007160:	3401      	adds	r4, #1
 8007162:	b2a4      	uxth	r4, r4
 8007164:	42bc      	cmp	r4, r7
 8007166:	d3f6      	bcc.n	8007156 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007168:	4a0d      	ldr	r2, [pc, #52]	@ (80071a0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800716a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800716e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007176:	4630      	mov	r0, r6
 8007178:	f7ff fd72 	bl	8006c60 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800717c:	68b3      	ldr	r3, [r6, #8]
 800717e:	b90b      	cbnz	r3, 8007184 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8007180:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007184:	2301      	movs	r3, #1
 8007186:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007188:	2300      	movs	r3, #0
 800718a:	7173      	strb	r3, [r6, #5]
}
 800718c:	4640      	mov	r0, r8
 800718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007192:	f04f 0802 	mov.w	r8, #2
 8007196:	e7f9      	b.n	800718c <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8007198:	f04f 0802 	mov.w	r8, #2
 800719c:	e7f6      	b.n	800718c <HAL_SUBGHZ_ReadBuffer+0x88>
 800719e:	bf00      	nop
 80071a0:	58000400 	.word	0x58000400

080071a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071a6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071a8:	6a04      	ldr	r4, [r0, #32]
 80071aa:	f024 0401 	bic.w	r4, r4, #1
 80071ae:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071b6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ba:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80071be:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071c0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80071c2:	6203      	str	r3, [r0, #32]
}
 80071c4:	bc10      	pop	{r4}
 80071c6:	4770      	bx	lr

080071c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071ca:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071cc:	6a04      	ldr	r4, [r0, #32]
 80071ce:	f024 0410 	bic.w	r4, r4, #16
 80071d2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071d4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071d6:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071da:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80071e2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071e6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80071e8:	6203      	str	r3, [r0, #32]
}
 80071ea:	bc10      	pop	{r4}
 80071ec:	4770      	bx	lr

080071ee <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071ee:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80071f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071f8:	430b      	orrs	r3, r1
 80071fa:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071fe:	6083      	str	r3, [r0, #8]
}
 8007200:	4770      	bx	lr
	...

08007204 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007204:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b01      	cmp	r3, #1
 800720c:	d122      	bne.n	8007254 <HAL_TIM_Base_Start_IT+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800720e:	2302      	movs	r3, #2
 8007210:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007214:	6802      	ldr	r2, [r0, #0]
 8007216:	68d3      	ldr	r3, [r2, #12]
 8007218:	f043 0301 	orr.w	r3, r3, #1
 800721c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721e:	6803      	ldr	r3, [r0, #0]
 8007220:	4a0f      	ldr	r2, [pc, #60]	@ (8007260 <HAL_TIM_Base_Start_IT+0x5c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d008      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0x34>
 8007226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722a:	d005      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007234:	2000      	movs	r0, #0
 8007236:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007238:	6899      	ldr	r1, [r3, #8]
 800723a:	4a0a      	ldr	r2, [pc, #40]	@ (8007264 <HAL_TIM_Base_Start_IT+0x60>)
 800723c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723e:	2a06      	cmp	r2, #6
 8007240:	d00a      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x54>
 8007242:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007246:	d009      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x58>
      __HAL_TIM_ENABLE(htim);
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007250:	2000      	movs	r0, #0
 8007252:	4770      	bx	lr
    return HAL_ERROR;
 8007254:	2001      	movs	r0, #1
 8007256:	4770      	bx	lr
  return HAL_OK;
 8007258:	2000      	movs	r0, #0
 800725a:	4770      	bx	lr
 800725c:	2000      	movs	r0, #0
}
 800725e:	4770      	bx	lr
 8007260:	40012c00 	.word	0x40012c00
 8007264:	00010007 	.word	0x00010007

08007268 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007268:	6802      	ldr	r2, [r0, #0]
 800726a:	68d3      	ldr	r3, [r2, #12]
 800726c:	f023 0301 	bic.w	r3, r3, #1
 8007270:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8007272:	6803      	ldr	r3, [r0, #0]
 8007274:	6a19      	ldr	r1, [r3, #32]
 8007276:	f241 1211 	movw	r2, #4369	@ 0x1111
 800727a:	4211      	tst	r1, r2
 800727c:	d108      	bne.n	8007290 <HAL_TIM_Base_Stop_IT+0x28>
 800727e:	6a19      	ldr	r1, [r3, #32]
 8007280:	f240 4244 	movw	r2, #1092	@ 0x444
 8007284:	4211      	tst	r1, r2
 8007286:	d103      	bne.n	8007290 <HAL_TIM_Base_Stop_IT+0x28>
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007290:	2301      	movs	r3, #1
 8007292:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 8007296:	2000      	movs	r0, #0
 8007298:	4770      	bx	lr
	...

0800729c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800729c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800729e:	4a1e      	ldr	r2, [pc, #120]	@ (8007318 <TIM_Base_SetConfig+0x7c>)
 80072a0:	4290      	cmp	r0, r2
 80072a2:	d002      	beq.n	80072aa <TIM_Base_SetConfig+0xe>
 80072a4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80072a8:	d103      	bne.n	80072b2 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80072ae:	684a      	ldr	r2, [r1, #4]
 80072b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072b2:	4a19      	ldr	r2, [pc, #100]	@ (8007318 <TIM_Base_SetConfig+0x7c>)
 80072b4:	4290      	cmp	r0, r2
 80072b6:	d00a      	beq.n	80072ce <TIM_Base_SetConfig+0x32>
 80072b8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80072bc:	d007      	beq.n	80072ce <TIM_Base_SetConfig+0x32>
 80072be:	f502 52c0 	add.w	r2, r2, #6144	@ 0x1800
 80072c2:	4290      	cmp	r0, r2
 80072c4:	d003      	beq.n	80072ce <TIM_Base_SetConfig+0x32>
 80072c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072ca:	4290      	cmp	r0, r2
 80072cc:	d103      	bne.n	80072d6 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072d2:	68ca      	ldr	r2, [r1, #12]
 80072d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072da:	694a      	ldr	r2, [r1, #20]
 80072dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80072de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072e0:	688b      	ldr	r3, [r1, #8]
 80072e2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80072e4:	680b      	ldr	r3, [r1, #0]
 80072e6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007318 <TIM_Base_SetConfig+0x7c>)
 80072ea:	4298      	cmp	r0, r3
 80072ec:	d007      	beq.n	80072fe <TIM_Base_SetConfig+0x62>
 80072ee:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 80072f2:	4298      	cmp	r0, r3
 80072f4:	d003      	beq.n	80072fe <TIM_Base_SetConfig+0x62>
 80072f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072fa:	4298      	cmp	r0, r3
 80072fc:	d101      	bne.n	8007302 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 80072fe:	690b      	ldr	r3, [r1, #16]
 8007300:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007302:	2301      	movs	r3, #1
 8007304:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007306:	6903      	ldr	r3, [r0, #16]
 8007308:	f013 0f01 	tst.w	r3, #1
 800730c:	d003      	beq.n	8007316 <TIM_Base_SetConfig+0x7a>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800730e:	6903      	ldr	r3, [r0, #16]
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	6103      	str	r3, [r0, #16]
}
 8007316:	4770      	bx	lr
 8007318:	40012c00 	.word	0x40012c00

0800731c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800731c:	b360      	cbz	r0, 8007378 <HAL_TIM_Base_Init+0x5c>
{
 800731e:	b510      	push	{r4, lr}
 8007320:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007322:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007326:	b313      	cbz	r3, 800736e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	2302      	movs	r3, #2
 800732a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800732e:	4621      	mov	r1, r4
 8007330:	f851 0b04 	ldr.w	r0, [r1], #4
 8007334:	f7ff ffb2 	bl	800729c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007338:	2301      	movs	r3, #1
 800733a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007342:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007346:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800734a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800734e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007352:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007356:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800735a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800735e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007362:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007366:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800736a:	2000      	movs	r0, #0
}
 800736c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800736e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007372:	f7fb ffc3 	bl	80032fc <HAL_TIM_Base_MspInit>
 8007376:	e7d7      	b.n	8007328 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007378:	2001      	movs	r0, #1
}
 800737a:	4770      	bx	lr

0800737c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800737c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800737e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007380:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007384:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007388:	430a      	orrs	r2, r1
 800738a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738e:	6082      	str	r2, [r0, #8]
}
 8007390:	bc10      	pop	{r4}
 8007392:	4770      	bx	lr

08007394 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007394:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d076      	beq.n	800748a <HAL_TIM_ConfigClockSource+0xf6>
{
 800739c:	b510      	push	{r4, lr}
 800739e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80073a0:	2301      	movs	r3, #1
 80073a2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80073a6:	2302      	movs	r3, #2
 80073a8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80073ac:	6802      	ldr	r2, [r0, #0]
 80073ae:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b0:	4b37      	ldr	r3, [pc, #220]	@ (8007490 <HAL_TIM_ConfigClockSource+0xfc>)
 80073b2:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80073b4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80073b6:	680b      	ldr	r3, [r1, #0]
 80073b8:	2b60      	cmp	r3, #96	@ 0x60
 80073ba:	d04c      	beq.n	8007456 <HAL_TIM_ConfigClockSource+0xc2>
 80073bc:	d823      	bhi.n	8007406 <HAL_TIM_ConfigClockSource+0x72>
 80073be:	2b40      	cmp	r3, #64	@ 0x40
 80073c0:	d054      	beq.n	800746c <HAL_TIM_ConfigClockSource+0xd8>
 80073c2:	d811      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x54>
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d003      	beq.n	80073d0 <HAL_TIM_ConfigClockSource+0x3c>
 80073c8:	d80a      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x4c>
 80073ca:	b10b      	cbz	r3, 80073d0 <HAL_TIM_ConfigClockSource+0x3c>
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d105      	bne.n	80073dc <HAL_TIM_ConfigClockSource+0x48>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073d0:	4619      	mov	r1, r3
 80073d2:	6820      	ldr	r0, [r4, #0]
 80073d4:	f7ff ff0b 	bl	80071ee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80073d8:	2000      	movs	r0, #0
      break;
 80073da:	e028      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 80073dc:	2001      	movs	r0, #1
 80073de:	e026      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 80073e0:	2b30      	cmp	r3, #48	@ 0x30
 80073e2:	d0f5      	beq.n	80073d0 <HAL_TIM_ConfigClockSource+0x3c>
      status = HAL_ERROR;
 80073e4:	2001      	movs	r0, #1
 80073e6:	e022      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 80073e8:	2b50      	cmp	r3, #80	@ 0x50
 80073ea:	d10a      	bne.n	8007402 <HAL_TIM_ConfigClockSource+0x6e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ec:	68ca      	ldr	r2, [r1, #12]
 80073ee:	6849      	ldr	r1, [r1, #4]
 80073f0:	6820      	ldr	r0, [r4, #0]
 80073f2:	f7ff fed7 	bl	80071a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073f6:	2150      	movs	r1, #80	@ 0x50
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	f7ff fef8 	bl	80071ee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80073fe:	2000      	movs	r0, #0
      break;
 8007400:	e015      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8007402:	2001      	movs	r0, #1
 8007404:	e013      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8007406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800740a:	d03a      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0xee>
 800740c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007410:	d014      	beq.n	800743c <HAL_TIM_ConfigClockSource+0xa8>
 8007412:	2b70      	cmp	r3, #112	@ 0x70
 8007414:	d137      	bne.n	8007486 <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8007416:	68cb      	ldr	r3, [r1, #12]
 8007418:	684a      	ldr	r2, [r1, #4]
 800741a:	6889      	ldr	r1, [r1, #8]
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	f7ff ffad 	bl	800737c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007422:	6822      	ldr	r2, [r4, #0]
 8007424:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007426:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800742a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800742c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800742e:	2301      	movs	r3, #1
 8007430:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007434:	2300      	movs	r3, #0
 8007436:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800743a:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800743c:	68cb      	ldr	r3, [r1, #12]
 800743e:	684a      	ldr	r2, [r1, #4]
 8007440:	6889      	ldr	r1, [r1, #8]
 8007442:	6820      	ldr	r0, [r4, #0]
 8007444:	f7ff ff9a 	bl	800737c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007448:	6822      	ldr	r2, [r4, #0]
 800744a:	6893      	ldr	r3, [r2, #8]
 800744c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007450:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007452:	2000      	movs	r0, #0
      break;
 8007454:	e7eb      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007456:	68ca      	ldr	r2, [r1, #12]
 8007458:	6849      	ldr	r1, [r1, #4]
 800745a:	6820      	ldr	r0, [r4, #0]
 800745c:	f7ff feb4 	bl	80071c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007460:	2160      	movs	r1, #96	@ 0x60
 8007462:	6820      	ldr	r0, [r4, #0]
 8007464:	f7ff fec3 	bl	80071ee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007468:	2000      	movs	r0, #0
      break;
 800746a:	e7e0      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800746c:	68ca      	ldr	r2, [r1, #12]
 800746e:	6849      	ldr	r1, [r1, #4]
 8007470:	6820      	ldr	r0, [r4, #0]
 8007472:	f7ff fe97 	bl	80071a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007476:	2140      	movs	r1, #64	@ 0x40
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	f7ff feb8 	bl	80071ee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800747e:	2000      	movs	r0, #0
      break;
 8007480:	e7d5      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8007482:	2000      	movs	r0, #0
 8007484:	e7d3      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8007486:	2001      	movs	r0, #1
 8007488:	e7d1      	b.n	800742e <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 800748a:	2002      	movs	r0, #2
}
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	ffce0088 	.word	0xffce0088

08007494 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007494:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8007498:	2a01      	cmp	r2, #1
 800749a:	d02b      	beq.n	80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800749c:	b430      	push	{r4, r5}
 800749e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80074a0:	2201      	movs	r2, #1
 80074a2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a6:	2202      	movs	r2, #2
 80074a8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074b0:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074b2:	4d11      	ldr	r5, [pc, #68]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80074b4:	42a8      	cmp	r0, r5
 80074b6:	d018      	beq.n	80074ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074b8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074bc:	680d      	ldr	r5, [r1, #0]
 80074be:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074c0:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	480c      	ldr	r0, [pc, #48]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80074c6:	4282      	cmp	r2, r0
 80074c8:	d002      	beq.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80074ca:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80074ce:	d104      	bne.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074d0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074d4:	6889      	ldr	r1, [r1, #8]
 80074d6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074d8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074e0:	2000      	movs	r0, #0
 80074e2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80074e6:	bc30      	pop	{r4, r5}
 80074e8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074ee:	684d      	ldr	r5, [r1, #4]
 80074f0:	432a      	orrs	r2, r5
 80074f2:	e7e1      	b.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 80074f4:	2002      	movs	r0, #2
}
 80074f6:	4770      	bx	lr
 80074f8:	40012c00 	.word	0x40012c00

080074fc <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80074fc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	e852 3f00 	ldrex	r3, [r2]
 8007502:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	e842 3100 	strex	r1, r3, [r2]
 800750a:	2900      	cmp	r1, #0
 800750c:	d1f6      	bne.n	80074fc <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800750e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	f102 0308 	add.w	r3, r2, #8
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	3208      	adds	r2, #8
 800751e:	e842 3100 	strex	r1, r3, [r2]
 8007522:	2900      	cmp	r1, #0
 8007524:	d1f3      	bne.n	800750e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007526:	2320      	movs	r3, #32
 8007528:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 800752c:	4770      	bx	lr

0800752e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800752e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	e852 3f00 	ldrex	r3, [r2]
 8007534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	e842 3100 	strex	r1, r3, [r2]
 800753c:	2900      	cmp	r1, #0
 800753e:	d1f6      	bne.n	800752e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007540:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	f102 0308 	add.w	r3, r2, #8
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800754e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	3208      	adds	r2, #8
 8007554:	e842 3100 	strex	r1, r3, [r2]
 8007558:	2900      	cmp	r1, #0
 800755a:	d1f1      	bne.n	8007540 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800755e:	2b01      	cmp	r3, #1
 8007560:	d006      	beq.n	8007570 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007562:	2320      	movs	r3, #32
 8007564:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007568:	2300      	movs	r3, #0
 800756a:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800756c:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800756e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007570:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	e852 3f00 	ldrex	r3, [r2]
 8007576:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	e842 3100 	strex	r1, r3, [r2]
 800757e:	2900      	cmp	r1, #0
 8007580:	d1f6      	bne.n	8007570 <UART_EndRxTransfer+0x42>
 8007582:	e7ee      	b.n	8007562 <UART_EndRxTransfer+0x34>

08007584 <HAL_UART_Transmit_DMA>:
{
 8007584:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007586:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800758a:	2a20      	cmp	r2, #32
 800758c:	d13d      	bne.n	800760a <HAL_UART_Transmit_DMA+0x86>
{
 800758e:	b510      	push	{r4, lr}
 8007590:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8007592:	2900      	cmp	r1, #0
 8007594:	d03b      	beq.n	800760e <HAL_UART_Transmit_DMA+0x8a>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d03b      	beq.n	8007612 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 800759a:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800759c:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 80075a0:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075aa:	2221      	movs	r2, #33	@ 0x21
 80075ac:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 80075b0:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80075b2:	b1ca      	cbz	r2, 80075e8 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80075b4:	4918      	ldr	r1, [pc, #96]	@ (8007618 <HAL_UART_Transmit_DMA+0x94>)
 80075b6:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80075b8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80075ba:	4918      	ldr	r1, [pc, #96]	@ (800761c <HAL_UART_Transmit_DMA+0x98>)
 80075bc:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80075be:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80075c0:	4917      	ldr	r1, [pc, #92]	@ (8007620 <HAL_UART_Transmit_DMA+0x9c>)
 80075c2:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80075c4:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80075c6:	2100      	movs	r1, #0
 80075c8:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80075ca:	6802      	ldr	r2, [r0, #0]
 80075cc:	3228      	adds	r2, #40	@ 0x28
 80075ce:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80075d0:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80075d2:	f7fd fdfd 	bl	80051d0 <HAL_DMA_Start_IT>
 80075d6:	b138      	cbz	r0, 80075e8 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075d8:	2310      	movs	r3, #16
 80075da:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 80075de:	2320      	movs	r3, #32
 80075e0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 80075e4:	2001      	movs	r0, #1
 80075e6:	e00f      	b.n	8007608 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	2240      	movs	r2, #64	@ 0x40
 80075ec:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	f102 0308 	add.w	r3, r2, #8
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	3208      	adds	r2, #8
 80075fe:	e842 3100 	strex	r1, r3, [r2]
 8007602:	2900      	cmp	r1, #0
 8007604:	d1f3      	bne.n	80075ee <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8007606:	2000      	movs	r0, #0
}
 8007608:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800760a:	2002      	movs	r0, #2
}
 800760c:	4770      	bx	lr
      return HAL_ERROR;
 800760e:	2001      	movs	r0, #1
 8007610:	e7fa      	b.n	8007608 <HAL_UART_Transmit_DMA+0x84>
 8007612:	2001      	movs	r0, #1
 8007614:	e7f8      	b.n	8007608 <HAL_UART_Transmit_DMA+0x84>
 8007616:	bf00      	nop
 8007618:	08007625 	.word	0x08007625
 800761c:	08007693 	.word	0x08007693
 8007620:	0800769f 	.word	0x0800769f

08007624 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007624:	b508      	push	{r3, lr}
 8007626:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007628:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f013 0f20 	tst.w	r3, #32
 8007632:	d118      	bne.n	8007666 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800763a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	f102 0308 	add.w	r3, r2, #8
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	3208      	adds	r2, #8
 800764a:	e842 3100 	strex	r1, r3, [r2]
 800764e:	2900      	cmp	r1, #0
 8007650:	d1f3      	bne.n	800763a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007652:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	e852 3f00 	ldrex	r3, [r2]
 8007658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	e842 3100 	strex	r1, r3, [r2]
 8007660:	2900      	cmp	r1, #0
 8007662:	d1f6      	bne.n	8007652 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007664:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007666:	f7fc f935 	bl	80038d4 <HAL_UART_TxCpltCallback>
}
 800766a:	e7fb      	b.n	8007664 <UART_DMATransmitCplt+0x40>

0800766c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800766e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	e852 3f00 	ldrex	r3, [r2]
 8007674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	e842 3100 	strex	r1, r3, [r2]
 800767c:	2900      	cmp	r1, #0
 800767e:	d1f6      	bne.n	800766e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007680:	2320      	movs	r3, #32
 8007682:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007686:	2300      	movs	r3, #0
 8007688:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800768a:	f7fc f923 	bl	80038d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800768e:	bd08      	pop	{r3, pc}

08007690 <HAL_UART_TxHalfCpltCallback>:
}
 8007690:	4770      	bx	lr

08007692 <UART_DMATxHalfCplt>:
{
 8007692:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007694:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8007696:	f7ff fffb 	bl	8007690 <HAL_UART_TxHalfCpltCallback>
}
 800769a:	bd08      	pop	{r3, pc}

0800769c <HAL_UART_ErrorCallback>:
}
 800769c:	4770      	bx	lr

0800769e <UART_DMAError>:
{
 800769e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076a0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80076a2:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80076a6:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076b2:	d001      	beq.n	80076b8 <UART_DMAError+0x1a>
 80076b4:	2a21      	cmp	r2, #33	@ 0x21
 80076b6:	d010      	beq.n	80076da <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80076c0:	d001      	beq.n	80076c6 <UART_DMAError+0x28>
 80076c2:	2d22      	cmp	r5, #34	@ 0x22
 80076c4:	d010      	beq.n	80076e8 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80076ca:	f043 0310 	orr.w	r3, r3, #16
 80076ce:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7ff ffe2 	bl	800769c <HAL_UART_ErrorCallback>
}
 80076d8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80076e0:	4620      	mov	r0, r4
 80076e2:	f7ff ff0b 	bl	80074fc <UART_EndTxTransfer>
 80076e6:	e7e7      	b.n	80076b8 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80076ee:	4620      	mov	r0, r4
 80076f0:	f7ff ff1d 	bl	800752e <UART_EndRxTransfer>
 80076f4:	e7e7      	b.n	80076c6 <UART_DMAError+0x28>

080076f6 <UART_DMAAbortOnError>:
{
 80076f6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076f8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007700:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8007704:	f7ff ffca 	bl	800769c <HAL_UART_ErrorCallback>
}
 8007708:	bd08      	pop	{r3, pc}

0800770a <HAL_UART_AbortReceiveCpltCallback>:
}
 800770a:	4770      	bx	lr

0800770c <HAL_UART_AbortReceive_IT>:
{
 800770c:	b510      	push	{r4, lr}
 800770e:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8007710:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	e852 3f00 	ldrex	r3, [r2]
 8007716:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	e842 3100 	strex	r1, r3, [r2]
 800771e:	2900      	cmp	r1, #0
 8007720:	d1f6      	bne.n	8007710 <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007722:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	f102 0308 	add.w	r3, r2, #8
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007730:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	3208      	adds	r2, #8
 8007736:	e842 3100 	strex	r1, r3, [r2]
 800773a:	2900      	cmp	r1, #0
 800773c:	d1f1      	bne.n	8007722 <HAL_UART_AbortReceive_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007740:	2b01      	cmp	r3, #1
 8007742:	d01f      	beq.n	8007784 <HAL_UART_AbortReceive_IT+0x78>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800774c:	d038      	beq.n	80077c0 <HAL_UART_AbortReceive_IT+0xb4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800774e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	f102 0308 	add.w	r3, r2, #8
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	3208      	adds	r2, #8
 800775e:	e842 3100 	strex	r1, r3, [r2]
 8007762:	2900      	cmp	r1, #0
 8007764:	d1f3      	bne.n	800774e <HAL_UART_AbortReceive_IT+0x42>
    if (huart->hdmarx != NULL)
 8007766:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800776a:	b1ab      	cbz	r3, 8007798 <HAL_UART_AbortReceive_IT+0x8c>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800776c:	4a1c      	ldr	r2, [pc, #112]	@ (80077e0 <HAL_UART_AbortReceive_IT+0xd4>)
 800776e:	639a      	str	r2, [r3, #56]	@ 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007770:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007774:	f7fd fdb2 	bl	80052dc <HAL_DMA_Abort_IT>
 8007778:	b378      	cbz	r0, 80077da <HAL_UART_AbortReceive_IT+0xce>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800777a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800777e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007780:	4798      	blx	r3
 8007782:	e02a      	b.n	80077da <HAL_UART_AbortReceive_IT+0xce>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007784:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007786:	e852 3f00 	ldrex	r3, [r2]
 800778a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	e842 3100 	strex	r1, r3, [r2]
 8007792:	2900      	cmp	r1, #0
 8007794:	d1f6      	bne.n	8007784 <HAL_UART_AbortReceive_IT+0x78>
 8007796:	e7d5      	b.n	8007744 <HAL_UART_AbortReceive_IT+0x38>
      huart->RxXferCount = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr = NULL;
 800779e:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80077a0:	6822      	ldr	r2, [r4, #0]
 80077a2:	210f      	movs	r1, #15
 80077a4:	6211      	str	r1, [r2, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077a6:	6821      	ldr	r1, [r4, #0]
 80077a8:	698a      	ldr	r2, [r1, #24]
 80077aa:	f042 0208 	orr.w	r2, r2, #8
 80077ae:	618a      	str	r2, [r1, #24]
      huart->RxState = HAL_UART_STATE_READY;
 80077b0:	2220      	movs	r2, #32
 80077b2:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b6:	66e3      	str	r3, [r4, #108]	@ 0x6c
      HAL_UART_AbortReceiveCpltCallback(huart);
 80077b8:	4620      	mov	r0, r4
 80077ba:	f7ff ffa6 	bl	800770a <HAL_UART_AbortReceiveCpltCallback>
 80077be:	e00c      	b.n	80077da <HAL_UART_AbortReceive_IT+0xce>
    huart->RxXferCount = 0U;
 80077c0:	2200      	movs	r2, #0
 80077c2:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
    huart->pRxBuffPtr = NULL;
 80077c6:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80077c8:	210f      	movs	r1, #15
 80077ca:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 80077cc:	2320      	movs	r3, #32
 80077ce:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d2:	66e2      	str	r2, [r4, #108]	@ 0x6c
    HAL_UART_AbortReceiveCpltCallback(huart);
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7ff ff98 	bl	800770a <HAL_UART_AbortReceiveCpltCallback>
}
 80077da:	2000      	movs	r0, #0
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	bf00      	nop
 80077e0:	080077e5 	.word	0x080077e5

080077e4 <UART_DMARxOnlyAbortCallback>:
{
 80077e4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077e6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80077ee:	6803      	ldr	r3, [r0, #0]
 80077f0:	210f      	movs	r1, #15
 80077f2:	6219      	str	r1, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077f4:	6801      	ldr	r1, [r0, #0]
 80077f6:	698b      	ldr	r3, [r1, #24]
 80077f8:	f043 0308 	orr.w	r3, r3, #8
 80077fc:	618b      	str	r3, [r1, #24]
  huart->RxState = HAL_UART_STATE_READY;
 80077fe:	2320      	movs	r3, #32
 8007800:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007804:	66c2      	str	r2, [r0, #108]	@ 0x6c
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007806:	f7ff ff80 	bl	800770a <HAL_UART_AbortReceiveCpltCallback>
}
 800780a:	bd08      	pop	{r3, pc}

0800780c <HAL_UARTEx_RxEventCallback>:
}
 800780c:	4770      	bx	lr
	...

08007810 <HAL_UART_IRQHandler>:
{
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007814:	6802      	ldr	r2, [r0, #0]
 8007816:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007818:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800781a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800781c:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8007820:	ea13 0f0c 	tst.w	r3, ip
 8007824:	d10d      	bne.n	8007842 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007826:	f013 0f20 	tst.w	r3, #32
 800782a:	d010      	beq.n	800784e <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800782c:	f010 0f20 	tst.w	r0, #32
 8007830:	d102      	bne.n	8007838 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007832:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8007836:	d00a      	beq.n	800784e <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8007838:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800783a:	b393      	cbz	r3, 80078a2 <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800783c:	4620      	mov	r0, r4
 800783e:	4798      	blx	r3
      return;
 8007840:	e02f      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007842:	4db4      	ldr	r5, [pc, #720]	@ (8007b14 <HAL_UART_IRQHandler+0x304>)
 8007844:	400d      	ands	r5, r1
 8007846:	d12d      	bne.n	80078a4 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007848:	4eb3      	ldr	r6, [pc, #716]	@ (8007b18 <HAL_UART_IRQHandler+0x308>)
 800784a:	4230      	tst	r0, r6
 800784c:	d12a      	bne.n	80078a4 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8007850:	2d01      	cmp	r5, #1
 8007852:	f000 80c0 	beq.w	80079d6 <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007856:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800785a:	d003      	beq.n	8007864 <HAL_UART_IRQHandler+0x54>
 800785c:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8007860:	f040 815e 	bne.w	8007b20 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007864:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007868:	d007      	beq.n	800787a <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800786a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800786e:	f040 815e 	bne.w	8007b2e <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007872:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 8007876:	f040 815a 	bne.w	8007b2e <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800787a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800787e:	d003      	beq.n	8007888 <HAL_UART_IRQHandler+0x78>
 8007880:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8007884:	f040 815a 	bne.w	8007b3c <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007888:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800788c:	d003      	beq.n	8007896 <HAL_UART_IRQHandler+0x86>
 800788e:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8007892:	f040 8157 	bne.w	8007b44 <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007896:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800789a:	d002      	beq.n	80078a2 <HAL_UART_IRQHandler+0x92>
 800789c:	2800      	cmp	r0, #0
 800789e:	f2c0 8155 	blt.w	8007b4c <HAL_UART_IRQHandler+0x33c>
}
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078a4:	f013 0f01 	tst.w	r3, #1
 80078a8:	d009      	beq.n	80078be <HAL_UART_IRQHandler+0xae>
 80078aa:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80078ae:	d006      	beq.n	80078be <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078b0:	2601      	movs	r6, #1
 80078b2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078b4:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80078b8:	4332      	orrs	r2, r6
 80078ba:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078be:	f013 0f02 	tst.w	r3, #2
 80078c2:	d00b      	beq.n	80078dc <HAL_UART_IRQHandler+0xcc>
 80078c4:	f011 0f01 	tst.w	r1, #1
 80078c8:	d008      	beq.n	80078dc <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	2602      	movs	r6, #2
 80078ce:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078d0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80078d4:	f042 0204 	orr.w	r2, r2, #4
 80078d8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078dc:	f013 0f04 	tst.w	r3, #4
 80078e0:	d00b      	beq.n	80078fa <HAL_UART_IRQHandler+0xea>
 80078e2:	f011 0f01 	tst.w	r1, #1
 80078e6:	d008      	beq.n	80078fa <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078e8:	6822      	ldr	r2, [r4, #0]
 80078ea:	2604      	movs	r6, #4
 80078ec:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ee:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80078f2:	f042 0202 	orr.w	r2, r2, #2
 80078f6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078fa:	f013 0f08 	tst.w	r3, #8
 80078fe:	d00b      	beq.n	8007918 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007900:	f010 0f20 	tst.w	r0, #32
 8007904:	d100      	bne.n	8007908 <HAL_UART_IRQHandler+0xf8>
 8007906:	b13d      	cbz	r5, 8007918 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007908:	6822      	ldr	r2, [r4, #0]
 800790a:	2508      	movs	r5, #8
 800790c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800790e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007912:	432a      	orrs	r2, r5
 8007914:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007918:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800791c:	d00c      	beq.n	8007938 <HAL_UART_IRQHandler+0x128>
 800791e:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8007922:	d009      	beq.n	8007938 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007924:	6822      	ldr	r2, [r4, #0]
 8007926:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800792a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800792c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007930:	f042 0220 	orr.w	r2, r2, #32
 8007934:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007938:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800793c:	2a00      	cmp	r2, #0
 800793e:	d0b0      	beq.n	80078a2 <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007940:	f013 0f20 	tst.w	r3, #32
 8007944:	d009      	beq.n	800795a <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007946:	f010 0f20 	tst.w	r0, #32
 800794a:	d102      	bne.n	8007952 <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800794c:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8007950:	d003      	beq.n	800795a <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 8007952:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007954:	b10b      	cbz	r3, 800795a <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8007956:	4620      	mov	r0, r4
 8007958:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800795a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007966:	d102      	bne.n	800796e <HAL_UART_IRQHandler+0x15e>
 8007968:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800796c:	d02c      	beq.n	80079c8 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 800796e:	4620      	mov	r0, r4
 8007970:	f7ff fddd 	bl	800752e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800797c:	d020      	beq.n	80079c0 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800797e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	f102 0308 	add.w	r3, r2, #8
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	3208      	adds	r2, #8
 800798e:	e842 3100 	strex	r1, r3, [r2]
 8007992:	2900      	cmp	r1, #0
 8007994:	d1f3      	bne.n	800797e <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8007996:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800799a:	b16b      	cbz	r3, 80079b8 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800799c:	4a5f      	ldr	r2, [pc, #380]	@ (8007b1c <HAL_UART_IRQHandler+0x30c>)
 800799e:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80079a4:	f7fd fc9a 	bl	80052dc <HAL_DMA_Abort_IT>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f43f af7a 	beq.w	80078a2 <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079ae:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80079b2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80079b4:	4798      	blx	r3
 80079b6:	e774      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 80079b8:	4620      	mov	r0, r4
 80079ba:	f7ff fe6f 	bl	800769c <HAL_UART_ErrorCallback>
 80079be:	e770      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7ff fe6b 	bl	800769c <HAL_UART_ErrorCallback>
 80079c6:	e76c      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 80079c8:	4620      	mov	r0, r4
 80079ca:	f7ff fe67 	bl	800769c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 80079d4:	e765      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079d6:	f013 0f10 	tst.w	r3, #16
 80079da:	f43f af3c 	beq.w	8007856 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079de:	f010 0f10 	tst.w	r0, #16
 80079e2:	f43f af38 	beq.w	8007856 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e6:	2310      	movs	r3, #16
 80079e8:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80079f2:	d053      	beq.n	8007a9c <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079f4:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80079f8:	6813      	ldr	r3, [r2, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f43f af4f 	beq.w	80078a2 <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a04:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007a08:	4299      	cmp	r1, r3
 8007a0a:	f67f af4a 	bls.w	80078a2 <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 8007a0e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f013 0f20 	tst.w	r3, #32
 8007a1a:	d132      	bne.n	8007a82 <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a1c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	e852 3f00 	ldrex	r3, [r2]
 8007a22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	e842 3100 	strex	r1, r3, [r2]
 8007a2a:	2900      	cmp	r1, #0
 8007a2c:	d1f6      	bne.n	8007a1c <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	f102 0308 	add.w	r3, r2, #8
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	3208      	adds	r2, #8
 8007a3e:	e842 3100 	strex	r1, r3, [r2]
 8007a42:	2900      	cmp	r1, #0
 8007a44:	d1f3      	bne.n	8007a2e <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a46:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	f102 0308 	add.w	r3, r2, #8
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	3208      	adds	r2, #8
 8007a56:	e842 3100 	strex	r1, r3, [r2]
 8007a5a:	2900      	cmp	r1, #0
 8007a5c:	d1f3      	bne.n	8007a46 <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 8007a5e:	2320      	movs	r3, #32
 8007a60:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a64:	2300      	movs	r3, #0
 8007a66:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a68:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	e852 3f00 	ldrex	r3, [r2]
 8007a6e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	e842 3100 	strex	r1, r3, [r2]
 8007a76:	2900      	cmp	r1, #0
 8007a78:	d1f6      	bne.n	8007a68 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a7a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007a7e:	f7fd fbf3 	bl	8005268 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a82:	2302      	movs	r3, #2
 8007a84:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a86:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007a8a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	1ac9      	subs	r1, r1, r3
 8007a92:	b289      	uxth	r1, r1
 8007a94:	4620      	mov	r0, r4
 8007a96:	f7ff feb9 	bl	800780c <HAL_UARTEx_RxEventCallback>
      return;
 8007a9a:	e702      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a9c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007aa0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	1ac9      	subs	r1, r1, r3
 8007aa8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8007aaa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f43f aef6 	beq.w	80078a2 <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 8007ab6:	2900      	cmp	r1, #0
 8007ab8:	f43f aef3 	beq.w	80078a2 <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007abc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	e852 3f00 	ldrex	r3, [r2]
 8007ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	e842 3000 	strex	r0, r3, [r2]
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d1f6      	bne.n	8007abc <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ace:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	f102 0308 	add.w	r3, r2, #8
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007adc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	3208      	adds	r2, #8
 8007ae2:	e842 3000 	strex	r0, r3, [r2]
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d1f1      	bne.n	8007ace <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8007aea:	2320      	movs	r3, #32
 8007aec:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	2300      	movs	r3, #0
 8007af2:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8007af4:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	e852 3f00 	ldrex	r3, [r2]
 8007afc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	e842 3000 	strex	r0, r3, [r2]
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d1f6      	bne.n	8007af6 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b08:	2302      	movs	r3, #2
 8007b0a:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f7ff fe7d 	bl	800780c <HAL_UARTEx_RxEventCallback>
      return;
 8007b12:	e6c6      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
 8007b14:	10000001 	.word	0x10000001
 8007b18:	04000120 	.word	0x04000120
 8007b1c:	080076f7 	.word	0x080076f7
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b20:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007b24:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 ff54 	bl	80089d4 <HAL_UARTEx_WakeupCallback>
    return;
 8007b2c:	e6b9      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 8007b2e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f43f aeb6 	beq.w	80078a2 <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 8007b36:	4620      	mov	r0, r4
 8007b38:	4798      	blx	r3
    return;
 8007b3a:	e6b2      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f7ff fd95 	bl	800766c <UART_EndTransmit_IT>
    return;
 8007b42:	e6ae      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 ff47 	bl	80089d8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007b4a:	e6aa      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 ff42 	bl	80089d6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8007b52:	e6a6      	b.n	80078a2 <HAL_UART_IRQHandler+0x92>

08007b54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b54:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8007b56:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b5a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8007b5e:	2a22      	cmp	r2, #34	@ 0x22
 8007b60:	d005      	beq.n	8007b6e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b62:	6802      	ldr	r2, [r0, #0]
 8007b64:	6993      	ldr	r3, [r2, #24]
 8007b66:	f043 0308 	orr.w	r3, r3, #8
 8007b6a:	6193      	str	r3, [r2, #24]
  }
}
 8007b6c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b6e:	6802      	ldr	r2, [r0, #0]
 8007b70:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8007b76:	400b      	ands	r3, r1
 8007b78:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007b7a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8007b80:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8007b8e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e9      	bne.n	8007b6c <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b98:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	e852 3f00 	ldrex	r3, [r2]
 8007b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	e842 3100 	strex	r1, r3, [r2]
 8007ba6:	2900      	cmp	r1, #0
 8007ba8:	d1f6      	bne.n	8007b98 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007baa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	f102 0308 	add.w	r3, r2, #8
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	3208      	adds	r2, #8
 8007bba:	e842 3100 	strex	r1, r3, [r2]
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d1f3      	bne.n	8007baa <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8007bc2:	2320      	movs	r3, #32
 8007bc4:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bcc:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bce:	6803      	ldr	r3, [r0, #0]
 8007bd0:	4a16      	ldr	r2, [pc, #88]	@ (8007c2c <UART_RxISR_8BIT+0xd8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00c      	beq.n	8007bf0 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007bdc:	d008      	beq.n	8007bf0 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bde:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	e852 3f00 	ldrex	r3, [r2]
 8007be4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	e842 3100 	strex	r1, r3, [r2]
 8007bec:	2900      	cmp	r1, #0
 8007bee:	d1f6      	bne.n	8007bde <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d116      	bne.n	8007c24 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	e852 3f00 	ldrex	r3, [r2]
 8007c00:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	e842 3100 	strex	r1, r3, [r2]
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	d1f6      	bne.n	8007bfa <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c0c:	6803      	ldr	r3, [r0, #0]
 8007c0e:	69da      	ldr	r2, [r3, #28]
 8007c10:	f012 0f10 	tst.w	r2, #16
 8007c14:	d001      	beq.n	8007c1a <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c16:	2210      	movs	r2, #16
 8007c18:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c1a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8007c1e:	f7ff fdf5 	bl	800780c <HAL_UARTEx_RxEventCallback>
 8007c22:	e7a3      	b.n	8007b6c <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007c24:	f7f9 fe2e 	bl	8001884 <HAL_UART_RxCpltCallback>
 8007c28:	e7a0      	b.n	8007b6c <UART_RxISR_8BIT+0x18>
 8007c2a:	bf00      	nop
 8007c2c:	40008000 	.word	0x40008000

08007c30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c30:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c32:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c36:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8007c3a:	2b22      	cmp	r3, #34	@ 0x22
 8007c3c:	d005      	beq.n	8007c4a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c3e:	6802      	ldr	r2, [r0, #0]
 8007c40:	6993      	ldr	r3, [r2, #24]
 8007c42:	f043 0308 	orr.w	r3, r3, #8
 8007c46:	6193      	str	r3, [r2, #24]
  }
}
 8007c48:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c4a:	6803      	ldr	r3, [r0, #0]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c4e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c50:	4013      	ands	r3, r2
 8007c52:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007c54:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007c56:	3302      	adds	r3, #2
 8007c58:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8007c5a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8007c68:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1ea      	bne.n	8007c48 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	e852 3f00 	ldrex	r3, [r2]
 8007c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	e842 3100 	strex	r1, r3, [r2]
 8007c80:	2900      	cmp	r1, #0
 8007c82:	d1f6      	bne.n	8007c72 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c84:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	f102 0308 	add.w	r3, r2, #8
 8007c8a:	e853 3f00 	ldrex	r3, [r3]
 8007c8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	3208      	adds	r2, #8
 8007c94:	e842 3100 	strex	r1, r3, [r2]
 8007c98:	2900      	cmp	r1, #0
 8007c9a:	d1f3      	bne.n	8007c84 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007c9c:	2320      	movs	r3, #32
 8007c9e:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ca6:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ca8:	6803      	ldr	r3, [r0, #0]
 8007caa:	4a16      	ldr	r2, [pc, #88]	@ (8007d04 <UART_RxISR_16BIT+0xd4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00c      	beq.n	8007cca <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007cb6:	d008      	beq.n	8007cca <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cb8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	e852 3f00 	ldrex	r3, [r2]
 8007cbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	e842 3100 	strex	r1, r3, [r2]
 8007cc6:	2900      	cmp	r1, #0
 8007cc8:	d1f6      	bne.n	8007cb8 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cca:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d116      	bne.n	8007cfe <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	e852 3f00 	ldrex	r3, [r2]
 8007cda:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	e842 3100 	strex	r1, r3, [r2]
 8007ce2:	2900      	cmp	r1, #0
 8007ce4:	d1f6      	bne.n	8007cd4 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ce6:	6803      	ldr	r3, [r0, #0]
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	f012 0f10 	tst.w	r2, #16
 8007cee:	d001      	beq.n	8007cf4 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cf0:	2210      	movs	r2, #16
 8007cf2:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cf4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8007cf8:	f7ff fd88 	bl	800780c <HAL_UARTEx_RxEventCallback>
 8007cfc:	e7a4      	b.n	8007c48 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007cfe:	f7f9 fdc1 	bl	8001884 <HAL_UART_RxCpltCallback>
 8007d02:	e7a1      	b.n	8007c48 <UART_RxISR_16BIT+0x18>
 8007d04:	40008000 	.word	0x40008000

08007d08 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8007d0c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d10:	6803      	ldr	r3, [r0, #0]
 8007d12:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d14:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d18:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d1c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8007d20:	2a22      	cmp	r2, #34	@ 0x22
 8007d22:	d005      	beq.n	8007d30 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d24:	699a      	ldr	r2, [r3, #24]
 8007d26:	f042 0208 	orr.w	r2, r2, #8
 8007d2a:	619a      	str	r2, [r3, #24]
  }
}
 8007d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d30:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007d32:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d36:	e008      	b.n	8007d4a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d38:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d14c      	bne.n	8007dda <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8007d40:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d04e      	beq.n	8007de8 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d4a:	2f00      	cmp	r7, #0
 8007d4c:	f000 809a 	beq.w	8007e84 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8007d50:	f015 0f20 	tst.w	r5, #32
 8007d54:	f000 8096 	beq.w	8007e84 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d5c:	b2f3      	uxtb	r3, r6
 8007d5e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8007d60:	400b      	ands	r3, r1
 8007d62:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007d64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d66:	3301      	adds	r3, #1
 8007d68:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8007d6a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d7c:	f015 0f07 	tst.w	r5, #7
 8007d80:	d0de      	beq.n	8007d40 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d82:	f015 0f01 	tst.w	r5, #1
 8007d86:	d009      	beq.n	8007d9c <UART_RxISR_8BIT_FIFOEN+0x94>
 8007d88:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8007d8c:	d006      	beq.n	8007d9c <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d8e:	2201      	movs	r2, #1
 8007d90:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d92:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007d96:	4313      	orrs	r3, r2
 8007d98:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d9c:	f015 0f02 	tst.w	r5, #2
 8007da0:	d00b      	beq.n	8007dba <UART_RxISR_8BIT_FIFOEN+0xb2>
 8007da2:	f018 0f01 	tst.w	r8, #1
 8007da6:	d008      	beq.n	8007dba <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	2202      	movs	r2, #2
 8007dac:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dae:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007db2:	f043 0304 	orr.w	r3, r3, #4
 8007db6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dba:	f015 0f04 	tst.w	r5, #4
 8007dbe:	d0bb      	beq.n	8007d38 <UART_RxISR_8BIT_FIFOEN+0x30>
 8007dc0:	f018 0f01 	tst.w	r8, #1
 8007dc4:	d0b8      	beq.n	8007d38 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dcc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007dd0:	f043 0302 	orr.w	r3, r3, #2
 8007dd4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8007dd8:	e7ae      	b.n	8007d38 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff fc5e 	bl	800769c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8007de6:	e7ab      	b.n	8007d40 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007de8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	e852 3f00 	ldrex	r3, [r2]
 8007dee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	e842 3100 	strex	r1, r3, [r2]
 8007df6:	2900      	cmp	r1, #0
 8007df8:	d1f6      	bne.n	8007de8 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dfa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfc:	f102 0308 	add.w	r3, r2, #8
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e08:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0c:	3208      	adds	r2, #8
 8007e0e:	e842 3100 	strex	r1, r3, [r2]
 8007e12:	2900      	cmp	r1, #0
 8007e14:	d1f1      	bne.n	8007dfa <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8007e16:	2320      	movs	r3, #32
 8007e18:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e20:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	4a29      	ldr	r2, [pc, #164]	@ (8007ecc <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007e30:	d106      	bne.n	8007e40 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e32:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d00d      	beq.n	8007e54 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7f9 fd23 	bl	8001884 <HAL_UART_RxCpltCallback>
 8007e3e:	e784      	b.n	8007d4a <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e40:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	e852 3f00 	ldrex	r3, [r2]
 8007e46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	e842 3100 	strex	r1, r3, [r2]
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	d1f6      	bne.n	8007e40 <UART_RxISR_8BIT_FIFOEN+0x138>
 8007e52:	e7ee      	b.n	8007e32 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e54:	2300      	movs	r3, #0
 8007e56:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e58:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	e852 3f00 	ldrex	r3, [r2]
 8007e5e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	e842 3100 	strex	r1, r3, [r2]
 8007e66:	2900      	cmp	r1, #0
 8007e68:	d1f6      	bne.n	8007e58 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	69da      	ldr	r2, [r3, #28]
 8007e6e:	f012 0f10 	tst.w	r2, #16
 8007e72:	d001      	beq.n	8007e78 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e74:	2210      	movs	r2, #16
 8007e76:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e78:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f7ff fcc5 	bl	800780c <HAL_UARTEx_RxEventCallback>
 8007e82:	e762      	b.n	8007d4a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007e84:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007e88:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f43f af4e 	beq.w	8007d2c <UART_RxISR_8BIT_FIFOEN+0x24>
 8007e90:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8007e94:	429a      	cmp	r2, r3
 8007e96:	f67f af49 	bls.w	8007d2c <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e9a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	f102 0308 	add.w	r3, r2, #8
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	3208      	adds	r2, #8
 8007eaa:	e842 3100 	strex	r1, r3, [r2]
 8007eae:	2900      	cmp	r1, #0
 8007eb0:	d1f3      	bne.n	8007e9a <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8007eb2:	4b07      	ldr	r3, [pc, #28]	@ (8007ed0 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8007eb4:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007eb6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	e852 3f00 	ldrex	r3, [r2]
 8007ebc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	e842 3100 	strex	r1, r3, [r2]
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	d1f6      	bne.n	8007eb6 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8007ec8:	e730      	b.n	8007d2c <UART_RxISR_8BIT_FIFOEN+0x24>
 8007eca:	bf00      	nop
 8007ecc:	40008000 	.word	0x40008000
 8007ed0:	08007b55 	.word	0x08007b55

08007ed4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ed8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007edc:	6803      	ldr	r3, [r0, #0]
 8007ede:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ee0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ee4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ee8:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8007eec:	2a22      	cmp	r2, #34	@ 0x22
 8007eee:	d005      	beq.n	8007efc <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ef0:	699a      	ldr	r2, [r3, #24]
 8007ef2:	f042 0208 	orr.w	r2, r2, #8
 8007ef6:	619a      	str	r2, [r3, #24]
  }
}
 8007ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007efe:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f02:	e008      	b.n	8007f16 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f04:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d14b      	bne.n	8007fa4 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007f0c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d04d      	beq.n	8007fb2 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f16:	2f00      	cmp	r7, #0
 8007f18:	f000 8099 	beq.w	800804e <UART_RxISR_16BIT_FIFOEN+0x17a>
 8007f1c:	f015 0f20 	tst.w	r5, #32
 8007f20:	f000 8095 	beq.w	800804e <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f28:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007f2a:	4033      	ands	r3, r6
 8007f2c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007f2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f30:	3302      	adds	r3, #2
 8007f32:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8007f34:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f46:	f015 0f07 	tst.w	r5, #7
 8007f4a:	d0df      	beq.n	8007f0c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f4c:	f015 0f01 	tst.w	r5, #1
 8007f50:	d009      	beq.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x92>
 8007f52:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8007f56:	d006      	beq.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f58:	2201      	movs	r2, #1
 8007f5a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f5c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007f60:	4313      	orrs	r3, r2
 8007f62:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f66:	f015 0f02 	tst.w	r5, #2
 8007f6a:	d00b      	beq.n	8007f84 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007f6c:	f018 0f01 	tst.w	r8, #1
 8007f70:	d008      	beq.n	8007f84 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	2202      	movs	r2, #2
 8007f76:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f78:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007f7c:	f043 0304 	orr.w	r3, r3, #4
 8007f80:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f84:	f015 0f04 	tst.w	r5, #4
 8007f88:	d0bc      	beq.n	8007f04 <UART_RxISR_16BIT_FIFOEN+0x30>
 8007f8a:	f018 0f01 	tst.w	r8, #1
 8007f8e:	d0b9      	beq.n	8007f04 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	2204      	movs	r2, #4
 8007f94:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f96:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007f9a:	f043 0302 	orr.w	r3, r3, #2
 8007f9e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8007fa2:	e7af      	b.n	8007f04 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f7ff fb79 	bl	800769c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8007fb0:	e7ac      	b.n	8007f0c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	e852 3f00 	ldrex	r3, [r2]
 8007fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	e842 3100 	strex	r1, r3, [r2]
 8007fc0:	2900      	cmp	r1, #0
 8007fc2:	d1f6      	bne.n	8007fb2 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fc4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	f102 0308 	add.w	r3, r2, #8
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	3208      	adds	r2, #8
 8007fd8:	e842 3100 	strex	r1, r3, [r2]
 8007fdc:	2900      	cmp	r1, #0
 8007fde:	d1f1      	bne.n	8007fc4 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fea:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	4a29      	ldr	r2, [pc, #164]	@ (8008094 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d003      	beq.n	8007ffc <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007ffa:	d106      	bne.n	800800a <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d00d      	beq.n	800801e <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8008002:	4620      	mov	r0, r4
 8008004:	f7f9 fc3e 	bl	8001884 <HAL_UART_RxCpltCallback>
 8008008:	e785      	b.n	8007f16 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800800a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	e852 3f00 	ldrex	r3, [r2]
 8008010:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008014:	e842 3100 	strex	r1, r3, [r2]
 8008018:	2900      	cmp	r1, #0
 800801a:	d1f6      	bne.n	800800a <UART_RxISR_16BIT_FIFOEN+0x136>
 800801c:	e7ee      	b.n	8007ffc <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801e:	2300      	movs	r3, #0
 8008020:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008022:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	e852 3f00 	ldrex	r3, [r2]
 8008028:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	e842 3100 	strex	r1, r3, [r2]
 8008030:	2900      	cmp	r1, #0
 8008032:	d1f6      	bne.n	8008022 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	69da      	ldr	r2, [r3, #28]
 8008038:	f012 0f10 	tst.w	r2, #16
 800803c:	d001      	beq.n	8008042 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800803e:	2210      	movs	r2, #16
 8008040:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008042:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008046:	4620      	mov	r0, r4
 8008048:	f7ff fbe0 	bl	800780c <HAL_UARTEx_RxEventCallback>
 800804c:	e763      	b.n	8007f16 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800804e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008052:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008054:	2b00      	cmp	r3, #0
 8008056:	f43f af4f 	beq.w	8007ef8 <UART_RxISR_16BIT_FIFOEN+0x24>
 800805a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800805e:	429a      	cmp	r2, r3
 8008060:	f67f af4a 	bls.w	8007ef8 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008064:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	f102 0308 	add.w	r3, r2, #8
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	3208      	adds	r2, #8
 8008074:	e842 3100 	strex	r1, r3, [r2]
 8008078:	2900      	cmp	r1, #0
 800807a:	d1f3      	bne.n	8008064 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 800807c:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 800807e:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008080:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	e852 3f00 	ldrex	r3, [r2]
 8008086:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	e842 3100 	strex	r1, r3, [r2]
 800808e:	2900      	cmp	r1, #0
 8008090:	d1f6      	bne.n	8008080 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8008092:	e731      	b.n	8007ef8 <UART_RxISR_16BIT_FIFOEN+0x24>
 8008094:	40008000 	.word	0x40008000
 8008098:	08007c31 	.word	0x08007c31

0800809c <HAL_UART_GetState>:
  temp1 = huart->gState;
 800809c:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
  temp2 = huart->RxState;
 80080a0:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 80080a4:	4310      	orrs	r0, r2
 80080a6:	4770      	bx	lr

080080a8 <UART_SetConfig>:
{
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080ac:	6883      	ldr	r3, [r0, #8]
 80080ae:	6902      	ldr	r2, [r0, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	6942      	ldr	r2, [r0, #20]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	69c2      	ldr	r2, [r0, #28]
 80080b8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080ba:	6801      	ldr	r1, [r0, #0]
 80080bc:	6808      	ldr	r0, [r1, #0]
 80080be:	4a9d      	ldr	r2, [pc, #628]	@ (8008334 <UART_SetConfig+0x28c>)
 80080c0:	4002      	ands	r2, r0
 80080c2:	431a      	orrs	r2, r3
 80080c4:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080c6:	6822      	ldr	r2, [r4, #0]
 80080c8:	6853      	ldr	r3, [r2, #4]
 80080ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80080ce:	68e1      	ldr	r1, [r4, #12]
 80080d0:	430b      	orrs	r3, r1
 80080d2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080d4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080d6:	6822      	ldr	r2, [r4, #0]
 80080d8:	4b97      	ldr	r3, [pc, #604]	@ (8008338 <UART_SetConfig+0x290>)
 80080da:	429a      	cmp	r2, r3
 80080dc:	d001      	beq.n	80080e2 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80080de:	6a23      	ldr	r3, [r4, #32]
 80080e0:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080e2:	6893      	ldr	r3, [r2, #8]
 80080e4:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80080e8:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80080ec:	430b      	orrs	r3, r1
 80080ee:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080f0:	6822      	ldr	r2, [r4, #0]
 80080f2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80080f4:	f023 030f 	bic.w	r3, r3, #15
 80080f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080fa:	430b      	orrs	r3, r1
 80080fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	4a8e      	ldr	r2, [pc, #568]	@ (800833c <UART_SetConfig+0x294>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d01c      	beq.n	8008140 <UART_SetConfig+0x98>
 8008106:	4a8e      	ldr	r2, [pc, #568]	@ (8008340 <UART_SetConfig+0x298>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d031      	beq.n	8008170 <UART_SetConfig+0xc8>
 800810c:	4a8a      	ldr	r2, [pc, #552]	@ (8008338 <UART_SetConfig+0x290>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d04b      	beq.n	80081aa <UART_SetConfig+0x102>
 8008112:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8008114:	4988      	ldr	r1, [pc, #544]	@ (8008338 <UART_SetConfig+0x290>)
 8008116:	428b      	cmp	r3, r1
 8008118:	d068      	beq.n	80081ec <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800811a:	69e0      	ldr	r0, [r4, #28]
 800811c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008120:	f000 80a5 	beq.w	800826e <UART_SetConfig+0x1c6>
    switch (clocksource)
 8008124:	2a08      	cmp	r2, #8
 8008126:	f200 811f 	bhi.w	8008368 <UART_SetConfig+0x2c0>
 800812a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800812e:	00d3      	.short	0x00d3
 8008130:	00d100f5 	.word	0x00d100f5
 8008134:	00f8011d 	.word	0x00f8011d
 8008138:	011d011d 	.word	0x011d011d
 800813c:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008140:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008144:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8008148:	f002 0203 	and.w	r2, r2, #3
 800814c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008150:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8008154:	2a03      	cmp	r2, #3
 8008156:	d809      	bhi.n	800816c <UART_SetConfig+0xc4>
 8008158:	e8df f002 	tbb	[pc, r2]
 800815c:	063c0402 	.word	0x063c0402
 8008160:	2201      	movs	r2, #1
 8008162:	e7d7      	b.n	8008114 <UART_SetConfig+0x6c>
 8008164:	2204      	movs	r2, #4
 8008166:	e7d5      	b.n	8008114 <UART_SetConfig+0x6c>
 8008168:	2208      	movs	r2, #8
 800816a:	e7d3      	b.n	8008114 <UART_SetConfig+0x6c>
 800816c:	2210      	movs	r2, #16
 800816e:	e7d1      	b.n	8008114 <UART_SetConfig+0x6c>
 8008170:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008174:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8008178:	f002 020c 	and.w	r2, r2, #12
 800817c:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 8008180:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 8008184:	2a0c      	cmp	r2, #12
 8008186:	d80e      	bhi.n	80081a6 <UART_SetConfig+0xfe>
 8008188:	e8df f002 	tbb	[pc, r2]
 800818c:	0d0d0d07 	.word	0x0d0d0d07
 8008190:	0d0d0d09 	.word	0x0d0d0d09
 8008194:	0d0d0d26 	.word	0x0d0d0d26
 8008198:	0b          	.byte	0x0b
 8008199:	00          	.byte	0x00
 800819a:	2200      	movs	r2, #0
 800819c:	e7ba      	b.n	8008114 <UART_SetConfig+0x6c>
 800819e:	2204      	movs	r2, #4
 80081a0:	e7b8      	b.n	8008114 <UART_SetConfig+0x6c>
 80081a2:	2208      	movs	r2, #8
 80081a4:	e7b6      	b.n	8008114 <UART_SetConfig+0x6c>
 80081a6:	2210      	movs	r2, #16
 80081a8:	e7b4      	b.n	8008114 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80081aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081ae:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80081b2:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 80081b6:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80081ba:	d00f      	beq.n	80081dc <UART_SetConfig+0x134>
 80081bc:	d805      	bhi.n	80081ca <UART_SetConfig+0x122>
 80081be:	b17a      	cbz	r2, 80081e0 <UART_SetConfig+0x138>
 80081c0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80081c4:	d10e      	bne.n	80081e4 <UART_SetConfig+0x13c>
 80081c6:	2204      	movs	r2, #4
 80081c8:	e7a4      	b.n	8008114 <UART_SetConfig+0x6c>
 80081ca:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 80081ce:	d10b      	bne.n	80081e8 <UART_SetConfig+0x140>
 80081d0:	2208      	movs	r2, #8
 80081d2:	e79f      	b.n	8008114 <UART_SetConfig+0x6c>
 80081d4:	2202      	movs	r2, #2
 80081d6:	e79d      	b.n	8008114 <UART_SetConfig+0x6c>
 80081d8:	2202      	movs	r2, #2
 80081da:	e79b      	b.n	8008114 <UART_SetConfig+0x6c>
 80081dc:	2202      	movs	r2, #2
 80081de:	e799      	b.n	8008114 <UART_SetConfig+0x6c>
 80081e0:	2200      	movs	r2, #0
 80081e2:	e797      	b.n	8008114 <UART_SetConfig+0x6c>
 80081e4:	2210      	movs	r2, #16
 80081e6:	e795      	b.n	8008114 <UART_SetConfig+0x6c>
 80081e8:	2210      	movs	r2, #16
 80081ea:	e793      	b.n	8008114 <UART_SetConfig+0x6c>
    switch (clocksource)
 80081ec:	2a08      	cmp	r2, #8
 80081ee:	f200 809c 	bhi.w	800832a <UART_SetConfig+0x282>
 80081f2:	e8df f002 	tbb	[pc, r2]
 80081f6:	9a08      	.short	0x9a08
 80081f8:	9a379a3a 	.word	0x9a379a3a
 80081fc:	9a9a      	.short	0x9a9a
 80081fe:	05          	.byte	0x05
 80081ff:	00          	.byte	0x00
 8008200:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008204:	e004      	b.n	8008210 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008206:	f7fe f889 	bl	800631c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800820a:	2800      	cmp	r0, #0
 800820c:	f000 808f 	beq.w	800832e <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008210:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008212:	4b4c      	ldr	r3, [pc, #304]	@ (8008344 <UART_SetConfig+0x29c>)
 8008214:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008218:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800821c:	6865      	ldr	r5, [r4, #4]
 800821e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008222:	4299      	cmp	r1, r3
 8008224:	f200 8094 	bhi.w	8008350 <UART_SetConfig+0x2a8>
 8008228:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800822c:	f200 8092 	bhi.w	8008354 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008230:	2600      	movs	r6, #0
 8008232:	4633      	mov	r3, r6
 8008234:	4631      	mov	r1, r6
 8008236:	f7f8 feed 	bl	8001014 <__aeabi_uldivmod>
 800823a:	0209      	lsls	r1, r1, #8
 800823c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008240:	0200      	lsls	r0, r0, #8
 8008242:	086b      	lsrs	r3, r5, #1
 8008244:	18c0      	adds	r0, r0, r3
 8008246:	462a      	mov	r2, r5
 8008248:	4633      	mov	r3, r6
 800824a:	f141 0100 	adc.w	r1, r1, #0
 800824e:	f7f8 fee1 	bl	8001014 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008252:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8008256:	4b3c      	ldr	r3, [pc, #240]	@ (8008348 <UART_SetConfig+0x2a0>)
 8008258:	429a      	cmp	r2, r3
 800825a:	d87d      	bhi.n	8008358 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	60d8      	str	r0, [r3, #12]
 8008260:	4630      	mov	r0, r6
 8008262:	e050      	b.n	8008306 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8008264:	f7fd fb5c 	bl	8005920 <HAL_RCC_GetSysClockFreq>
        break;
 8008268:	e7cf      	b.n	800820a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800826a:	4838      	ldr	r0, [pc, #224]	@ (800834c <UART_SetConfig+0x2a4>)
 800826c:	e7d0      	b.n	8008210 <UART_SetConfig+0x168>
    switch (clocksource)
 800826e:	2a08      	cmp	r2, #8
 8008270:	d874      	bhi.n	800835c <UART_SetConfig+0x2b4>
 8008272:	e8df f002 	tbb	[pc, r2]
 8008276:	2707      	.short	0x2707
 8008278:	732a7305 	.word	0x732a7305
 800827c:	7373      	.short	0x7373
 800827e:	0b          	.byte	0x0b
 800827f:	00          	.byte	0x00
 8008280:	4832      	ldr	r0, [pc, #200]	@ (800834c <UART_SetConfig+0x2a4>)
 8008282:	e003      	b.n	800828c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008284:	f7fe f84a 	bl	800631c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008288:	2800      	cmp	r0, #0
 800828a:	d069      	beq.n	8008360 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800828c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800828e:	4b2d      	ldr	r3, [pc, #180]	@ (8008344 <UART_SetConfig+0x29c>)
 8008290:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008294:	fbb0 f0f3 	udiv	r0, r0, r3
 8008298:	6862      	ldr	r2, [r4, #4]
 800829a:	0853      	lsrs	r3, r2, #1
 800829c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80082a0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a4:	f1a3 0110 	sub.w	r1, r3, #16
 80082a8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80082ac:	4291      	cmp	r1, r2
 80082ae:	d859      	bhi.n	8008364 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082b6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80082ba:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80082bc:	6822      	ldr	r2, [r4, #0]
 80082be:	60d3      	str	r3, [r2, #12]
 80082c0:	2000      	movs	r0, #0
 80082c2:	e020      	b.n	8008306 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80082c4:	f7fe f83a 	bl	800633c <HAL_RCC_GetPCLK2Freq>
        break;
 80082c8:	e7de      	b.n	8008288 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80082ca:	f7fd fb29 	bl	8005920 <HAL_RCC_GetSysClockFreq>
        break;
 80082ce:	e7db      	b.n	8008288 <UART_SetConfig+0x1e0>
    switch (clocksource)
 80082d0:	481e      	ldr	r0, [pc, #120]	@ (800834c <UART_SetConfig+0x2a4>)
 80082d2:	e003      	b.n	80082dc <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d4:	f7fe f822 	bl	800631c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80082d8:	2800      	cmp	r0, #0
 80082da:	d047      	beq.n	800836c <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80082de:	4b19      	ldr	r3, [pc, #100]	@ (8008344 <UART_SetConfig+0x29c>)
 80082e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80082e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80082e8:	6863      	ldr	r3, [r4, #4]
 80082ea:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80082ee:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082f2:	f1a0 0210 	sub.w	r2, r0, #16
 80082f6:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d838      	bhi.n	8008370 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	b280      	uxth	r0, r0
 8008302:	60d8      	str	r0, [r3, #12]
 8008304:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800830c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8008314:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8008316:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8008318:	f7fe f810 	bl	800633c <HAL_RCC_GetPCLK2Freq>
        break;
 800831c:	e7dc      	b.n	80082d8 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800831e:	f7fd faff 	bl	8005920 <HAL_RCC_GetSysClockFreq>
        break;
 8008322:	e7d9      	b.n	80082d8 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8008324:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008328:	e7d8      	b.n	80082dc <UART_SetConfig+0x234>
    switch (clocksource)
 800832a:	2001      	movs	r0, #1
 800832c:	e7eb      	b.n	8008306 <UART_SetConfig+0x25e>
 800832e:	2000      	movs	r0, #0
 8008330:	e7e9      	b.n	8008306 <UART_SetConfig+0x25e>
 8008332:	bf00      	nop
 8008334:	cfff69f3 	.word	0xcfff69f3
 8008338:	40008000 	.word	0x40008000
 800833c:	40013800 	.word	0x40013800
 8008340:	40004400 	.word	0x40004400
 8008344:	08010b54 	.word	0x08010b54
 8008348:	000ffcff 	.word	0x000ffcff
 800834c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8008350:	2001      	movs	r0, #1
 8008352:	e7d8      	b.n	8008306 <UART_SetConfig+0x25e>
 8008354:	2001      	movs	r0, #1
 8008356:	e7d6      	b.n	8008306 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8008358:	2001      	movs	r0, #1
 800835a:	e7d4      	b.n	8008306 <UART_SetConfig+0x25e>
    switch (clocksource)
 800835c:	2001      	movs	r0, #1
 800835e:	e7d2      	b.n	8008306 <UART_SetConfig+0x25e>
 8008360:	2000      	movs	r0, #0
 8008362:	e7d0      	b.n	8008306 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8008364:	2001      	movs	r0, #1
 8008366:	e7ce      	b.n	8008306 <UART_SetConfig+0x25e>
    switch (clocksource)
 8008368:	2001      	movs	r0, #1
 800836a:	e7cc      	b.n	8008306 <UART_SetConfig+0x25e>
 800836c:	2000      	movs	r0, #0
 800836e:	e7ca      	b.n	8008306 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8008370:	2001      	movs	r0, #1
 8008372:	e7c8      	b.n	8008306 <UART_SetConfig+0x25e>

08008374 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008374:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008376:	f013 0f08 	tst.w	r3, #8
 800837a:	d006      	beq.n	800838a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800837c:	6802      	ldr	r2, [r0, #0]
 800837e:	6853      	ldr	r3, [r2, #4]
 8008380:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008384:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8008386:	430b      	orrs	r3, r1
 8008388:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800838a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800838c:	f013 0f01 	tst.w	r3, #1
 8008390:	d006      	beq.n	80083a0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008392:	6802      	ldr	r2, [r0, #0]
 8008394:	6853      	ldr	r3, [r2, #4]
 8008396:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800839a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800839c:	430b      	orrs	r3, r1
 800839e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80083a2:	f013 0f02 	tst.w	r3, #2
 80083a6:	d006      	beq.n	80083b6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083a8:	6802      	ldr	r2, [r0, #0]
 80083aa:	6853      	ldr	r3, [r2, #4]
 80083ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083b0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80083b2:	430b      	orrs	r3, r1
 80083b4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083b6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80083b8:	f013 0f04 	tst.w	r3, #4
 80083bc:	d006      	beq.n	80083cc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083be:	6802      	ldr	r2, [r0, #0]
 80083c0:	6853      	ldr	r3, [r2, #4]
 80083c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083c6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80083c8:	430b      	orrs	r3, r1
 80083ca:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083cc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80083ce:	f013 0f10 	tst.w	r3, #16
 80083d2:	d006      	beq.n	80083e2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083d4:	6802      	ldr	r2, [r0, #0]
 80083d6:	6893      	ldr	r3, [r2, #8]
 80083d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083dc:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80083de:	430b      	orrs	r3, r1
 80083e0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80083e4:	f013 0f20 	tst.w	r3, #32
 80083e8:	d006      	beq.n	80083f8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083ea:	6802      	ldr	r2, [r0, #0]
 80083ec:	6893      	ldr	r3, [r2, #8]
 80083ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083f2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80083f4:	430b      	orrs	r3, r1
 80083f6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80083fa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80083fe:	d00a      	beq.n	8008416 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008400:	6802      	ldr	r2, [r0, #0]
 8008402:	6853      	ldr	r3, [r2, #4]
 8008404:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008408:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800840a:	430b      	orrs	r3, r1
 800840c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800840e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008414:	d00b      	beq.n	800842e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008416:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008418:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800841c:	d006      	beq.n	800842c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800841e:	6802      	ldr	r2, [r0, #0]
 8008420:	6853      	ldr	r3, [r2, #4]
 8008422:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008426:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008428:	430b      	orrs	r3, r1
 800842a:	6053      	str	r3, [r2, #4]
}
 800842c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800842e:	6802      	ldr	r2, [r0, #0]
 8008430:	6853      	ldr	r3, [r2, #4]
 8008432:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008436:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8008438:	430b      	orrs	r3, r1
 800843a:	6053      	str	r3, [r2, #4]
 800843c:	e7eb      	b.n	8008416 <UART_AdvFeatureConfig+0xa2>

0800843e <UART_WaitOnFlagUntilTimeout>:
{
 800843e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008442:	4605      	mov	r5, r0
 8008444:	460e      	mov	r6, r1
 8008446:	4617      	mov	r7, r2
 8008448:	4699      	mov	r9, r3
 800844a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	69dc      	ldr	r4, [r3, #28]
 8008452:	ea36 0404 	bics.w	r4, r6, r4
 8008456:	bf0c      	ite	eq
 8008458:	2401      	moveq	r4, #1
 800845a:	2400      	movne	r4, #0
 800845c:	42bc      	cmp	r4, r7
 800845e:	d15b      	bne.n	8008518 <UART_WaitOnFlagUntilTimeout+0xda>
    if (Timeout != HAL_MAX_DELAY)
 8008460:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8008464:	d0f3      	beq.n	800844e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008466:	f7fa fe4d 	bl	8003104 <HAL_GetTick>
 800846a:	eba0 0009 	sub.w	r0, r0, r9
 800846e:	4540      	cmp	r0, r8
 8008470:	d833      	bhi.n	80084da <UART_WaitOnFlagUntilTimeout+0x9c>
 8008472:	f1b8 0f00 	cmp.w	r8, #0
 8008476:	d030      	beq.n	80084da <UART_WaitOnFlagUntilTimeout+0x9c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	f012 0f04 	tst.w	r2, #4
 8008480:	d0e5      	beq.n	800844e <UART_WaitOnFlagUntilTimeout+0x10>
 8008482:	2e80      	cmp	r6, #128	@ 0x80
 8008484:	d0e3      	beq.n	800844e <UART_WaitOnFlagUntilTimeout+0x10>
 8008486:	2e40      	cmp	r6, #64	@ 0x40
 8008488:	d0e1      	beq.n	800844e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8008490:	d0dd      	beq.n	800844e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008492:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008496:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008498:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	e852 3f00 	ldrex	r3, [r2]
 800849e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	e842 3100 	strex	r1, r3, [r2]
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d1f6      	bne.n	8008498 <UART_WaitOnFlagUntilTimeout+0x5a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084aa:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	f102 0308 	add.w	r3, r2, #8
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	3208      	adds	r2, #8
 80084ba:	e842 3100 	strex	r1, r3, [r2]
 80084be:	2900      	cmp	r1, #0
 80084c0:	d1f3      	bne.n	80084aa <UART_WaitOnFlagUntilTimeout+0x6c>
          huart->gState = HAL_UART_STATE_READY;
 80084c2:	2320      	movs	r3, #32
 80084c4:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80084c8:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084cc:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 80084d0:	2300      	movs	r3, #0
 80084d2:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 80084d6:	2003      	movs	r0, #3
 80084d8:	e01f      	b.n	800851a <UART_WaitOnFlagUntilTimeout+0xdc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80084da:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	e852 3f00 	ldrex	r3, [r2]
 80084e0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	e842 3100 	strex	r1, r3, [r2]
 80084e8:	2900      	cmp	r1, #0
 80084ea:	d1f6      	bne.n	80084da <UART_WaitOnFlagUntilTimeout+0x9c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ec:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	f102 0308 	add.w	r3, r2, #8
 80084f2:	e853 3f00 	ldrex	r3, [r3]
 80084f6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	3208      	adds	r2, #8
 80084fc:	e842 3100 	strex	r1, r3, [r2]
 8008500:	2900      	cmp	r1, #0
 8008502:	d1f3      	bne.n	80084ec <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8008504:	2320      	movs	r3, #32
 8008506:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800850a:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800850e:	2300      	movs	r3, #0
 8008510:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8008514:	2003      	movs	r0, #3
 8008516:	e000      	b.n	800851a <UART_WaitOnFlagUntilTimeout+0xdc>
  return HAL_OK;
 8008518:	2000      	movs	r0, #0
}
 800851a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800851e <HAL_UART_Transmit>:
{
 800851e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008526:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800852a:	2b20      	cmp	r3, #32
 800852c:	d14f      	bne.n	80085ce <HAL_UART_Transmit+0xb0>
 800852e:	4604      	mov	r4, r0
 8008530:	460d      	mov	r5, r1
 8008532:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008534:	2900      	cmp	r1, #0
 8008536:	d04e      	beq.n	80085d6 <HAL_UART_Transmit+0xb8>
 8008538:	b90a      	cbnz	r2, 800853e <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800853a:	2001      	movs	r0, #1
 800853c:	e048      	b.n	80085d0 <HAL_UART_Transmit+0xb2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853e:	2300      	movs	r3, #0
 8008540:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008544:	2321      	movs	r3, #33	@ 0x21
 8008546:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800854a:	f7fa fddb 	bl	8003104 <HAL_GetTick>
 800854e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8008550:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008554:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800855e:	d002      	beq.n	8008566 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8008560:	f04f 0800 	mov.w	r8, #0
 8008564:	e011      	b.n	800858a <HAL_UART_Transmit+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	b313      	cbz	r3, 80085b0 <HAL_UART_Transmit+0x92>
      pdata16bits = NULL;
 800856a:	f04f 0800 	mov.w	r8, #0
 800856e:	e00c      	b.n	800858a <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008570:	f838 3b02 	ldrh.w	r3, [r8], #2
 8008574:	6822      	ldr	r2, [r4, #0]
 8008576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857a:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800857c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8008580:	b292      	uxth	r2, r2
 8008582:	3a01      	subs	r2, #1
 8008584:	b292      	uxth	r2, r2
 8008586:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800858a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800858e:	b29b      	uxth	r3, r3
 8008590:	b18b      	cbz	r3, 80085b6 <HAL_UART_Transmit+0x98>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008592:	9600      	str	r6, [sp, #0]
 8008594:	463b      	mov	r3, r7
 8008596:	2200      	movs	r2, #0
 8008598:	2180      	movs	r1, #128	@ 0x80
 800859a:	4620      	mov	r0, r4
 800859c:	f7ff ff4f 	bl	800843e <UART_WaitOnFlagUntilTimeout>
 80085a0:	b9d8      	cbnz	r0, 80085da <HAL_UART_Transmit+0xbc>
      if (pdata8bits == NULL)
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	d0e4      	beq.n	8008570 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085a6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80085ae:	e7e5      	b.n	800857c <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 80085b0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80085b2:	2500      	movs	r5, #0
 80085b4:	e7e9      	b.n	800858a <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085b6:	9600      	str	r6, [sp, #0]
 80085b8:	463b      	mov	r3, r7
 80085ba:	2200      	movs	r2, #0
 80085bc:	2140      	movs	r1, #64	@ 0x40
 80085be:	4620      	mov	r0, r4
 80085c0:	f7ff ff3d 	bl	800843e <UART_WaitOnFlagUntilTimeout>
 80085c4:	b958      	cbnz	r0, 80085de <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 80085c6:	2320      	movs	r3, #32
 80085c8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80085cc:	e000      	b.n	80085d0 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 80085ce:	2002      	movs	r0, #2
}
 80085d0:	b002      	add	sp, #8
 80085d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80085d6:	2001      	movs	r0, #1
 80085d8:	e7fa      	b.n	80085d0 <HAL_UART_Transmit+0xb2>
        return HAL_TIMEOUT;
 80085da:	2003      	movs	r0, #3
 80085dc:	e7f8      	b.n	80085d0 <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
 80085de:	2003      	movs	r0, #3
 80085e0:	e7f6      	b.n	80085d0 <HAL_UART_Transmit+0xb2>

080085e2 <HAL_UART_Receive>:
{
 80085e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085e6:	b083      	sub	sp, #12
 80085e8:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80085ea:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	d177      	bne.n	80086e2 <HAL_UART_Receive+0x100>
 80085f2:	4604      	mov	r4, r0
 80085f4:	460d      	mov	r5, r1
 80085f6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d076      	beq.n	80086ea <HAL_UART_Receive+0x108>
 80085fc:	b90a      	cbnz	r2, 8008602 <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 80085fe:	2001      	movs	r0, #1
 8008600:	e070      	b.n	80086e4 <HAL_UART_Receive+0x102>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008602:	2300      	movs	r3, #0
 8008604:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008608:	2222      	movs	r2, #34	@ 0x22
 800860a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860e:	66c3      	str	r3, [r0, #108]	@ 0x6c
    tickstart = HAL_GetTick();
 8008610:	f7fa fd78 	bl	8003104 <HAL_GetTick>
 8008614:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8008616:	f8a4 805c 	strh.w	r8, [r4, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800861a:	f8a4 805e 	strh.w	r8, [r4, #94]	@ 0x5e
    UART_MASK_COMPUTATION(huart);
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008624:	d006      	beq.n	8008634 <HAL_UART_Receive+0x52>
 8008626:	b9a3      	cbnz	r3, 8008652 <HAL_UART_Receive+0x70>
 8008628:	6922      	ldr	r2, [r4, #16]
 800862a:	b972      	cbnz	r2, 800864a <HAL_UART_Receive+0x68>
 800862c:	22ff      	movs	r2, #255	@ 0xff
 800862e:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8008632:	e014      	b.n	800865e <HAL_UART_Receive+0x7c>
 8008634:	6922      	ldr	r2, [r4, #16]
 8008636:	b922      	cbnz	r2, 8008642 <HAL_UART_Receive+0x60>
 8008638:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800863c:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8008640:	e00d      	b.n	800865e <HAL_UART_Receive+0x7c>
 8008642:	22ff      	movs	r2, #255	@ 0xff
 8008644:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8008648:	e009      	b.n	800865e <HAL_UART_Receive+0x7c>
 800864a:	227f      	movs	r2, #127	@ 0x7f
 800864c:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8008650:	e005      	b.n	800865e <HAL_UART_Receive+0x7c>
 8008652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008656:	d00a      	beq.n	800866e <HAL_UART_Receive+0x8c>
 8008658:	2200      	movs	r2, #0
 800865a:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
    uhMask = huart->Mask;
 800865e:	f8b4 8060 	ldrh.w	r8, [r4, #96]	@ 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008666:	d00c      	beq.n	8008682 <HAL_UART_Receive+0xa0>
      pdata16bits = NULL;
 8008668:	f04f 0900 	mov.w	r9, #0
 800866c:	e01e      	b.n	80086ac <HAL_UART_Receive+0xca>
    UART_MASK_COMPUTATION(huart);
 800866e:	6922      	ldr	r2, [r4, #16]
 8008670:	b91a      	cbnz	r2, 800867a <HAL_UART_Receive+0x98>
 8008672:	227f      	movs	r2, #127	@ 0x7f
 8008674:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8008678:	e7f1      	b.n	800865e <HAL_UART_Receive+0x7c>
 800867a:	223f      	movs	r2, #63	@ 0x3f
 800867c:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8008680:	e7ed      	b.n	800865e <HAL_UART_Receive+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	b113      	cbz	r3, 800868c <HAL_UART_Receive+0xaa>
      pdata16bits = NULL;
 8008686:	f04f 0900 	mov.w	r9, #0
 800868a:	e00f      	b.n	80086ac <HAL_UART_Receive+0xca>
      pdata16bits = (uint16_t *) pData;
 800868c:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800868e:	2500      	movs	r5, #0
 8008690:	e00c      	b.n	80086ac <HAL_UART_Receive+0xca>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008696:	ea08 0303 	and.w	r3, r8, r3
 800869a:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 800869e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 80086a2:	b292      	uxth	r2, r2
 80086a4:	3a01      	subs	r2, #1
 80086a6:	b292      	uxth	r2, r2
 80086a8:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80086ac:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	b18b      	cbz	r3, 80086d8 <HAL_UART_Receive+0xf6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80086b4:	9600      	str	r6, [sp, #0]
 80086b6:	463b      	mov	r3, r7
 80086b8:	2200      	movs	r2, #0
 80086ba:	2120      	movs	r1, #32
 80086bc:	4620      	mov	r0, r4
 80086be:	f7ff febe 	bl	800843e <UART_WaitOnFlagUntilTimeout>
 80086c2:	b9a0      	cbnz	r0, 80086ee <HAL_UART_Receive+0x10c>
      if (pdata8bits == NULL)
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	d0e4      	beq.n	8008692 <HAL_UART_Receive+0xb0>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086cc:	fa5f f388 	uxtb.w	r3, r8
 80086d0:	4013      	ands	r3, r2
 80086d2:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 80086d6:	e7e2      	b.n	800869e <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 80086d8:	2320      	movs	r3, #32
 80086da:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return HAL_OK;
 80086de:	2000      	movs	r0, #0
 80086e0:	e000      	b.n	80086e4 <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 80086e2:	2002      	movs	r0, #2
}
 80086e4:	b003      	add	sp, #12
 80086e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80086ea:	2001      	movs	r0, #1
 80086ec:	e7fa      	b.n	80086e4 <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 80086ee:	2003      	movs	r0, #3
 80086f0:	e7f8      	b.n	80086e4 <HAL_UART_Receive+0x102>

080086f2 <UART_CheckIdleState>:
{
 80086f2:	b530      	push	{r4, r5, lr}
 80086f4:	b083      	sub	sp, #12
 80086f6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f8:	2300      	movs	r3, #0
 80086fa:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80086fe:	f7fa fd01 	bl	8003104 <HAL_GetTick>
 8008702:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008704:	6822      	ldr	r2, [r4, #0]
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	f012 0f08 	tst.w	r2, #8
 800870c:	d110      	bne.n	8008730 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f013 0f04 	tst.w	r3, #4
 8008716:	d119      	bne.n	800874c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8008718:	2320      	movs	r3, #32
 800871a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800871e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008722:	2000      	movs	r0, #0
 8008724:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008726:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8008728:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800872c:	b003      	add	sp, #12
 800872e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4603      	mov	r3, r0
 8008738:	2200      	movs	r2, #0
 800873a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800873e:	4620      	mov	r0, r4
 8008740:	f7ff fe7d 	bl	800843e <UART_WaitOnFlagUntilTimeout>
 8008744:	2800      	cmp	r0, #0
 8008746:	d0e2      	beq.n	800870e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008748:	2003      	movs	r0, #3
 800874a:	e7ef      	b.n	800872c <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800874c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	462b      	mov	r3, r5
 8008754:	2200      	movs	r2, #0
 8008756:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800875a:	4620      	mov	r0, r4
 800875c:	f7ff fe6f 	bl	800843e <UART_WaitOnFlagUntilTimeout>
 8008760:	2800      	cmp	r0, #0
 8008762:	d0d9      	beq.n	8008718 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008764:	2003      	movs	r0, #3
 8008766:	e7e1      	b.n	800872c <UART_CheckIdleState+0x3a>

08008768 <HAL_UART_Init>:
  if (huart == NULL)
 8008768:	b378      	cbz	r0, 80087ca <HAL_UART_Init+0x62>
{
 800876a:	b510      	push	{r4, lr}
 800876c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800876e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8008772:	b30b      	cbz	r3, 80087b8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008774:	2324      	movs	r3, #36	@ 0x24
 8008776:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	6813      	ldr	r3, [r2, #0]
 800877e:	f023 0301 	bic.w	r3, r3, #1
 8008782:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008784:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008786:	b9e3      	cbnz	r3, 80087c2 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008788:	4620      	mov	r0, r4
 800878a:	f7ff fc8d 	bl	80080a8 <UART_SetConfig>
 800878e:	2801      	cmp	r0, #1
 8008790:	d011      	beq.n	80087b6 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	6853      	ldr	r3, [r2, #4]
 8008796:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800879a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	6893      	ldr	r3, [r2, #8]
 80087a0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80087a4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80087a6:	6822      	ldr	r2, [r4, #0]
 80087a8:	6813      	ldr	r3, [r2, #0]
 80087aa:	f043 0301 	orr.w	r3, r3, #1
 80087ae:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80087b0:	4620      	mov	r0, r4
 80087b2:	f7ff ff9e 	bl	80086f2 <UART_CheckIdleState>
}
 80087b6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80087b8:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80087bc:	f7fa ff38 	bl	8003630 <HAL_UART_MspInit>
 80087c0:	e7d8      	b.n	8008774 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7ff fdd6 	bl	8008374 <UART_AdvFeatureConfig>
 80087c8:	e7de      	b.n	8008788 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 80087ca:	2001      	movs	r0, #1
}
 80087cc:	4770      	bx	lr
	...

080087d0 <UART_Start_Receive_IT>:
{
 80087d0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80087d2:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80087d4:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80087d8:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80087dc:	2300      	movs	r3, #0
 80087de:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 80087e0:	6883      	ldr	r3, [r0, #8]
 80087e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087e6:	d006      	beq.n	80087f6 <UART_Start_Receive_IT+0x26>
 80087e8:	b9a3      	cbnz	r3, 8008814 <UART_Start_Receive_IT+0x44>
 80087ea:	6903      	ldr	r3, [r0, #16]
 80087ec:	b973      	cbnz	r3, 800880c <UART_Start_Receive_IT+0x3c>
 80087ee:	23ff      	movs	r3, #255	@ 0xff
 80087f0:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80087f4:	e014      	b.n	8008820 <UART_Start_Receive_IT+0x50>
 80087f6:	6903      	ldr	r3, [r0, #16]
 80087f8:	b923      	cbnz	r3, 8008804 <UART_Start_Receive_IT+0x34>
 80087fa:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80087fe:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008802:	e00d      	b.n	8008820 <UART_Start_Receive_IT+0x50>
 8008804:	23ff      	movs	r3, #255	@ 0xff
 8008806:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800880a:	e009      	b.n	8008820 <UART_Start_Receive_IT+0x50>
 800880c:	237f      	movs	r3, #127	@ 0x7f
 800880e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008812:	e005      	b.n	8008820 <UART_Start_Receive_IT+0x50>
 8008814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008818:	d02d      	beq.n	8008876 <UART_Start_Receive_IT+0xa6>
 800881a:	2300      	movs	r3, #0
 800881c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008820:	2300      	movs	r3, #0
 8008822:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008826:	2322      	movs	r3, #34	@ 0x22
 8008828:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	f101 0308 	add.w	r3, r1, #8
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	3108      	adds	r1, #8
 800883c:	e841 3400 	strex	r4, r3, [r1]
 8008840:	2c00      	cmp	r4, #0
 8008842:	d1f3      	bne.n	800882c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008844:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8008846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800884a:	d01e      	beq.n	800888a <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800884c:	6883      	ldr	r3, [r0, #8]
 800884e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008852:	d042      	beq.n	80088da <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8008854:	4b29      	ldr	r3, [pc, #164]	@ (80088fc <UART_Start_Receive_IT+0x12c>)
 8008856:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008858:	6903      	ldr	r3, [r0, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d043      	beq.n	80088e6 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800885e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	e852 3f00 	ldrex	r3, [r2]
 8008864:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008868:	e842 3100 	strex	r1, r3, [r2]
 800886c:	2900      	cmp	r1, #0
 800886e:	d1f6      	bne.n	800885e <UART_Start_Receive_IT+0x8e>
}
 8008870:	2000      	movs	r0, #0
 8008872:	bc10      	pop	{r4}
 8008874:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008876:	6903      	ldr	r3, [r0, #16]
 8008878:	b91b      	cbnz	r3, 8008882 <UART_Start_Receive_IT+0xb2>
 800887a:	237f      	movs	r3, #127	@ 0x7f
 800887c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008880:	e7ce      	b.n	8008820 <UART_Start_Receive_IT+0x50>
 8008882:	233f      	movs	r3, #63	@ 0x3f
 8008884:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008888:	e7ca      	b.n	8008820 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800888a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 800888e:	4293      	cmp	r3, r2
 8008890:	d8dc      	bhi.n	800884c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008892:	6883      	ldr	r3, [r0, #8]
 8008894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008898:	d019      	beq.n	80088ce <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800889a:	4b19      	ldr	r3, [pc, #100]	@ (8008900 <UART_Start_Receive_IT+0x130>)
 800889c:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800889e:	6903      	ldr	r3, [r0, #16]
 80088a0:	b143      	cbz	r3, 80088b4 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	e852 3f00 	ldrex	r3, [r2]
 80088a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	e842 3100 	strex	r1, r3, [r2]
 80088b0:	2900      	cmp	r1, #0
 80088b2:	d1f6      	bne.n	80088a2 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	f102 0308 	add.w	r3, r2, #8
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	3208      	adds	r2, #8
 80088c4:	e842 3100 	strex	r1, r3, [r2]
 80088c8:	2900      	cmp	r1, #0
 80088ca:	d1f3      	bne.n	80088b4 <UART_Start_Receive_IT+0xe4>
 80088cc:	e7d0      	b.n	8008870 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ce:	6903      	ldr	r3, [r0, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e2      	bne.n	800889a <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80088d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008904 <UART_Start_Receive_IT+0x134>)
 80088d6:	6743      	str	r3, [r0, #116]	@ 0x74
 80088d8:	e7e1      	b.n	800889e <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088da:	6903      	ldr	r3, [r0, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1b9      	bne.n	8008854 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80088e0:	4b09      	ldr	r3, [pc, #36]	@ (8008908 <UART_Start_Receive_IT+0x138>)
 80088e2:	6743      	str	r3, [r0, #116]	@ 0x74
 80088e4:	e7b8      	b.n	8008858 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088e6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	e852 3f00 	ldrex	r3, [r2]
 80088ec:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	e842 3100 	strex	r1, r3, [r2]
 80088f4:	2900      	cmp	r1, #0
 80088f6:	d1f6      	bne.n	80088e6 <UART_Start_Receive_IT+0x116>
 80088f8:	e7ba      	b.n	8008870 <UART_Start_Receive_IT+0xa0>
 80088fa:	bf00      	nop
 80088fc:	08007b55 	.word	0x08007b55
 8008900:	08007d09 	.word	0x08007d09
 8008904:	08007ed5 	.word	0x08007ed5
 8008908:	08007c31 	.word	0x08007c31

0800890c <HAL_UART_Receive_IT>:
{
 800890c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800890e:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8008912:	2b20      	cmp	r3, #32
 8008914:	d117      	bne.n	8008946 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8008916:	b1c1      	cbz	r1, 800894a <HAL_UART_Receive_IT+0x3e>
 8008918:	b1ca      	cbz	r2, 800894e <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891a:	2300      	movs	r3, #0
 800891c:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800891e:	6803      	ldr	r3, [r0, #0]
 8008920:	4c0c      	ldr	r4, [pc, #48]	@ (8008954 <HAL_UART_Receive_IT+0x48>)
 8008922:	42a3      	cmp	r3, r4
 8008924:	d00c      	beq.n	8008940 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800892c:	d008      	beq.n	8008940 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800892e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	e854 3f00 	ldrex	r3, [r4]
 8008934:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	e844 3500 	strex	r5, r3, [r4]
 800893c:	2d00      	cmp	r5, #0
 800893e:	d1f6      	bne.n	800892e <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008940:	f7ff ff46 	bl	80087d0 <UART_Start_Receive_IT>
 8008944:	e000      	b.n	8008948 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8008946:	2002      	movs	r0, #2
}
 8008948:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800894a:	2001      	movs	r0, #1
 800894c:	e7fc      	b.n	8008948 <HAL_UART_Receive_IT+0x3c>
 800894e:	2001      	movs	r0, #1
 8008950:	e7fa      	b.n	8008948 <HAL_UART_Receive_IT+0x3c>
 8008952:	bf00      	nop
 8008954:	40008000 	.word	0x40008000

08008958 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008958:	b082      	sub	sp, #8
 800895a:	ab02      	add	r3, sp, #8
 800895c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008960:	6802      	ldr	r2, [r0, #0]
 8008962:	6853      	ldr	r3, [r2, #4]
 8008964:	f023 0310 	bic.w	r3, r3, #16
 8008968:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800896c:	430b      	orrs	r3, r1
 800896e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008970:	6802      	ldr	r2, [r0, #0]
 8008972:	6853      	ldr	r3, [r2, #4]
 8008974:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008978:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800897c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008980:	6053      	str	r3, [r2, #4]
}
 8008982:	b002      	add	sp, #8
 8008984:	4770      	bx	lr
	...

08008988 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008988:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800898a:	b92b      	cbnz	r3, 8008998 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800898c:	2301      	movs	r3, #1
 800898e:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008992:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8008996:	4770      	bx	lr
{
 8008998:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800899a:	6803      	ldr	r3, [r0, #0]
 800899c:	689a      	ldr	r2, [r3, #8]
 800899e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089a2:	6899      	ldr	r1, [r3, #8]
 80089a4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089a6:	4d09      	ldr	r5, [pc, #36]	@ (80089cc <UARTEx_SetNbDataToProcess+0x44>)
 80089a8:	5c6b      	ldrb	r3, [r5, r1]
 80089aa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089ac:	4c08      	ldr	r4, [pc, #32]	@ (80089d0 <UARTEx_SetNbDataToProcess+0x48>)
 80089ae:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089b0:	fb93 f3f1 	sdiv	r3, r3, r1
 80089b4:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089b8:	5cab      	ldrb	r3, [r5, r2]
 80089ba:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089bc:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089be:	fb93 f3f2 	sdiv	r3, r3, r2
 80089c2:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 80089c6:	bc30      	pop	{r4, r5}
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	08010b74 	.word	0x08010b74
 80089d0:	08010b6c 	.word	0x08010b6c

080089d4 <HAL_UARTEx_WakeupCallback>:
}
 80089d4:	4770      	bx	lr

080089d6 <HAL_UARTEx_RxFifoFullCallback>:
}
 80089d6:	4770      	bx	lr

080089d8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80089d8:	4770      	bx	lr

080089da <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80089da:	b510      	push	{r4, lr}
 80089dc:	b084      	sub	sp, #16
 80089de:	ab04      	add	r3, sp, #16
 80089e0:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80089e4:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d035      	beq.n	8008a58 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80089ec:	4604      	mov	r4, r0
 80089ee:	2301      	movs	r3, #1
 80089f0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80089f4:	2324      	movs	r3, #36	@ 0x24
 80089f6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80089fa:	6802      	ldr	r2, [r0, #0]
 80089fc:	6813      	ldr	r3, [r2, #0]
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008a04:	6801      	ldr	r1, [r0, #0]
 8008a06:	688b      	ldr	r3, [r1, #8]
 8008a08:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008a0c:	9a02      	ldr	r2, [sp, #8]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008a12:	b1aa      	cbz	r2, 8008a40 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8008a14:	6822      	ldr	r2, [r4, #0]
 8008a16:	6813      	ldr	r3, [r2, #0]
 8008a18:	f043 0301 	orr.w	r3, r3, #1
 8008a1c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8008a1e:	f7fa fb71 	bl	8003104 <HAL_GetTick>
 8008a22:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a24:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8008a28:	9200      	str	r2, [sp, #0]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a30:	4620      	mov	r0, r4
 8008a32:	f7ff fd04 	bl	800843e <UART_WaitOnFlagUntilTimeout>
 8008a36:	b948      	cbnz	r0, 8008a4c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8008a38:	2320      	movs	r3, #32
 8008a3a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8008a3e:	e006      	b.n	8008a4e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008a40:	ab04      	add	r3, sp, #16
 8008a42:	e913 0006 	ldmdb	r3, {r1, r2}
 8008a46:	f7ff ff87 	bl	8008958 <UARTEx_Wakeup_AddressConfig>
 8008a4a:	e7e3      	b.n	8008a14 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008a4c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8008a54:	b004      	add	sp, #16
 8008a56:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008a58:	2002      	movs	r0, #2
 8008a5a:	e7fb      	b.n	8008a54 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08008a5c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008a5c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d010      	beq.n	8008a86 <HAL_UARTEx_EnableStopMode+0x2a>
 8008a64:	2301      	movs	r3, #1
 8008a66:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008a6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	e852 3f00 	ldrex	r3, [r2]
 8008a70:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	e842 3100 	strex	r1, r3, [r2]
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d1f6      	bne.n	8008a6a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8008a82:	4618      	mov	r0, r3
 8008a84:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008a86:	2002      	movs	r0, #2
}
 8008a88:	4770      	bx	lr

08008a8a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8008a8a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d01d      	beq.n	8008ace <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008a92:	b510      	push	{r4, lr}
 8008a94:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008a96:	2301      	movs	r3, #1
 8008a98:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008a9c:	2324      	movs	r3, #36	@ 0x24
 8008a9e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aa2:	6802      	ldr	r2, [r0, #0]
 8008aa4:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008aa6:	6811      	ldr	r1, [r2, #0]
 8008aa8:	f021 0101 	bic.w	r1, r1, #1
 8008aac:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008aae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008ab2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8008ab6:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab8:	6802      	ldr	r2, [r0, #0]
 8008aba:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008abc:	f7ff ff64 	bl	8008988 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008ac0:	2320      	movs	r3, #32
 8008ac2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008acc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008ace:	2002      	movs	r0, #2
}
 8008ad0:	4770      	bx	lr

08008ad2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8008ad2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d018      	beq.n	8008b0c <HAL_UARTEx_DisableFifoMode+0x3a>
 8008ada:	2301      	movs	r3, #1
 8008adc:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008ae0:	2324      	movs	r3, #36	@ 0x24
 8008ae2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ae6:	6803      	ldr	r3, [r0, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008aea:	6819      	ldr	r1, [r3, #0]
 8008aec:	f021 0101 	bic.w	r1, r1, #1
 8008af0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008af2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008af6:	2300      	movs	r3, #0
 8008af8:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008afa:	6801      	ldr	r1, [r0, #0]
 8008afc:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008afe:	2220      	movs	r2, #32
 8008b00:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008b04:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8008b08:	4618      	mov	r0, r3
 8008b0a:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008b0c:	2002      	movs	r0, #2
}
 8008b0e:	4770      	bx	lr

08008b10 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008b10:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008b12:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d01d      	beq.n	8008b56 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008b22:	2324      	movs	r3, #36	@ 0x24
 8008b24:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b28:	6803      	ldr	r3, [r0, #0]
 8008b2a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	f022 0201 	bic.w	r2, r2, #1
 8008b32:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b34:	6802      	ldr	r2, [r0, #0]
 8008b36:	6893      	ldr	r3, [r2, #8]
 8008b38:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8008b3c:	4319      	orrs	r1, r3
 8008b3e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008b40:	f7ff ff22 	bl	8008988 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008b48:	2320      	movs	r3, #32
 8008b4a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008b4e:	2000      	movs	r0, #0
 8008b50:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008b56:	2002      	movs	r0, #2
 8008b58:	e7fc      	b.n	8008b54 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008b5a <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008b5a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008b5c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d01d      	beq.n	8008ba0 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008b64:	4604      	mov	r4, r0
 8008b66:	2301      	movs	r3, #1
 8008b68:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008b6c:	2324      	movs	r3, #36	@ 0x24
 8008b6e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b72:	6803      	ldr	r3, [r0, #0]
 8008b74:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	f022 0201 	bic.w	r2, r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b7e:	6802      	ldr	r2, [r0, #0]
 8008b80:	6893      	ldr	r3, [r2, #8]
 8008b82:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8008b86:	4319      	orrs	r1, r3
 8008b88:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008b8a:	f7ff fefd 	bl	8008988 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008b92:	2320      	movs	r3, #32
 8008b94:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008b98:	2000      	movs	r0, #0
 8008b9a:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008ba0:	2002      	movs	r0, #2
 8008ba2:	e7fc      	b.n	8008b9e <HAL_UARTEx_SetRxFifoThreshold+0x44>

08008ba4 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8008ba4:	2001      	movs	r0, #1
 8008ba6:	4770      	bx	lr

08008ba8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8008ba8:	280a      	cmp	r0, #10
 8008baa:	d807      	bhi.n	8008bbc <RadioGetLoRaBandwidthInHz+0x14>
 8008bac:	e8df f000 	tbb	[pc, r0]
 8008bb0:	17110b20 	.word	0x17110b20
 8008bb4:	061e1c1a 	.word	0x061e1c1a
 8008bb8:	0e08      	.short	0x0e08
 8008bba:	14          	.byte	0x14
 8008bbb:	00          	.byte	0x00
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008bc0:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 8008bc4:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008bc6:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 8008bca:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008bcc:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 8008bd0:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008bd2:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 8008bd6:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008bd8:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 8008bdc:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008bde:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 8008be2:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008be4:	4804      	ldr	r0, [pc, #16]	@ (8008bf8 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8008be6:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8008be8:	4804      	ldr	r0, [pc, #16]	@ (8008bfc <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8008bea:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008bec:	4804      	ldr	r0, [pc, #16]	@ (8008c00 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8008bee:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8008bf0:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	0001e848 	.word	0x0001e848
 8008bfc:	0003d090 	.word	0x0003d090
 8008c00:	0007a120 	.word	0x0007a120

08008c04 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008c04:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8008c08:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008c0a:	b953      	cbnz	r3, 8008c22 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8008c0c:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8008c0e:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008c10:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008c12:	b141      	cbz	r1, 8008c26 <RadioGetGfskTimeOnAirNumerator+0x22>
 8008c14:	2302      	movs	r3, #2
 8008c16:	f89d 0000 	ldrb.w	r0, [sp]
 8008c1a:	4418      	add	r0, r3
}
 8008c1c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8008c20:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008c22:	2300      	movs	r3, #0
 8008c24:	e7f3      	b.n	8008c0e <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008c26:	2300      	movs	r3, #0
 8008c28:	e7f5      	b.n	8008c16 <RadioGetGfskTimeOnAirNumerator+0x12>

08008c2a <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008c2a:	b570      	push	{r4, r5, r6, lr}
 8008c2c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8008c30:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8008c34:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008c36:	f1a1 0c05 	sub.w	ip, r1, #5
 8008c3a:	f1bc 0f01 	cmp.w	ip, #1
 8008c3e:	d931      	bls.n	8008ca4 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008c40:	b918      	cbnz	r0, 8008c4a <RadioGetLoRaTimeOnAirNumerator+0x20>
 8008c42:	f1a1 060b 	sub.w	r6, r1, #11
 8008c46:	2e01      	cmp	r6, #1
 8008c48:	d934      	bls.n	8008cb4 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8008c4a:	2801      	cmp	r0, #1
 8008c4c:	d02e      	beq.n	8008cac <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8008c4e:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008c50:	f89d c014 	ldrb.w	ip, [sp, #20]
 8008c54:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8008c58:	b385      	cbz	r5, 8008cbc <RadioGetLoRaTimeOnAirNumerator+0x92>
 8008c5a:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008c5c:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8008c5e:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8008c60:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8008c64:	b364      	cbz	r4, 8008cc0 <RadioGetLoRaTimeOnAirNumerator+0x96>
 8008c66:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8008c6a:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8008c6c:	2906      	cmp	r1, #6
 8008c6e:	d904      	bls.n	8008c7a <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8008c70:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8008c74:	b10e      	cbz	r6, 8008c7a <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008c76:	1e88      	subs	r0, r1, #2
 8008c78:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8008c7a:	f1bc 0f00 	cmp.w	ip, #0
 8008c7e:	db22      	blt.n	8008cc6 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008c80:	4484      	add	ip, r0
 8008c82:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008c86:	fb9c fcf0 	sdiv	ip, ip, r0
 8008c8a:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8008c8e:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8008c92:	2906      	cmp	r1, #6
 8008c94:	d801      	bhi.n	8008c9a <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8008c96:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008c9a:	0080      	lsls	r0, r0, #2
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	3902      	subs	r1, #2
}
 8008ca0:	4088      	lsls	r0, r1
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8008ca4:	2b0b      	cmp	r3, #11
 8008ca6:	d8cb      	bhi.n	8008c40 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8008ca8:	230c      	movs	r3, #12
 8008caa:	e7c9      	b.n	8008c40 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008cac:	290c      	cmp	r1, #12
 8008cae:	d003      	beq.n	8008cb8 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8008cb0:	2600      	movs	r6, #0
 8008cb2:	e7cd      	b.n	8008c50 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8008cb4:	2601      	movs	r6, #1
 8008cb6:	e7cb      	b.n	8008c50 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8008cb8:	2601      	movs	r6, #1
 8008cba:	e7c9      	b.n	8008c50 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e7cd      	b.n	8008c5c <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8008cc0:	f04f 0e14 	mov.w	lr, #20
 8008cc4:	e7d1      	b.n	8008c6a <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8008cc6:	f04f 0c00 	mov.w	ip, #0
 8008cca:	e7d9      	b.n	8008c80 <RadioGetLoRaTimeOnAirNumerator+0x56>

08008ccc <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	460e      	mov	r6, r1
 8008cd2:	4615      	mov	r5, r2
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8008cda:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8008cde:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 8008ce2:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8008ce6:	b120      	cbz	r0, 8008cf2 <RadioTimeOnAir+0x26>
 8008ce8:	2801      	cmp	r0, #1
 8008cea:	d011      	beq.n	8008d10 <RadioTimeOnAir+0x44>
 8008cec:	2501      	movs	r5, #1
 8008cee:	2400      	movs	r4, #0
 8008cf0:	e008      	b.n	8008d04 <RadioTimeOnAir+0x38>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008cf2:	9701      	str	r7, [sp, #4]
 8008cf4:	9400      	str	r4, [sp, #0]
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f7ff ff84 	bl	8008c04 <RadioGetGfskTimeOnAirNumerator>
 8008cfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008d00:	fb03 f400 	mul.w	r4, r3, r0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008d04:	1960      	adds	r0, r4, r5
 8008d06:	3801      	subs	r0, #1
}
 8008d08:	fbb0 f0f5 	udiv	r0, r0, r5
 8008d0c:	b005      	add	sp, #20
 8008d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008d10:	9702      	str	r7, [sp, #8]
 8008d12:	9401      	str	r4, [sp, #4]
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	4613      	mov	r3, r2
 8008d18:	460a      	mov	r2, r1
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f7ff ff84 	bl	8008c2a <RadioGetLoRaTimeOnAirNumerator>
 8008d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008d26:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008d2a:	4b03      	ldr	r3, [pc, #12]	@ (8008d38 <RadioTimeOnAir+0x6c>)
 8008d2c:	5d98      	ldrb	r0, [r3, r6]
 8008d2e:	f7ff ff3b 	bl	8008ba8 <RadioGetLoRaBandwidthInHz>
 8008d32:	4605      	mov	r5, r0
        break;
 8008d34:	e7e6      	b.n	8008d04 <RadioTimeOnAir+0x38>
 8008d36:	bf00      	nop
 8008d38:	08010b7c 	.word	0x08010b7c

08008d3c <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8008d3c:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008d3e:	4b05      	ldr	r3, [pc, #20]	@ (8008d54 <RadioOnTxTimeoutProcess+0x18>)
 8008d40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008d44:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008d46:	4b04      	ldr	r3, [pc, #16]	@ (8008d58 <RadioOnTxTimeoutProcess+0x1c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	b113      	cbz	r3, 8008d52 <RadioOnTxTimeoutProcess+0x16>
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	b103      	cbz	r3, 8008d52 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8008d50:	4798      	blx	r3
    }
}
 8008d52:	bd08      	pop	{r3, pc}
 8008d54:	48000400 	.word	0x48000400
 8008d58:	200058c8 	.word	0x200058c8

08008d5c <RadioOnTxTimeoutIrq>:
{
 8008d5c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8008d5e:	f7ff ffed 	bl	8008d3c <RadioOnTxTimeoutProcess>
}
 8008d62:	bd08      	pop	{r3, pc}

08008d64 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008d64:	b508      	push	{r3, lr}
 8008d66:	4b05      	ldr	r3, [pc, #20]	@ (8008d7c <RadioOnRxTimeoutProcess+0x18>)
 8008d68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008d6c:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008d6e:	4b04      	ldr	r3, [pc, #16]	@ (8008d80 <RadioOnRxTimeoutProcess+0x1c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	b113      	cbz	r3, 8008d7a <RadioOnRxTimeoutProcess+0x16>
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	b103      	cbz	r3, 8008d7a <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8008d78:	4798      	blx	r3
    }
}
 8008d7a:	bd08      	pop	{r3, pc}
 8008d7c:	48000400 	.word	0x48000400
 8008d80:	200058c8 	.word	0x200058c8

08008d84 <RadioOnRxTimeoutIrq>:
{
 8008d84:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8008d86:	f7ff ffed 	bl	8008d64 <RadioOnRxTimeoutProcess>
}
 8008d8a:	bd08      	pop	{r3, pc}

08008d8c <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008d8c:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e005      	b.n	8008d9e <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008d92:	5ccc      	ldrb	r4, [r1, r3]
 8008d94:	43e4      	mvns	r4, r4
 8008d96:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008d98:	2400      	movs	r4, #0
 8008d9a:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	dcf7      	bgt.n	8008d92 <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008da2:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 8008da4:	461c      	mov	r4, r3
 8008da6:	e012      	b.n	8008dce <payload_integration+0x42>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 8008da8:	f103 0c07 	add.w	ip, r3, #7
 8008dac:	e023      	b.n	8008df6 <payload_integration+0x6a>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8008dae:	b2ed      	uxtb	r5, r5
 8008db0:	5d4d      	ldrb	r5, [r1, r5]
 8008db2:	fa45 f50e 	asr.w	r5, r5, lr
 8008db6:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 8008dba:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8008dbc:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 8008dc0:	5d46      	ldrb	r6, [r0, r5]
 8008dc2:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008dc6:	ea46 0c0c 	orr.w	ip, r6, ip
 8008dca:	f800 c005 	strb.w	ip, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 8008dce:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008dd2:	da26      	bge.n	8008e22 <payload_integration+0x96>
        index_bit = 7 - ( i % 8 );
 8008dd4:	425d      	negs	r5, r3
 8008dd6:	f003 0c07 	and.w	ip, r3, #7
 8008dda:	f005 0507 	and.w	r5, r5, #7
 8008dde:	bf58      	it	pl
 8008de0:	f1c5 0c00 	rsbpl	ip, r5, #0
 8008de4:	fa5f fe8c 	uxtb.w	lr, ip
 8008de8:	f1ce 0e07 	rsb	lr, lr, #7
 8008dec:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 8008df0:	469c      	mov	ip, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	dbd8      	blt.n	8008da8 <payload_integration+0x1c>
 8008df6:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	425e      	negs	r6, r3
 8008dfe:	f003 0c07 	and.w	ip, r3, #7
 8008e02:	f006 0607 	and.w	r6, r6, #7
 8008e06:	bf58      	it	pl
 8008e08:	f1c6 0c00 	rsbpl	ip, r6, #0
 8008e0c:	fa5f fc8c 	uxtb.w	ip, ip
 8008e10:	f1cc 0c07 	rsb	ip, ip, #7
 8008e14:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 8008e18:	461e      	mov	r6, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dac7      	bge.n	8008dae <payload_integration+0x22>
 8008e1e:	1dde      	adds	r6, r3, #7
 8008e20:	e7c5      	b.n	8008dae <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008e22:	b261      	sxtb	r1, r4
 8008e24:	018b      	lsls	r3, r1, #6
 8008e26:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8008e2a:	b25b      	sxtb	r3, r3
 8008e2c:	b91c      	cbnz	r4, 8008e36 <payload_integration+0xaa>
 8008e2e:	2120      	movs	r1, #32
 8008e30:	430b      	orrs	r3, r1
 8008e32:	5483      	strb	r3, [r0, r2]
}
 8008e34:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008e36:	2100      	movs	r1, #0
 8008e38:	e7fa      	b.n	8008e30 <payload_integration+0xa4>

08008e3a <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	4770      	bx	lr

08008e3e <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8008e3e:	2001      	movs	r0, #1
 8008e40:	4770      	bx	lr
	...

08008e44 <RadioSetMaxPayloadLength>:
{
 8008e44:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8008e46:	2801      	cmp	r0, #1
 8008e48:	d004      	beq.n	8008e54 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e74 <RadioSetMaxPayloadLength+0x30>)
 8008e4c:	7d5b      	ldrb	r3, [r3, #21]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d008      	beq.n	8008e64 <RadioSetMaxPayloadLength+0x20>
}
 8008e52:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008e54:	4b08      	ldr	r3, [pc, #32]	@ (8008e78 <RadioSetMaxPayloadLength+0x34>)
 8008e56:	7019      	strb	r1, [r3, #0]
 8008e58:	4806      	ldr	r0, [pc, #24]	@ (8008e74 <RadioSetMaxPayloadLength+0x30>)
 8008e5a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008e5c:	300e      	adds	r0, #14
 8008e5e:	f001 fe3f 	bl	800aae0 <SUBGRF_SetPacketParams>
 8008e62:	e7f6      	b.n	8008e52 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008e64:	4b04      	ldr	r3, [pc, #16]	@ (8008e78 <RadioSetMaxPayloadLength+0x34>)
 8008e66:	7019      	strb	r1, [r3, #0]
 8008e68:	4802      	ldr	r0, [pc, #8]	@ (8008e74 <RadioSetMaxPayloadLength+0x30>)
 8008e6a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008e6c:	300e      	adds	r0, #14
 8008e6e:	f001 fe37 	bl	800aae0 <SUBGRF_SetPacketParams>
}
 8008e72:	e7ee      	b.n	8008e52 <RadioSetMaxPayloadLength+0xe>
 8008e74:	2000586c 	.word	0x2000586c
 8008e78:	200000ec 	.word	0x200000ec

08008e7c <RadioRead>:
{
 8008e7c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8008e7e:	f001 f9cf 	bl	800a220 <SUBGRF_ReadRegister>
}
 8008e82:	bd08      	pop	{r3, pc}

08008e84 <RadioWrite>:
{
 8008e84:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8008e86:	f001 f9b7 	bl	800a1f8 <SUBGRF_WriteRegister>
}
 8008e8a:	bd08      	pop	{r3, pc}

08008e8c <RadioTxCw>:
{
 8008e8c:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008e8e:	f001 ff4f 	bl	800ad30 <SUBGRF_SetRfTxPower>
 8008e92:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008e94:	210e      	movs	r1, #14
 8008e96:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008e9a:	f001 f9ad 	bl	800a1f8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f001 ff31 	bl	800ad08 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008ea6:	f001 fb7f 	bl	800a5a8 <SUBGRF_SetTxContinuousWave>
}
 8008eaa:	bd10      	pop	{r4, pc}

08008eac <RadioTxPrbs>:
{
 8008eac:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008eae:	2101      	movs	r1, #1
 8008eb0:	4b07      	ldr	r3, [pc, #28]	@ (8008ed0 <RadioTxPrbs+0x24>)
 8008eb2:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 8008eb6:	f001 ff27 	bl	800ad08 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8008eba:	212d      	movs	r1, #45	@ 0x2d
 8008ebc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8008ec0:	f7ff ffe0 	bl	8008e84 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8008ec4:	f001 fb77 	bl	800a5b6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008ec8:	4802      	ldr	r0, [pc, #8]	@ (8008ed4 <RadioTxPrbs+0x28>)
 8008eca:	f001 faad 	bl	800a428 <SUBGRF_SetTx>
}
 8008ece:	bd08      	pop	{r3, pc}
 8008ed0:	2000586c 	.word	0x2000586c
 8008ed4:	000fffff 	.word	0x000fffff

08008ed8 <RadioSetRxDutyCycle>:
{
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	4604      	mov	r4, r0
 8008edc:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008ede:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8008ee2:	4e09      	ldr	r6, [pc, #36]	@ (8008f08 <RadioSetRxDutyCycle+0x30>)
 8008ee4:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	461a      	mov	r2, r3
 8008eea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008eee:	4608      	mov	r0, r1
 8008ef0:	f001 fc2d 	bl	800a74e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8008efa:	f001 ff05 	bl	800ad08 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008efe:	4629      	mov	r1, r5
 8008f00:	4620      	mov	r0, r4
 8008f02:	f001 fb21 	bl	800a548 <SUBGRF_SetRxDutyCycle>
}
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	2000586c 	.word	0x2000586c

08008f0c <RadioRxBoosted>:
{
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8008f10:	f001 ffec 	bl	800aeec <RFW_Is_Init>
 8008f14:	2801      	cmp	r0, #1
 8008f16:	d019      	beq.n	8008f4c <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008f18:	2300      	movs	r3, #0
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f240 2162 	movw	r1, #610	@ 0x262
 8008f20:	4608      	mov	r0, r1
 8008f22:	f001 fc14 	bl	800a74e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8008f26:	b9a4      	cbnz	r4, 8008f52 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008f28:	4c11      	ldr	r4, [pc, #68]	@ (8008f70 <RadioRxBoosted+0x64>)
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008f2e:	4b11      	ldr	r3, [pc, #68]	@ (8008f74 <RadioRxBoosted+0x68>)
 8008f30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008f34:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008f36:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8008f3a:	f001 fee5 	bl	800ad08 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8008f3e:	7863      	ldrb	r3, [r4, #1]
 8008f40:	b183      	cbz	r3, 8008f64 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008f42:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008f46:	f001 fae1 	bl	800a50c <SUBGRF_SetRxBoosted>
}
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8008f4c:	f001 ffd6 	bl	800aefc <RFW_ReceiveInit>
 8008f50:	e7e9      	b.n	8008f26 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008f52:	4d09      	ldr	r5, [pc, #36]	@ (8008f78 <RadioRxBoosted+0x6c>)
 8008f54:	4621      	mov	r1, r4
 8008f56:	4628      	mov	r0, r5
 8008f58:	f002 fbfe 	bl	800b758 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f002 fbb5 	bl	800b6cc <UTIL_TIMER_Start>
 8008f62:	e7e1      	b.n	8008f28 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008f64:	4b02      	ldr	r3, [pc, #8]	@ (8008f70 <RadioRxBoosted+0x64>)
 8008f66:	6898      	ldr	r0, [r3, #8]
 8008f68:	0180      	lsls	r0, r0, #6
 8008f6a:	f001 facf 	bl	800a50c <SUBGRF_SetRxBoosted>
}
 8008f6e:	e7ec      	b.n	8008f4a <RadioRxBoosted+0x3e>
 8008f70:	2000586c 	.word	0x2000586c
 8008f74:	48000400 	.word	0x48000400
 8008f78:	2000583c 	.word	0x2000583c

08008f7c <RadioStandby>:
{
 8008f7c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8008f7e:	2000      	movs	r0, #0
 8008f80:	f001 fa38 	bl	800a3f4 <SUBGRF_SetStandby>
}
 8008f84:	bd08      	pop	{r3, pc}

08008f86 <RadioGetStatus>:
{
 8008f86:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8008f88:	f001 f92a 	bl	800a1e0 <SUBGRF_GetOperatingMode>
 8008f8c:	2805      	cmp	r0, #5
 8008f8e:	d005      	beq.n	8008f9c <RadioGetStatus+0x16>
 8008f90:	2807      	cmp	r0, #7
 8008f92:	d005      	beq.n	8008fa0 <RadioGetStatus+0x1a>
 8008f94:	2804      	cmp	r0, #4
 8008f96:	d105      	bne.n	8008fa4 <RadioGetStatus+0x1e>
 8008f98:	2002      	movs	r0, #2
 8008f9a:	e002      	b.n	8008fa2 <RadioGetStatus+0x1c>
            return RF_RX_RUNNING;
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	e000      	b.n	8008fa2 <RadioGetStatus+0x1c>
            return RF_CAD;
 8008fa0:	2003      	movs	r0, #3
}
 8008fa2:	bd08      	pop	{r3, pc}
            return RF_IDLE;
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	e7fc      	b.n	8008fa2 <RadioGetStatus+0x1c>

08008fa8 <RadioIrqProcess>:
{
 8008fa8:	b530      	push	{r4, r5, lr}
 8008faa:	b083      	sub	sp, #12
    uint8_t size = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8008fb2:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8008fb4:	4ba5      	ldr	r3, [pc, #660]	@ (800924c <RadioIrqProcess+0x2a4>)
 8008fb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d829      	bhi.n	8009012 <RadioIrqProcess+0x6a>
 8008fbe:	b21a      	sxth	r2, r3
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	f000 8140 	beq.w	8009246 <RadioIrqProcess+0x29e>
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	2b1f      	cmp	r3, #31
 8008fca:	f200 813c 	bhi.w	8009246 <RadioIrqProcess+0x29e>
 8008fce:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fd2:	0063      	.short	0x0063
 8008fd4:	013a007f 	.word	0x013a007f
 8008fd8:	013a00f7 	.word	0x013a00f7
 8008fdc:	013a013a 	.word	0x013a013a
 8008fe0:	013a0127 	.word	0x013a0127
 8008fe4:	013a013a 	.word	0x013a013a
 8008fe8:	013a013a 	.word	0x013a013a
 8008fec:	013a013a 	.word	0x013a013a
 8008ff0:	013a0134 	.word	0x013a0134
 8008ff4:	013a013a 	.word	0x013a013a
 8008ff8:	013a013a 	.word	0x013a013a
 8008ffc:	013a013a 	.word	0x013a013a
 8009000:	013a013a 	.word	0x013a013a
 8009004:	013a013a 	.word	0x013a013a
 8009008:	013a013a 	.word	0x013a013a
 800900c:	013a013a 	.word	0x013a013a
 8009010:	0155      	.short	0x0155
 8009012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009016:	f000 80b3 	beq.w	8009180 <RadioIrqProcess+0x1d8>
 800901a:	d814      	bhi.n	8009046 <RadioIrqProcess+0x9e>
 800901c:	2b40      	cmp	r3, #64	@ 0x40
 800901e:	f000 8146 	beq.w	80092ae <RadioIrqProcess+0x306>
 8009022:	2b80      	cmp	r3, #128	@ 0x80
 8009024:	f040 810f 	bne.w	8009246 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8009028:	2000      	movs	r0, #0
 800902a:	f001 f9e3 	bl	800a3f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800902e:	4b88      	ldr	r3, [pc, #544]	@ (8009250 <RadioIrqProcess+0x2a8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 8107 	beq.w	8009246 <RadioIrqProcess+0x29e>
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 8103 	beq.w	8009246 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8009040:	2000      	movs	r0, #0
 8009042:	4798      	blx	r3
 8009044:	e0ff      	b.n	8009246 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8009046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800904a:	f040 80fc 	bne.w	8009246 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800904e:	4b81      	ldr	r3, [pc, #516]	@ (8009254 <RadioIrqProcess+0x2ac>)
 8009050:	2201      	movs	r2, #1
 8009052:	2100      	movs	r1, #0
 8009054:	2002      	movs	r0, #2
 8009056:	f002 f82f 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800905a:	f001 f8c1 	bl	800a1e0 <SUBGRF_GetOperatingMode>
 800905e:	2804      	cmp	r0, #4
 8009060:	f000 809b 	beq.w	800919a <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8009064:	f001 f8bc 	bl	800a1e0 <SUBGRF_GetOperatingMode>
 8009068:	2805      	cmp	r0, #5
 800906a:	f040 80ec 	bne.w	8009246 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800906e:	4b7a      	ldr	r3, [pc, #488]	@ (8009258 <RadioIrqProcess+0x2b0>)
 8009070:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009074:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 8009076:	4879      	ldr	r0, [pc, #484]	@ (800925c <RadioIrqProcess+0x2b4>)
 8009078:	f002 face 	bl	800b618 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800907c:	2000      	movs	r0, #0
 800907e:	f001 f9b9 	bl	800a3f4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009082:	4b73      	ldr	r3, [pc, #460]	@ (8009250 <RadioIrqProcess+0x2a8>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 80dd 	beq.w	8009246 <RadioIrqProcess+0x29e>
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80d9 	beq.w	8009246 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8009094:	4798      	blx	r3
 8009096:	e0d6      	b.n	8009246 <RadioIrqProcess+0x29e>
 8009098:	4b6f      	ldr	r3, [pc, #444]	@ (8009258 <RadioIrqProcess+0x2b0>)
 800909a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800909e:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 80090a0:	486f      	ldr	r0, [pc, #444]	@ (8009260 <RadioIrqProcess+0x2b8>)
 80090a2:	f002 fab9 	bl	800b618 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80090a6:	2000      	movs	r0, #0
 80090a8:	f001 f9a4 	bl	800a3f4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80090ac:	f001 ff20 	bl	800aef0 <RFW_Is_LongPacketModeEnabled>
 80090b0:	2801      	cmp	r0, #1
 80090b2:	d00a      	beq.n	80090ca <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80090b4:	4b66      	ldr	r3, [pc, #408]	@ (8009250 <RadioIrqProcess+0x2a8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 80c4 	beq.w	8009246 <RadioIrqProcess+0x29e>
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80c0 	beq.w	8009246 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80090c6:	4798      	blx	r3
 80090c8:	e0bd      	b.n	8009246 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80090ca:	f001 ff1a 	bl	800af02 <RFW_DeInit_TxLongPacket>
 80090ce:	e7f1      	b.n	80090b4 <RadioIrqProcess+0x10c>
 80090d0:	4b61      	ldr	r3, [pc, #388]	@ (8009258 <RadioIrqProcess+0x2b0>)
 80090d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80090d6:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 80090d8:	4860      	ldr	r0, [pc, #384]	@ (800925c <RadioIrqProcess+0x2b4>)
 80090da:	f002 fa9d 	bl	800b618 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80090de:	4b5b      	ldr	r3, [pc, #364]	@ (800924c <RadioIrqProcess+0x2a4>)
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	b303      	cbz	r3, 8009126 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80090e4:	22ff      	movs	r2, #255	@ 0xff
 80090e6:	f10d 0107 	add.w	r1, sp, #7
 80090ea:	485e      	ldr	r0, [pc, #376]	@ (8009264 <RadioIrqProcess+0x2bc>)
 80090ec:	f001 fdb6 	bl	800ac5c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80090f0:	485d      	ldr	r0, [pc, #372]	@ (8009268 <RadioIrqProcess+0x2c0>)
 80090f2:	f001 fdcd 	bl	800ac90 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80090f6:	4b56      	ldr	r3, [pc, #344]	@ (8009250 <RadioIrqProcess+0x2a8>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 80a3 	beq.w	8009246 <RadioIrqProcess+0x29e>
 8009100:	689c      	ldr	r4, [r3, #8]
 8009102:	2c00      	cmp	r4, #0
 8009104:	f000 809f 	beq.w	8009246 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8009108:	4b50      	ldr	r3, [pc, #320]	@ (800924c <RadioIrqProcess+0x2a4>)
 800910a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800910e:	2b01      	cmp	r3, #1
 8009110:	d11d      	bne.n	800914e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8009112:	4a4e      	ldr	r2, [pc, #312]	@ (800924c <RadioIrqProcess+0x2a4>)
 8009114:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 8009118:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 800911c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009120:	4850      	ldr	r0, [pc, #320]	@ (8009264 <RadioIrqProcess+0x2bc>)
 8009122:	47a0      	blx	r4
                break;
 8009124:	e08f      	b.n	8009246 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8009126:	2000      	movs	r0, #0
 8009128:	f001 f964 	bl	800a3f4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800912c:	2100      	movs	r1, #0
 800912e:	f640 1002 	movw	r0, #2306	@ 0x902
 8009132:	f001 f861 	bl	800a1f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8009136:	f640 1044 	movw	r0, #2372	@ 0x944
 800913a:	f001 f871 	bl	800a220 <SUBGRF_ReadRegister>
 800913e:	f040 0102 	orr.w	r1, r0, #2
 8009142:	b2c9      	uxtb	r1, r1
 8009144:	f640 1044 	movw	r0, #2372	@ 0x944
 8009148:	f001 f856 	bl	800a1f8 <SUBGRF_WriteRegister>
 800914c:	e7ca      	b.n	80090e4 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800914e:	4c3f      	ldr	r4, [pc, #252]	@ (800924c <RadioIrqProcess+0x2a4>)
 8009150:	4669      	mov	r1, sp
 8009152:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009154:	f001 fe7c 	bl	800ae50 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8009158:	4b3d      	ldr	r3, [pc, #244]	@ (8009250 <RadioIrqProcess+0x2a8>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689d      	ldr	r5, [r3, #8]
 800915e:	9b00      	ldr	r3, [sp, #0]
 8009160:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009164:	4a41      	ldr	r2, [pc, #260]	@ (800926c <RadioIrqProcess+0x2c4>)
 8009166:	fb82 1203 	smull	r1, r2, r2, r3
 800916a:	17db      	asrs	r3, r3, #31
 800916c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8009170:	b25b      	sxtb	r3, r3
 8009172:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 8009176:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800917a:	483a      	ldr	r0, [pc, #232]	@ (8009264 <RadioIrqProcess+0x2bc>)
 800917c:	47a8      	blx	r5
                break;
 800917e:	e062      	b.n	8009246 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8009180:	2000      	movs	r0, #0
 8009182:	f001 f937 	bl	800a3f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009186:	4b32      	ldr	r3, [pc, #200]	@ (8009250 <RadioIrqProcess+0x2a8>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d05b      	beq.n	8009246 <RadioIrqProcess+0x29e>
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d058      	beq.n	8009246 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8009194:	2001      	movs	r0, #1
 8009196:	4798      	blx	r3
 8009198:	e055      	b.n	8009246 <RadioIrqProcess+0x29e>
 800919a:	4b2f      	ldr	r3, [pc, #188]	@ (8009258 <RadioIrqProcess+0x2b0>)
 800919c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80091a0:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 80091a2:	482f      	ldr	r0, [pc, #188]	@ (8009260 <RadioIrqProcess+0x2b8>)
 80091a4:	f002 fa38 	bl	800b618 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80091a8:	2000      	movs	r0, #0
 80091aa:	f001 f923 	bl	800a3f4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80091ae:	4b28      	ldr	r3, [pc, #160]	@ (8009250 <RadioIrqProcess+0x2a8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d047      	beq.n	8009246 <RadioIrqProcess+0x29e>
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d044      	beq.n	8009246 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80091bc:	4798      	blx	r3
 80091be:	e042      	b.n	8009246 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80091c0:	4b2b      	ldr	r3, [pc, #172]	@ (8009270 <RadioIrqProcess+0x2c8>)
 80091c2:	2201      	movs	r2, #1
 80091c4:	2100      	movs	r1, #0
 80091c6:	2002      	movs	r0, #2
 80091c8:	f001 ff76 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80091cc:	4b1f      	ldr	r3, [pc, #124]	@ (800924c <RadioIrqProcess+0x2a4>)
 80091ce:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80091d0:	b3c9      	cbz	r1, 8009246 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80091d2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80091d6:	f640 1003 	movw	r0, #2307	@ 0x903
 80091da:	f7ff fe53 	bl	8008e84 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80091de:	4c1b      	ldr	r4, [pc, #108]	@ (800924c <RadioIrqProcess+0x2a4>)
 80091e0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80091e4:	f640 1004 	movw	r0, #2308	@ 0x904
 80091e8:	f7ff fe4c 	bl	8008e84 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80091ec:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 80091f0:	f640 1005 	movw	r0, #2309	@ 0x905
 80091f4:	f7ff fe46 	bl	8008e84 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80091f8:	f640 1002 	movw	r0, #2306	@ 0x902
 80091fc:	f7ff fe3e 	bl	8008e7c <RadioRead>
 8009200:	f040 0101 	orr.w	r1, r0, #1
 8009204:	b2c9      	uxtb	r1, r1
 8009206:	f640 1002 	movw	r0, #2306	@ 0x902
 800920a:	f7ff fe3b 	bl	8008e84 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800920e:	2200      	movs	r2, #0
 8009210:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009212:	4613      	mov	r3, r2
 8009214:	f240 2162 	movw	r1, #610	@ 0x262
 8009218:	4608      	mov	r0, r1
 800921a:	f001 fa98 	bl	800a74e <SUBGRF_SetDioIrqParams>
 800921e:	e012      	b.n	8009246 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8009220:	4b14      	ldr	r3, [pc, #80]	@ (8009274 <RadioIrqProcess+0x2cc>)
 8009222:	2201      	movs	r2, #1
 8009224:	2100      	movs	r1, #0
 8009226:	2002      	movs	r0, #2
 8009228:	f001 ff46 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800922c:	f001 fe5e 	bl	800aeec <RFW_Is_Init>
 8009230:	2801      	cmp	r0, #1
 8009232:	d108      	bne.n	8009246 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8009234:	f001 fe66 	bl	800af04 <RFW_ReceivePayload>
 8009238:	e005      	b.n	8009246 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800923a:	4b0f      	ldr	r3, [pc, #60]	@ (8009278 <RadioIrqProcess+0x2d0>)
 800923c:	2201      	movs	r2, #1
 800923e:	2100      	movs	r1, #0
 8009240:	2002      	movs	r0, #2
 8009242:	f001 ff39 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8009246:	b003      	add	sp, #12
 8009248:	bd30      	pop	{r4, r5, pc}
 800924a:	bf00      	nop
 800924c:	2000586c 	.word	0x2000586c
 8009250:	200058c8 	.word	0x200058c8
 8009254:	08010988 	.word	0x08010988
 8009258:	48000400 	.word	0x48000400
 800925c:	2000583c 	.word	0x2000583c
 8009260:	20005854 	.word	0x20005854
 8009264:	200058cc 	.word	0x200058cc
 8009268:	20005890 	.word	0x20005890
 800926c:	10624dd3 	.word	0x10624dd3
 8009270:	0801099c 	.word	0x0801099c
 8009274:	080109a8 	.word	0x080109a8
 8009278:	080109b4 	.word	0x080109b4
        TimerStop( &RxTimeoutTimer );
 800927c:	4817      	ldr	r0, [pc, #92]	@ (80092dc <RadioIrqProcess+0x334>)
 800927e:	f002 f9cb 	bl	800b618 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009282:	4b17      	ldr	r3, [pc, #92]	@ (80092e0 <RadioIrqProcess+0x338>)
 8009284:	785b      	ldrb	r3, [r3, #1]
 8009286:	b173      	cbz	r3, 80092a6 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009288:	4b16      	ldr	r3, [pc, #88]	@ (80092e4 <RadioIrqProcess+0x33c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0da      	beq.n	8009246 <RadioIrqProcess+0x29e>
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0d7      	beq.n	8009246 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8009296:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8009298:	4b13      	ldr	r3, [pc, #76]	@ (80092e8 <RadioIrqProcess+0x340>)
 800929a:	2201      	movs	r2, #1
 800929c:	2100      	movs	r1, #0
 800929e:	2002      	movs	r0, #2
 80092a0:	f001 ff0a 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
 80092a4:	e7cf      	b.n	8009246 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80092a6:	2000      	movs	r0, #0
 80092a8:	f001 f8a4 	bl	800a3f4 <SUBGRF_SetStandby>
 80092ac:	e7ec      	b.n	8009288 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80092ae:	4b0f      	ldr	r3, [pc, #60]	@ (80092ec <RadioIrqProcess+0x344>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	2100      	movs	r1, #0
 80092b4:	2002      	movs	r0, #2
 80092b6:	f001 feff 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80092ba:	4b09      	ldr	r3, [pc, #36]	@ (80092e0 <RadioIrqProcess+0x338>)
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	b143      	cbz	r3, 80092d2 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80092c0:	4b08      	ldr	r3, [pc, #32]	@ (80092e4 <RadioIrqProcess+0x33c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0be      	beq.n	8009246 <RadioIrqProcess+0x29e>
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0bb      	beq.n	8009246 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80092ce:	4798      	blx	r3
}
 80092d0:	e7b9      	b.n	8009246 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80092d2:	2000      	movs	r0, #0
 80092d4:	f001 f88e 	bl	800a3f4 <SUBGRF_SetStandby>
 80092d8:	e7f2      	b.n	80092c0 <RadioIrqProcess+0x318>
 80092da:	bf00      	nop
 80092dc:	2000583c 	.word	0x2000583c
 80092e0:	2000586c 	.word	0x2000586c
 80092e4:	200058c8 	.word	0x200058c8
 80092e8:	080109c0 	.word	0x080109c0
 80092ec:	080109cc 	.word	0x080109cc

080092f0 <RadioOnDioIrq>:
{
 80092f0:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80092f2:	4b03      	ldr	r3, [pc, #12]	@ (8009300 <RadioOnDioIrq+0x10>)
 80092f4:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 80092f8:	f7ff fe56 	bl	8008fa8 <RadioIrqProcess>
}
 80092fc:	bd08      	pop	{r3, pc}
 80092fe:	bf00      	nop
 8009300:	2000586c 	.word	0x2000586c

08009304 <RadioGetWakeupTime>:
{
 8009304:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009306:	f001 fd2a 	bl	800ad5e <SUBGRF_GetRadioWakeUpTime>
}
 800930a:	3003      	adds	r0, #3
 800930c:	bd08      	pop	{r3, pc}

0800930e <RadioReadRegisters>:
{
 800930e:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8009310:	f001 f808 	bl	800a324 <SUBGRF_ReadRegisters>
}
 8009314:	bd08      	pop	{r3, pc}

08009316 <RadioWriteRegisters>:
{
 8009316:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8009318:	f000 ffc2 	bl	800a2a0 <SUBGRF_WriteRegisters>
}
 800931c:	bd08      	pop	{r3, pc}

0800931e <RadioRssi>:
{
 800931e:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8009320:	f001 fc6c 	bl	800abfc <SUBGRF_GetRssiInst>
}
 8009324:	bd08      	pop	{r3, pc}
	...

08009328 <RadioSetTxContinuousWave>:
{
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800932c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009330:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8009334:	f001 fa7e 	bl	800a834 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8009338:	4628      	mov	r0, r5
 800933a:	f001 fcf9 	bl	800ad30 <SUBGRF_SetRfTxPower>
 800933e:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009340:	210e      	movs	r1, #14
 8009342:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009346:	f000 ff57 	bl	800a1f8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800934a:	2101      	movs	r1, #1
 800934c:	4628      	mov	r0, r5
 800934e:	f001 fcdb 	bl	800ad08 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009352:	f001 f929 	bl	800a5a8 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8009356:	4d04      	ldr	r5, [pc, #16]	@ (8009368 <RadioSetTxContinuousWave+0x40>)
 8009358:	4621      	mov	r1, r4
 800935a:	4628      	mov	r0, r5
 800935c:	f002 f9fc 	bl	800b758 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009360:	4628      	mov	r0, r5
 8009362:	f002 f9b3 	bl	800b6cc <UTIL_TIMER_Start>
}
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	20005854 	.word	0x20005854

0800936c <RadioSetChannel>:
{
 800936c:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800936e:	f001 fa61 	bl	800a834 <SUBGRF_SetRfFrequency>
}
 8009372:	bd08      	pop	{r3, pc}

08009374 <RadioStartCad>:
{
 8009374:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009376:	2100      	movs	r1, #0
 8009378:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <RadioStartCad+0x24>)
 800937a:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800937e:	f001 fcc3 	bl	800ad08 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8009382:	2300      	movs	r3, #0
 8009384:	461a      	mov	r2, r3
 8009386:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800938a:	4608      	mov	r0, r1
 800938c:	f001 f9df 	bl	800a74e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8009390:	f001 f8fe 	bl	800a590 <SUBGRF_SetCad>
}
 8009394:	bd08      	pop	{r3, pc}
 8009396:	bf00      	nop
 8009398:	2000586c 	.word	0x2000586c

0800939c <RadioRx>:
{
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80093a0:	f001 fda4 	bl	800aeec <RFW_Is_Init>
 80093a4:	2801      	cmp	r0, #1
 80093a6:	d019      	beq.n	80093dc <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80093a8:	2300      	movs	r3, #0
 80093aa:	461a      	mov	r2, r3
 80093ac:	f240 2162 	movw	r1, #610	@ 0x262
 80093b0:	4608      	mov	r0, r1
 80093b2:	f001 f9cc 	bl	800a74e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80093b6:	b9a4      	cbnz	r4, 80093e2 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80093b8:	4c11      	ldr	r4, [pc, #68]	@ (8009400 <RadioRx+0x64>)
 80093ba:	2100      	movs	r1, #0
 80093bc:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80093be:	4b11      	ldr	r3, [pc, #68]	@ (8009404 <RadioRx+0x68>)
 80093c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80093c4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80093c6:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 80093ca:	f001 fc9d 	bl	800ad08 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80093ce:	7863      	ldrb	r3, [r4, #1]
 80093d0:	b183      	cbz	r3, 80093f4 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80093d2:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80093d6:	f001 f849 	bl	800a46c <SUBGRF_SetRx>
}
 80093da:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 80093dc:	f001 fd8e 	bl	800aefc <RFW_ReceiveInit>
 80093e0:	e7e9      	b.n	80093b6 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80093e2:	4d09      	ldr	r5, [pc, #36]	@ (8009408 <RadioRx+0x6c>)
 80093e4:	4621      	mov	r1, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	f002 f9b6 	bl	800b758 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80093ec:	4628      	mov	r0, r5
 80093ee:	f002 f96d 	bl	800b6cc <UTIL_TIMER_Start>
 80093f2:	e7e1      	b.n	80093b8 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80093f4:	4b02      	ldr	r3, [pc, #8]	@ (8009400 <RadioRx+0x64>)
 80093f6:	6898      	ldr	r0, [r3, #8]
 80093f8:	0180      	lsls	r0, r0, #6
 80093fa:	f001 f837 	bl	800a46c <SUBGRF_SetRx>
}
 80093fe:	e7ec      	b.n	80093da <RadioRx+0x3e>
 8009400:	2000586c 	.word	0x2000586c
 8009404:	48000400 	.word	0x48000400
 8009408:	2000583c 	.word	0x2000583c

0800940c <RadioSleep>:
{
 800940c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800940e:	f04f 0004 	mov.w	r0, #4
 8009412:	f000 ffcf 	bl	800a3b4 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8009416:	2002      	movs	r0, #2
 8009418:	f7f9 fe80 	bl	800311c <HAL_Delay>
}
 800941c:	bd08      	pop	{r3, pc}
	...

08009420 <RadioSend>:
{
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	4605      	mov	r5, r0
 8009426:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009428:	2300      	movs	r3, #0
 800942a:	461a      	mov	r2, r3
 800942c:	f240 2101 	movw	r1, #513	@ 0x201
 8009430:	4608      	mov	r0, r1
 8009432:	f001 f98c 	bl	800a74e <SUBGRF_SetDioIrqParams>
 8009436:	4b5e      	ldr	r3, [pc, #376]	@ (80095b0 <RadioSend+0x190>)
 8009438:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800943c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800943e:	4e5d      	ldr	r6, [pc, #372]	@ (80095b4 <RadioSend+0x194>)
 8009440:	2101      	movs	r1, #1
 8009442:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8009446:	f001 fc5f 	bl	800ad08 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800944a:	7833      	ldrb	r3, [r6, #0]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d103      	bne.n	8009458 <RadioSend+0x38>
 8009450:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 8009454:	2b06      	cmp	r3, #6
 8009456:	d013      	beq.n	8009480 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009458:	f640 0089 	movw	r0, #2185	@ 0x889
 800945c:	f000 fee0 	bl	800a220 <SUBGRF_ReadRegister>
 8009460:	f040 0104 	orr.w	r1, r0, #4
 8009464:	b2c9      	uxtb	r1, r1
 8009466:	f640 0089 	movw	r0, #2185	@ 0x889
 800946a:	f000 fec5 	bl	800a1f8 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 800946e:	4b51      	ldr	r3, [pc, #324]	@ (80095b4 <RadioSend+0x194>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b04      	cmp	r3, #4
 8009474:	d819      	bhi.n	80094aa <RadioSend+0x8a>
 8009476:	e8df f003 	tbb	[pc, r3]
 800947a:	0e24      	.short	0x0e24
 800947c:	5024      	.short	0x5024
 800947e:	5d          	.byte	0x5d
 800947f:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009480:	f640 0089 	movw	r0, #2185	@ 0x889
 8009484:	f000 fecc 	bl	800a220 <SUBGRF_ReadRegister>
 8009488:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800948c:	f640 0089 	movw	r0, #2185	@ 0x889
 8009490:	f000 feb2 	bl	800a1f8 <SUBGRF_WriteRegister>
 8009494:	e7eb      	b.n	800946e <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8009496:	4847      	ldr	r0, [pc, #284]	@ (80095b4 <RadioSend+0x194>)
 8009498:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800949a:	300e      	adds	r0, #14
 800949c:	f001 fb20 	bl	800aae0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80094a0:	2200      	movs	r2, #0
 80094a2:	4621      	mov	r1, r4
 80094a4:	4628      	mov	r0, r5
 80094a6:	f000 ffd9 	bl	800a45c <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80094aa:	4c43      	ldr	r4, [pc, #268]	@ (80095b8 <RadioSend+0x198>)
 80094ac:	4b41      	ldr	r3, [pc, #260]	@ (80095b4 <RadioSend+0x194>)
 80094ae:	6859      	ldr	r1, [r3, #4]
 80094b0:	4620      	mov	r0, r4
 80094b2:	f002 f951 	bl	800b758 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80094b6:	4620      	mov	r0, r4
 80094b8:	f002 f908 	bl	800b6cc <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 80094bc:	2000      	movs	r0, #0
}
 80094be:	b002      	add	sp, #8
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80094c2:	f001 fd13 	bl	800aeec <RFW_Is_Init>
 80094c6:	2801      	cmp	r0, #1
 80094c8:	d00a      	beq.n	80094e0 <RadioSend+0xc0>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80094ca:	483a      	ldr	r0, [pc, #232]	@ (80095b4 <RadioSend+0x194>)
 80094cc:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80094ce:	300e      	adds	r0, #14
 80094d0:	f001 fb06 	bl	800aae0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80094d4:	2200      	movs	r2, #0
 80094d6:	4621      	mov	r1, r4
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 ffbf 	bl	800a45c <SUBGRF_SendPayload>
 80094de:	e7e4      	b.n	80094aa <RadioSend+0x8a>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80094e0:	f10d 0207 	add.w	r2, sp, #7
 80094e4:	4621      	mov	r1, r4
 80094e6:	4628      	mov	r0, r5
 80094e8:	f001 fd05 	bl	800aef6 <RFW_TransmitInit>
 80094ec:	b968      	cbnz	r0, 800950a <RadioSend+0xea>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80094ee:	4831      	ldr	r0, [pc, #196]	@ (80095b4 <RadioSend+0x194>)
 80094f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80094f4:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80094f6:	300e      	adds	r0, #14
 80094f8:	f001 faf2 	bl	800aae0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80094fc:	2200      	movs	r2, #0
 80094fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009502:	4628      	mov	r0, r5
 8009504:	f000 ffaa 	bl	800a45c <SUBGRF_SendPayload>
 8009508:	e7cf      	b.n	80094aa <RadioSend+0x8a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800950a:	4b2c      	ldr	r3, [pc, #176]	@ (80095bc <RadioSend+0x19c>)
 800950c:	2201      	movs	r2, #1
 800950e:	2100      	movs	r1, #0
 8009510:	2002      	movs	r0, #2
 8009512:	f001 fdd1 	bl	800b0b8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8009516:	2003      	movs	r0, #3
 8009518:	e7d1      	b.n	80094be <RadioSend+0x9e>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800951a:	4826      	ldr	r0, [pc, #152]	@ (80095b4 <RadioSend+0x194>)
 800951c:	2302      	movs	r3, #2
 800951e:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8009520:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009522:	300e      	adds	r0, #14
 8009524:	f001 fadc 	bl	800aae0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009528:	2200      	movs	r2, #0
 800952a:	4621      	mov	r1, r4
 800952c:	4628      	mov	r0, r5
 800952e:	f000 ff95 	bl	800a45c <SUBGRF_SendPayload>
            break;
 8009532:	e7ba      	b.n	80094aa <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 8009534:	4622      	mov	r2, r4
 8009536:	4629      	mov	r1, r5
 8009538:	4821      	ldr	r0, [pc, #132]	@ (80095c0 <RadioSend+0x1a0>)
 800953a:	f7ff fc27 	bl	8008d8c <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800953e:	4e1d      	ldr	r6, [pc, #116]	@ (80095b4 <RadioSend+0x194>)
 8009540:	2302      	movs	r3, #2
 8009542:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8009544:	1c65      	adds	r5, r4, #1
 8009546:	b2ed      	uxtb	r5, r5
 8009548:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800954a:	f106 000e 	add.w	r0, r6, #14
 800954e:	f001 fac7 	bl	800aae0 <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8009552:	2100      	movs	r1, #0
 8009554:	20f1      	movs	r0, #241	@ 0xf1
 8009556:	f7ff fc95 	bl	8008e84 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800955a:	2100      	movs	r1, #0
 800955c:	20f0      	movs	r0, #240	@ 0xf0
 800955e:	f7ff fc91 	bl	8008e84 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8009562:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8009564:	2b64      	cmp	r3, #100	@ 0x64
 8009566:	d019      	beq.n	800959c <RadioSend+0x17c>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8009568:	21e1      	movs	r1, #225	@ 0xe1
 800956a:	20f3      	movs	r0, #243	@ 0xf3
 800956c:	f7ff fc8a 	bl	8008e84 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8009570:	2104      	movs	r1, #4
 8009572:	20f2      	movs	r0, #242	@ 0xf2
 8009574:	f7ff fc86 	bl	8008e84 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 8009578:	00e1      	lsls	r1, r4, #3
 800957a:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800957c:	0a09      	lsrs	r1, r1, #8
 800957e:	20f4      	movs	r0, #244	@ 0xf4
 8009580:	f7ff fc80 	bl	8008e84 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8009584:	f004 01fe 	and.w	r1, r4, #254	@ 0xfe
 8009588:	20f5      	movs	r0, #245	@ 0xf5
 800958a:	f7ff fc7b 	bl	8008e84 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800958e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009592:	4629      	mov	r1, r5
 8009594:	480a      	ldr	r0, [pc, #40]	@ (80095c0 <RadioSend+0x1a0>)
 8009596:	f000 ff61 	bl	800a45c <SUBGRF_SendPayload>
            break;
 800959a:	e786      	b.n	80094aa <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800959c:	2170      	movs	r1, #112	@ 0x70
 800959e:	20f3      	movs	r0, #243	@ 0xf3
 80095a0:	f7ff fc70 	bl	8008e84 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80095a4:	211d      	movs	r1, #29
 80095a6:	20f2      	movs	r0, #242	@ 0xf2
 80095a8:	f7ff fc6c 	bl	8008e84 <RadioWrite>
 80095ac:	e7e4      	b.n	8009578 <RadioSend+0x158>
 80095ae:	bf00      	nop
 80095b0:	48000400 	.word	0x48000400
 80095b4:	2000586c 	.word	0x2000586c
 80095b8:	20005854 	.word	0x20005854
 80095bc:	080109dc 	.word	0x080109dc
 80095c0:	200058cc 	.word	0x200058cc

080095c4 <RadioRandom>:
{
 80095c4:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80095c6:	2300      	movs	r3, #0
 80095c8:	461a      	mov	r2, r3
 80095ca:	4619      	mov	r1, r3
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 f8be 	bl	800a74e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 80095d2:	f000 ff65 	bl	800a4a0 <SUBGRF_GetRandom>
}
 80095d6:	bd08      	pop	{r3, pc}

080095d8 <RadioSetModem>:
{
 80095d8:	b510      	push	{r4, lr}
 80095da:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 80095dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009650 <RadioSetModem+0x78>)
 80095de:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 80095e0:	f001 fc91 	bl	800af06 <RFW_SetRadioModem>
    switch( modem )
 80095e4:	2c05      	cmp	r4, #5
 80095e6:	d804      	bhi.n	80095f2 <RadioSetModem+0x1a>
 80095e8:	e8df f004 	tbb	[pc, r4]
 80095ec:	1d03110a 	.word	0x1d03110a
 80095f0:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80095f2:	2003      	movs	r0, #3
 80095f4:	f001 f94a 	bl	800a88c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80095f8:	4b15      	ldr	r3, [pc, #84]	@ (8009650 <RadioSetModem+0x78>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	735a      	strb	r2, [r3, #13]
}
 80095fe:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8009600:	2000      	movs	r0, #0
 8009602:	f001 f943 	bl	800a88c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8009606:	4b12      	ldr	r3, [pc, #72]	@ (8009650 <RadioSetModem+0x78>)
 8009608:	2200      	movs	r2, #0
 800960a:	735a      	strb	r2, [r3, #13]
        break;
 800960c:	e7f7      	b.n	80095fe <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800960e:	2001      	movs	r0, #1
 8009610:	f001 f93c 	bl	800a88c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009614:	4b0e      	ldr	r3, [pc, #56]	@ (8009650 <RadioSetModem+0x78>)
 8009616:	7b5a      	ldrb	r2, [r3, #13]
 8009618:	7b18      	ldrb	r0, [r3, #12]
 800961a:	4282      	cmp	r2, r0
 800961c:	d0ef      	beq.n	80095fe <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800961e:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8009620:	f000 fade 	bl	8009be0 <RadioSetPublicNetwork>
 8009624:	e7eb      	b.n	80095fe <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009626:	2002      	movs	r0, #2
 8009628:	f001 f930 	bl	800a88c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800962c:	4b08      	ldr	r3, [pc, #32]	@ (8009650 <RadioSetModem+0x78>)
 800962e:	2200      	movs	r2, #0
 8009630:	735a      	strb	r2, [r3, #13]
        break;
 8009632:	e7e4      	b.n	80095fe <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009634:	2002      	movs	r0, #2
 8009636:	f001 f929 	bl	800a88c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800963a:	4b05      	ldr	r3, [pc, #20]	@ (8009650 <RadioSetModem+0x78>)
 800963c:	2200      	movs	r2, #0
 800963e:	735a      	strb	r2, [r3, #13]
        break;
 8009640:	e7dd      	b.n	80095fe <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8009642:	2000      	movs	r0, #0
 8009644:	f001 f922 	bl	800a88c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8009648:	4b01      	ldr	r3, [pc, #4]	@ (8009650 <RadioSetModem+0x78>)
 800964a:	2200      	movs	r2, #0
 800964c:	735a      	strb	r2, [r3, #13]
}
 800964e:	e7d6      	b.n	80095fe <RadioSetModem+0x26>
 8009650:	2000586c 	.word	0x2000586c

08009654 <RadioSetTxGenericConfig>:
{
 8009654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009658:	b086      	sub	sp, #24
 800965a:	4605      	mov	r5, r0
 800965c:	460c      	mov	r4, r1
 800965e:	4617      	mov	r7, r2
 8009660:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8009662:	2100      	movs	r1, #0
 8009664:	9104      	str	r1, [sp, #16]
 8009666:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009668:	f001 fc3f 	bl	800aeea <RFW_DeInit>
    switch( modem )
 800966c:	2d03      	cmp	r5, #3
 800966e:	f200 8153 	bhi.w	8009918 <RadioSetTxGenericConfig+0x2c4>
 8009672:	e8df f015 	tbh	[pc, r5, lsl #1]
 8009676:	0079      	.short	0x0079
 8009678:	013d00db 	.word	0x013d00db
 800967c:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 800967e:	7ca2      	ldrb	r2, [r4, #18]
 8009680:	2a08      	cmp	r2, #8
 8009682:	f200 8156 	bhi.w	8009932 <RadioSetTxGenericConfig+0x2de>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009686:	68a1      	ldr	r1, [r4, #8]
 8009688:	a804      	add	r0, sp, #16
 800968a:	f001 fe2b 	bl	800b2e4 <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 8151 	beq.w	8009938 <RadioSetTxGenericConfig+0x2e4>
        else if( config->msk.BitRate <= 10000 )
 8009696:	f242 7210 	movw	r2, #10000	@ 0x2710
 800969a:	4293      	cmp	r3, r2
 800969c:	d823      	bhi.n	80096e6 <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800969e:	4bac      	ldr	r3, [pc, #688]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 80096a0:	2203      	movs	r2, #3
 80096a2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80096a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80096a8:	6822      	ldr	r2, [r4, #0]
 80096aa:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80096ac:	7ce2      	ldrb	r2, [r4, #19]
 80096ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            radio_modem = MODEM_MSK;
 80096b2:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80096b4:	6863      	ldr	r3, [r4, #4]
 80096b6:	00da      	lsls	r2, r3, #3
 80096b8:	4ba5      	ldr	r3, [pc, #660]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 80096ba:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80096bc:	2204      	movs	r2, #4
 80096be:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80096c0:	7ca2      	ldrb	r2, [r4, #18]
 80096c2:	00d2      	lsls	r2, r2, #3
 80096c4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80096c6:	2200      	movs	r2, #0
 80096c8:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80096ca:	7da3      	ldrb	r3, [r4, #22]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d018      	beq.n	8009702 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80096d0:	7d23      	ldrb	r3, [r4, #20]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d015      	beq.n	8009702 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80096d6:	7d62      	ldrb	r2, [r4, #21]
 80096d8:	4b9d      	ldr	r3, [pc, #628]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 80096da:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80096dc:	7da2      	ldrb	r2, [r4, #22]
 80096de:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80096e0:	7d22      	ldrb	r2, [r4, #20]
 80096e2:	755a      	strb	r2, [r3, #21]
 80096e4:	e026      	b.n	8009734 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80096e6:	4b9a      	ldr	r3, [pc, #616]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 80096e8:	2500      	movs	r5, #0
 80096ea:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80096ec:	f883 5038 	strb.w	r5, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80096f0:	6822      	ldr	r2, [r4, #0]
 80096f2:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80096f4:	7ce2      	ldrb	r2, [r4, #19]
 80096f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	0892      	lsrs	r2, r2, #2
 80096fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8009700:	e7d8      	b.n	80096b4 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009702:	7d62      	ldrb	r2, [r4, #21]
 8009704:	f102 030f 	add.w	r3, r2, #15
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b01      	cmp	r3, #1
 800970c:	d901      	bls.n	8009712 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800970e:	2a01      	cmp	r2, #1
 8009710:	d127      	bne.n	8009762 <RadioSetTxGenericConfig+0x10e>
            ConfigGeneric.TxConfig = config;
 8009712:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 8009714:	2301      	movs	r3, #1
 8009716:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800971a:	4a8e      	ldr	r2, [pc, #568]	@ (8009954 <RadioSetTxGenericConfig+0x300>)
 800971c:	4b8e      	ldr	r3, [pc, #568]	@ (8009958 <RadioSetTxGenericConfig+0x304>)
 800971e:	6819      	ldr	r1, [r3, #0]
 8009720:	a801      	add	r0, sp, #4
 8009722:	f001 fbdf 	bl	800aee4 <RFW_Init>
 8009726:	b9e0      	cbnz	r0, 8009762 <RadioSetTxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009728:	4b89      	ldr	r3, [pc, #548]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 800972a:	2200      	movs	r2, #0
 800972c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800972e:	2101      	movs	r1, #1
 8009730:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009732:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009734:	f7ff fc22 	bl	8008f7c <RadioStandby>
        RadioSetModem( radio_modem );
 8009738:	4628      	mov	r0, r5
 800973a:	f7ff ff4d 	bl	80095d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800973e:	4d87      	ldr	r5, [pc, #540]	@ (800995c <RadioSetTxGenericConfig+0x308>)
 8009740:	4628      	mov	r0, r5
 8009742:	f001 f94b 	bl	800a9dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009746:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800974a:	f001 f9c9 	bl	800aae0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800974e:	a804      	add	r0, sp, #16
 8009750:	f000 fdb6 	bl	800a2c0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009754:	8a20      	ldrh	r0, [r4, #16]
 8009756:	f000 fd8a 	bl	800a26e <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800975a:	89a0      	ldrh	r0, [r4, #12]
 800975c:	f000 fdcd 	bl	800a2fa <SUBGRF_SetCrcPolynomial>
        break;
 8009760:	e0da      	b.n	8009918 <RadioSetTxGenericConfig+0x2c4>
                return -1;
 8009762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009766:	e0e1      	b.n	800992c <RadioSetTxGenericConfig+0x2d8>
        if( config->fsk.BitRate == 0 )
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80e7 	beq.w	800993e <RadioSetTxGenericConfig+0x2ea>
        if( config->fsk.SyncWordLength > 8 )
 8009770:	7ca2      	ldrb	r2, [r4, #18]
 8009772:	2a08      	cmp	r2, #8
 8009774:	f200 80e6 	bhi.w	8009944 <RadioSetTxGenericConfig+0x2f0>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009778:	68a1      	ldr	r1, [r4, #8]
 800977a:	a804      	add	r0, sp, #16
 800977c:	f001 fdb2 	bl	800b2e4 <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009780:	4b73      	ldr	r3, [pc, #460]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009788:	6821      	ldr	r1, [r4, #0]
 800978a:	63d9      	str	r1, [r3, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800978c:	7ce1      	ldrb	r1, [r4, #19]
 800978e:	f883 1044 	strb.w	r1, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009792:	69a1      	ldr	r1, [r4, #24]
 8009794:	6419      	str	r1, [r3, #64]	@ 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009796:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009798:	6861      	ldr	r1, [r4, #4]
 800979a:	00c9      	lsls	r1, r1, #3
 800979c:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800979e:	2104      	movs	r1, #4
 80097a0:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80097a2:	7ca1      	ldrb	r1, [r4, #18]
 80097a4:	00c9      	lsls	r1, r1, #3
 80097a6:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80097a8:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80097aa:	7da3      	ldrb	r3, [r4, #22]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d00a      	beq.n	80097c6 <RadioSetTxGenericConfig+0x172>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80097b0:	7d23      	ldrb	r3, [r4, #20]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d007      	beq.n	80097c6 <RadioSetTxGenericConfig+0x172>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80097b6:	7d62      	ldrb	r2, [r4, #21]
 80097b8:	4b65      	ldr	r3, [pc, #404]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 80097ba:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80097bc:	7da2      	ldrb	r2, [r4, #22]
 80097be:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80097c0:	7d22      	ldrb	r2, [r4, #20]
 80097c2:	755a      	strb	r2, [r3, #21]
 80097c4:	e018      	b.n	80097f8 <RadioSetTxGenericConfig+0x1a4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80097c6:	7d62      	ldrb	r2, [r4, #21]
 80097c8:	f102 030f 	add.w	r3, r2, #15
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d901      	bls.n	80097d6 <RadioSetTxGenericConfig+0x182>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80097d2:	2a01      	cmp	r2, #1
 80097d4:	d127      	bne.n	8009826 <RadioSetTxGenericConfig+0x1d2>
            ConfigGeneric.rtx = CONFIG_TX;
 80097d6:	2301      	movs	r3, #1
 80097d8:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 80097dc:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80097de:	4a5d      	ldr	r2, [pc, #372]	@ (8009954 <RadioSetTxGenericConfig+0x300>)
 80097e0:	4b5d      	ldr	r3, [pc, #372]	@ (8009958 <RadioSetTxGenericConfig+0x304>)
 80097e2:	6819      	ldr	r1, [r3, #0]
 80097e4:	a801      	add	r0, sp, #4
 80097e6:	f001 fb7d 	bl	800aee4 <RFW_Init>
 80097ea:	b9e0      	cbnz	r0, 8009826 <RadioSetTxGenericConfig+0x1d2>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80097ec:	4b58      	ldr	r3, [pc, #352]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80097f2:	2101      	movs	r1, #1
 80097f4:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80097f6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80097f8:	f7ff fbc0 	bl	8008f7c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80097fc:	2000      	movs	r0, #0
 80097fe:	f7ff feeb 	bl	80095d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009802:	4d56      	ldr	r5, [pc, #344]	@ (800995c <RadioSetTxGenericConfig+0x308>)
 8009804:	4628      	mov	r0, r5
 8009806:	f001 f8e9 	bl	800a9dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800980a:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800980e:	f001 f967 	bl	800aae0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009812:	a804      	add	r0, sp, #16
 8009814:	f000 fd54 	bl	800a2c0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009818:	8a20      	ldrh	r0, [r4, #16]
 800981a:	f000 fd28 	bl	800a26e <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800981e:	89a0      	ldrh	r0, [r4, #12]
 8009820:	f000 fd6b 	bl	800a2fa <SUBGRF_SetCrcPolynomial>
        break;
 8009824:	e078      	b.n	8009918 <RadioSetTxGenericConfig+0x2c4>
                return -1;
 8009826:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800982a:	e07f      	b.n	800992c <RadioSetTxGenericConfig+0x2d8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800982c:	4b48      	ldr	r3, [pc, #288]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009834:	7822      	ldrb	r2, [r4, #0]
 8009836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800983a:	7862      	ldrb	r2, [r4, #1]
 800983c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009840:	78a2      	ldrb	r2, [r4, #2]
 8009842:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8009846:	78e3      	ldrb	r3, [r4, #3]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d032      	beq.n	80098b2 <RadioSetTxGenericConfig+0x25e>
 800984c:	2b02      	cmp	r3, #2
 800984e:	d035      	beq.n	80098bc <RadioSetTxGenericConfig+0x268>
 8009850:	b91b      	cbnz	r3, 800985a <RadioSetTxGenericConfig+0x206>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009852:	4b3f      	ldr	r3, [pc, #252]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800985a:	4d3d      	ldr	r5, [pc, #244]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 800985c:	f04f 0801 	mov.w	r8, #1
 8009860:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009864:	88a3      	ldrh	r3, [r4, #4]
 8009866:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009868:	79a3      	ldrb	r3, [r4, #6]
 800986a:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800986c:	79e3      	ldrb	r3, [r4, #7]
 800986e:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009872:	7a23      	ldrb	r3, [r4, #8]
 8009874:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 8009878:	f7ff fb80 	bl	8008f7c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800987c:	4640      	mov	r0, r8
 800987e:	f7ff feab 	bl	80095d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009882:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8009886:	f001 f8a9 	bl	800a9dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800988a:	f105 000e 	add.w	r0, r5, #14
 800988e:	f001 f927 	bl	800aae0 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009892:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 8009896:	2b06      	cmp	r3, #6
 8009898:	d01f      	beq.n	80098da <RadioSetTxGenericConfig+0x286>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800989a:	f640 0089 	movw	r0, #2185	@ 0x889
 800989e:	f000 fcbf 	bl	800a220 <SUBGRF_ReadRegister>
 80098a2:	f040 0104 	orr.w	r1, r0, #4
 80098a6:	b2c9      	uxtb	r1, r1
 80098a8:	f640 0089 	movw	r0, #2185	@ 0x889
 80098ac:	f000 fca4 	bl	800a1f8 <SUBGRF_WriteRegister>
 80098b0:	e032      	b.n	8009918 <RadioSetTxGenericConfig+0x2c4>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80098b2:	4b27      	ldr	r3, [pc, #156]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80098ba:	e7ce      	b.n	800985a <RadioSetTxGenericConfig+0x206>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80098bc:	7823      	ldrb	r3, [r4, #0]
 80098be:	3b0b      	subs	r3, #11
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d904      	bls.n	80098d0 <RadioSetTxGenericConfig+0x27c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80098c6:	4b22      	ldr	r3, [pc, #136]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80098ce:	e7c4      	b.n	800985a <RadioSetTxGenericConfig+0x206>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80098d0:	4b1f      	ldr	r3, [pc, #124]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80098d8:	e7bf      	b.n	800985a <RadioSetTxGenericConfig+0x206>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80098da:	f640 0089 	movw	r0, #2185	@ 0x889
 80098de:	f000 fc9f 	bl	800a220 <SUBGRF_ReadRegister>
 80098e2:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 80098e6:	f640 0089 	movw	r0, #2185	@ 0x889
 80098ea:	f000 fc85 	bl	800a1f8 <SUBGRF_WriteRegister>
 80098ee:	e013      	b.n	8009918 <RadioSetTxGenericConfig+0x2c4>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098f8:	d227      	bcs.n	800994a <RadioSetTxGenericConfig+0x2f6>
        RadioSetModem( MODEM_BPSK );
 80098fa:	2003      	movs	r0, #3
 80098fc:	f7ff fe6c 	bl	80095d8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009900:	4813      	ldr	r0, [pc, #76]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 8009902:	2302      	movs	r3, #2
 8009904:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	6483      	str	r3, [r0, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800990c:	2316      	movs	r3, #22
 800990e:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009912:	3038      	adds	r0, #56	@ 0x38
 8009914:	f001 f862 	bl	800a9dc <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009918:	4638      	mov	r0, r7
 800991a:	f001 fa09 	bl	800ad30 <SUBGRF_SetRfTxPower>
 800991e:	4c0c      	ldr	r4, [pc, #48]	@ (8009950 <RadioSetTxGenericConfig+0x2fc>)
 8009920:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009924:	f001 fae6 	bl	800aef4 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009928:	6066      	str	r6, [r4, #4]
    return 0;
 800992a:	2000      	movs	r0, #0
}
 800992c:	b006      	add	sp, #24
 800992e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 8009932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009936:	e7f9      	b.n	800992c <RadioSetTxGenericConfig+0x2d8>
            return -1;
 8009938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800993c:	e7f6      	b.n	800992c <RadioSetTxGenericConfig+0x2d8>
            return -1;
 800993e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009942:	e7f3      	b.n	800992c <RadioSetTxGenericConfig+0x2d8>
            return -1;
 8009944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009948:	e7f0      	b.n	800992c <RadioSetTxGenericConfig+0x2d8>
            return -1;
 800994a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800994e:	e7ed      	b.n	800992c <RadioSetTxGenericConfig+0x2d8>
 8009950:	2000586c 	.word	0x2000586c
 8009954:	20005854 	.word	0x20005854
 8009958:	200058c8 	.word	0x200058c8
 800995c:	200058a4 	.word	0x200058a4

08009960 <RadioSetRxGenericConfig>:
{
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	b086      	sub	sp, #24
 8009966:	4606      	mov	r6, r0
 8009968:	460c      	mov	r4, r1
 800996a:	4615      	mov	r5, r2
 800996c:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 800996e:	2300      	movs	r3, #0
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009974:	f001 fab9 	bl	800aeea <RFW_DeInit>
    if( rxContinuous != 0 )
 8009978:	b105      	cbz	r5, 800997c <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 800997a:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800997c:	3d00      	subs	r5, #0
 800997e:	bf18      	it	ne
 8009980:	2501      	movne	r5, #1
 8009982:	4b93      	ldr	r3, [pc, #588]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009984:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8009986:	b136      	cbz	r6, 8009996 <RadioSetRxGenericConfig+0x36>
 8009988:	2e01      	cmp	r6, #1
 800998a:	f000 808f 	beq.w	8009aac <RadioSetRxGenericConfig+0x14c>
 800998e:	2000      	movs	r0, #0
}
 8009990:	b006      	add	sp, #24
 8009992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009996:	68a3      	ldr	r3, [r4, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 810c 	beq.w	8009bb6 <RadioSetRxGenericConfig+0x256>
 800999e:	68e3      	ldr	r3, [r4, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 810b 	beq.w	8009bbc <RadioSetRxGenericConfig+0x25c>
        if( config->fsk.SyncWordLength > 8 )
 80099a6:	7fa2      	ldrb	r2, [r4, #30]
 80099a8:	2a08      	cmp	r2, #8
 80099aa:	f200 810a 	bhi.w	8009bc2 <RadioSetRxGenericConfig+0x262>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80099ae:	6921      	ldr	r1, [r4, #16]
 80099b0:	a804      	add	r0, sp, #16
 80099b2:	f001 fc97 	bl	800b2e4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80099b6:	6820      	ldr	r0, [r4, #0]
 80099b8:	3800      	subs	r0, #0
 80099ba:	bf18      	it	ne
 80099bc:	2001      	movne	r0, #1
 80099be:	f000 fe01 	bl	800a5c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80099c2:	4d83      	ldr	r5, [pc, #524]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 80099c4:	2600      	movs	r6, #0
 80099c6:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	63eb      	str	r3, [r5, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80099ce:	f894 3020 	ldrb.w	r3, [r4, #32]
 80099d2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80099d6:	6860      	ldr	r0, [r4, #4]
 80099d8:	f001 fa22 	bl	800ae20 <SUBGRF_GetFskBandwidthRegValue>
 80099dc:	f885 0045 	strb.w	r0, [r5, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80099e0:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80099e2:	68e3      	ldr	r3, [r4, #12]
 80099e4:	00db      	lsls	r3, r3, #3
 80099e6:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80099e8:	7fe3      	ldrb	r3, [r4, #31]
 80099ea:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80099ec:	7fa3      	ldrb	r3, [r4, #30]
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80099f2:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80099f6:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80099f8:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 80099fc:	b973      	cbnz	r3, 8009a1c <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80099fe:	6961      	ldr	r1, [r4, #20]
 8009a00:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009a02:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 8009a06:	2a02      	cmp	r2, #2
 8009a08:	d012      	beq.n	8009a30 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d010      	beq.n	8009a30 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009a0e:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8009a12:	496f      	ldr	r1, [pc, #444]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009a14:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009a16:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009a18:	754b      	strb	r3, [r1, #21]
 8009a1a:	e023      	b.n	8009a64 <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d003      	beq.n	8009a28 <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009a20:	4a6b      	ldr	r2, [pc, #428]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009a22:	21ff      	movs	r1, #255	@ 0xff
 8009a24:	7591      	strb	r1, [r2, #22]
 8009a26:	e7ec      	b.n	8009a02 <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009a28:	4a69      	ldr	r2, [pc, #420]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009a2a:	21ff      	movs	r1, #255	@ 0xff
 8009a2c:	7591      	strb	r1, [r2, #22]
 8009a2e:	e7e8      	b.n	8009a02 <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009a30:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8009a34:	f102 030f 	add.w	r3, r2, #15
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d901      	bls.n	8009a42 <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009a3e:	2a01      	cmp	r2, #1
 8009a40:	d131      	bne.n	8009aa6 <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 8009a42:	2300      	movs	r3, #0
 8009a44:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 8009a48:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009a4a:	4a62      	ldr	r2, [pc, #392]	@ (8009bd4 <RadioSetRxGenericConfig+0x274>)
 8009a4c:	4b62      	ldr	r3, [pc, #392]	@ (8009bd8 <RadioSetRxGenericConfig+0x278>)
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	a801      	add	r0, sp, #4
 8009a52:	f001 fa47 	bl	800aee4 <RFW_Init>
 8009a56:	bb30      	cbnz	r0, 8009aa6 <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009a58:	4b5d      	ldr	r3, [pc, #372]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009a5e:	2101      	movs	r1, #1
 8009a60:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009a62:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009a64:	f7ff fa8a 	bl	8008f7c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009a68:	2000      	movs	r0, #0
 8009a6a:	f7ff fdb5 	bl	80095d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009a6e:	4d5b      	ldr	r5, [pc, #364]	@ (8009bdc <RadioSetRxGenericConfig+0x27c>)
 8009a70:	4628      	mov	r0, r5
 8009a72:	f000 ffb3 	bl	800a9dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009a76:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8009a7a:	f001 f831 	bl	800aae0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009a7e:	a804      	add	r0, sp, #16
 8009a80:	f000 fc1e 	bl	800a2c0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009a84:	8ba0      	ldrh	r0, [r4, #28]
 8009a86:	f000 fbf2 	bl	800a26e <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009a8a:	8b20      	ldrh	r0, [r4, #24]
 8009a8c:	f000 fc35 	bl	800a2fa <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8009a90:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8009a94:	fb07 f303 	mul.w	r3, r7, r3
 8009a98:	68a2      	ldr	r2, [r4, #8]
 8009a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a9e:	f845 3c30 	str.w	r3, [r5, #-48]
    return status;
 8009aa2:	2000      	movs	r0, #0
        break;
 8009aa4:	e774      	b.n	8009990 <RadioSetRxGenericConfig+0x30>
                return -1;
 8009aa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009aaa:	e771      	b.n	8009990 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 8009aac:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 808a 	beq.w	8009bc8 <RadioSetRxGenericConfig+0x268>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8009ab4:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d059      	beq.n	8009b70 <RadioSetRxGenericConfig+0x210>
            MaxPayloadLength = 0xFF;
 8009abc:	f04f 08ff 	mov.w	r8, #255	@ 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009ac0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009ac2:	3800      	subs	r0, #0
 8009ac4:	bf18      	it	ne
 8009ac6:	2001      	movne	r0, #1
 8009ac8:	f000 fd7c 	bl	800a5c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009acc:	b2f8      	uxtb	r0, r7
 8009ace:	f000 fd86 	bl	800a5de <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009ada:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8009ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009ae2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8009ae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009aea:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8009aee:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8009af2:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d03d      	beq.n	8009b76 <RadioSetRxGenericConfig+0x216>
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d040      	beq.n	8009b80 <RadioSetRxGenericConfig+0x220>
 8009afe:	b91b      	cbnz	r3, 8009b08 <RadioSetRxGenericConfig+0x1a8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009b00:	4b33      	ldr	r3, [pc, #204]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009b08:	4d31      	ldr	r5, [pc, #196]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009b0a:	2601      	movs	r6, #1
 8009b0c:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009b0e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8009b10:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009b12:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8009b16:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009b18:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009b1c:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8009b20:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009b24:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8009b28:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 8009b2c:	f7ff fa26 	bl	8008f7c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7ff fd51 	bl	80095d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b36:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8009b3a:	f000 ff4f 	bl	800a9dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b3e:	f105 000e 	add.w	r0, r5, #14
 8009b42:	f000 ffcd 	bl	800aae0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009b46:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009b4a:	42b3      	cmp	r3, r6
 8009b4c:	d028      	beq.n	8009ba0 <RadioSetRxGenericConfig+0x240>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009b4e:	f240 7036 	movw	r0, #1846	@ 0x736
 8009b52:	f000 fb65 	bl	800a220 <SUBGRF_ReadRegister>
 8009b56:	f040 0104 	orr.w	r1, r0, #4
 8009b5a:	b2c9      	uxtb	r1, r1
 8009b5c:	f240 7036 	movw	r0, #1846	@ 0x736
 8009b60:	f000 fb4a 	bl	800a1f8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009b64:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b6a:	609a      	str	r2, [r3, #8]
    return status;
 8009b6c:	2000      	movs	r0, #0
        break;
 8009b6e:	e70f      	b.n	8009990 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8009b70:	f894 8033 	ldrb.w	r8, [r4, #51]	@ 0x33
 8009b74:	e7a4      	b.n	8009ac0 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009b76:	4b16      	ldr	r3, [pc, #88]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009b7e:	e7c3      	b.n	8009b08 <RadioSetRxGenericConfig+0x1a8>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009b80:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8009b84:	3b0b      	subs	r3, #11
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d904      	bls.n	8009b96 <RadioSetRxGenericConfig+0x236>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009b8c:	4b10      	ldr	r3, [pc, #64]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8009b94:	e7b8      	b.n	8009b08 <RadioSetRxGenericConfig+0x1a8>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009b96:	4b0e      	ldr	r3, [pc, #56]	@ (8009bd0 <RadioSetRxGenericConfig+0x270>)
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8009b9e:	e7b3      	b.n	8009b08 <RadioSetRxGenericConfig+0x1a8>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009ba0:	f240 7036 	movw	r0, #1846	@ 0x736
 8009ba4:	f000 fb3c 	bl	800a220 <SUBGRF_ReadRegister>
 8009ba8:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8009bac:	f240 7036 	movw	r0, #1846	@ 0x736
 8009bb0:	f000 fb22 	bl	800a1f8 <SUBGRF_WriteRegister>
 8009bb4:	e7d6      	b.n	8009b64 <RadioSetRxGenericConfig+0x204>
            return -1;
 8009bb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bba:	e6e9      	b.n	8009990 <RadioSetRxGenericConfig+0x30>
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bc0:	e6e6      	b.n	8009990 <RadioSetRxGenericConfig+0x30>
            return -1;
 8009bc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bc6:	e6e3      	b.n	8009990 <RadioSetRxGenericConfig+0x30>
            return -1;
 8009bc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bcc:	e6e0      	b.n	8009990 <RadioSetRxGenericConfig+0x30>
 8009bce:	bf00      	nop
 8009bd0:	2000586c 	.word	0x2000586c
 8009bd4:	2000583c 	.word	0x2000583c
 8009bd8:	200058c8 	.word	0x200058c8
 8009bdc:	200058a4 	.word	0x200058a4

08009be0 <RadioSetPublicNetwork>:
{
 8009be0:	b510      	push	{r4, lr}
 8009be2:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009be4:	4b0e      	ldr	r3, [pc, #56]	@ (8009c20 <RadioSetPublicNetwork+0x40>)
 8009be6:	7318      	strb	r0, [r3, #12]
 8009be8:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8009bea:	2001      	movs	r0, #1
 8009bec:	f7ff fcf4 	bl	80095d8 <RadioSetModem>
    if( enable == true )
 8009bf0:	b154      	cbz	r4, 8009c08 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009bf2:	2134      	movs	r1, #52	@ 0x34
 8009bf4:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009bf8:	f000 fafe 	bl	800a1f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009bfc:	2144      	movs	r1, #68	@ 0x44
 8009bfe:	f240 7041 	movw	r0, #1857	@ 0x741
 8009c02:	f000 faf9 	bl	800a1f8 <SUBGRF_WriteRegister>
}
 8009c06:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009c08:	2114      	movs	r1, #20
 8009c0a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009c0e:	f000 faf3 	bl	800a1f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009c12:	2124      	movs	r1, #36	@ 0x24
 8009c14:	f240 7041 	movw	r0, #1857	@ 0x741
 8009c18:	f000 faee 	bl	800a1f8 <SUBGRF_WriteRegister>
}
 8009c1c:	e7f3      	b.n	8009c06 <RadioSetPublicNetwork+0x26>
 8009c1e:	bf00      	nop
 8009c20:	2000586c 	.word	0x2000586c

08009c24 <RadioSetTxConfig>:
{
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	460d      	mov	r5, r1
 8009c2e:	4691      	mov	r9, r2
 8009c30:	461f      	mov	r7, r3
 8009c32:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 8009c36:	f89d 803c 	ldrb.w	r8, [sp, #60]	@ 0x3c
 8009c3a:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 8009c3e:	f001 f954 	bl	800aeea <RFW_DeInit>
    switch( modem )
 8009c42:	2c01      	cmp	r4, #1
 8009c44:	d05d      	beq.n	8009d02 <RadioSetTxConfig+0xde>
 8009c46:	2c04      	cmp	r4, #4
 8009c48:	f000 80aa 	beq.w	8009da0 <RadioSetTxConfig+0x17c>
 8009c4c:	2c00      	cmp	r4, #0
 8009c4e:	d140      	bne.n	8009cd2 <RadioSetTxConfig+0xae>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009c50:	4c5b      	ldr	r4, [pc, #364]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009c52:	f04f 0b00 	mov.w	fp, #0
 8009c56:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009c5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c5c:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009c5e:	230b      	movs	r3, #11
 8009c60:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009c64:	4638      	mov	r0, r7
 8009c66:	f001 f8db 	bl	800ae20 <SUBGRF_GetFskBandwidthRegValue>
 8009c6a:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8009c6e:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009c72:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009c76:	00f6      	lsls	r6, r6, #3
 8009c78:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009c7a:	2304      	movs	r3, #4
 8009c7c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8009c7e:	2318      	movs	r3, #24
 8009c80:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009c82:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009c86:	f088 0801 	eor.w	r8, r8, #1
 8009c8a:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8009c8e:	f1ba 0f00 	cmp.w	sl, #0
 8009c92:	d032      	beq.n	8009cfa <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009c94:	22f2      	movs	r2, #242	@ 0xf2
 8009c96:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009c98:	4c49      	ldr	r4, [pc, #292]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8009c9e:	f7ff f96d 	bl	8008f7c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	f7ff fc98 	bl	80095d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009ca8:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8009cac:	f000 fe96 	bl	800a9dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009cb0:	f104 000e 	add.w	r0, r4, #14
 8009cb4:	f000 ff14 	bl	800aae0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009cb8:	4a42      	ldr	r2, [pc, #264]	@ (8009dc4 <RadioSetTxConfig+0x1a0>)
 8009cba:	466b      	mov	r3, sp
 8009cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 fafb 	bl	800a2c0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009cca:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009cce:	f000 face 	bl	800a26e <SUBGRF_SetWhiteningSeed>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f001 f82c 	bl	800ad30 <SUBGRF_SetRfTxPower>
 8009cd8:	4c39      	ldr	r4, [pc, #228]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009cda:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009cde:	210e      	movs	r1, #14
 8009ce0:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009ce4:	f000 fa88 	bl	800a1f8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009ce8:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8009cec:	f001 f902 	bl	800aef4 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009cf0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cf2:	6063      	str	r3, [r4, #4]
}
 8009cf4:	b003      	add	sp, #12
 8009cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009cfa:	4b31      	ldr	r3, [pc, #196]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	75da      	strb	r2, [r3, #23]
 8009d00:	e7ca      	b.n	8009c98 <RadioSetTxConfig+0x74>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009d02:	4a2f      	ldr	r2, [pc, #188]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009d04:	2301      	movs	r3, #1
 8009d06:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8009d0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8009d12:	492d      	ldr	r1, [pc, #180]	@ (8009dc8 <RadioSetTxConfig+0x1a4>)
 8009d14:	5dc9      	ldrb	r1, [r1, r7]
 8009d16:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8009d1a:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 8009d1e:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009d22:	b91f      	cbnz	r7, 8009d2c <RadioSetTxConfig+0x108>
 8009d24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d26:	3a0b      	subs	r2, #11
 8009d28:	2a01      	cmp	r2, #1
 8009d2a:	d92b      	bls.n	8009d84 <RadioSetTxConfig+0x160>
 8009d2c:	2f01      	cmp	r7, #1
 8009d2e:	d026      	beq.n	8009d7e <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009d30:	4a23      	ldr	r2, [pc, #140]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009d32:	2100      	movs	r1, #0
 8009d34:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009d38:	4a21      	ldr	r2, [pc, #132]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009d3e:	3b05      	subs	r3, #5
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	428b      	cmp	r3, r1
 8009d44:	d923      	bls.n	8009d8e <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009d46:	4b1e      	ldr	r3, [pc, #120]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009d48:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009d4a:	4c1d      	ldr	r4, [pc, #116]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009d4c:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009d50:	4b1e      	ldr	r3, [pc, #120]	@ (8009dcc <RadioSetTxConfig+0x1a8>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009d56:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009d5a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8009d5e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 8009d62:	f7ff f90b 	bl	8008f7c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009d66:	2001      	movs	r0, #1
 8009d68:	f7ff fc36 	bl	80095d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009d6c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8009d70:	f000 fe34 	bl	800a9dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d74:	f104 000e 	add.w	r0, r4, #14
 8009d78:	f000 feb2 	bl	800aae0 <SUBGRF_SetPacketParams>
            break;
 8009d7c:	e7a9      	b.n	8009cd2 <RadioSetTxConfig+0xae>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009d7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d80:	2a0c      	cmp	r2, #12
 8009d82:	d1d5      	bne.n	8009d30 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009d84:	4a0e      	ldr	r2, [pc, #56]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009d86:	2101      	movs	r1, #1
 8009d88:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8009d8c:	e7d4      	b.n	8009d38 <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 8009d8e:	2e0b      	cmp	r6, #11
 8009d90:	d803      	bhi.n	8009d9a <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009d92:	4613      	mov	r3, r2
 8009d94:	220c      	movs	r2, #12
 8009d96:	839a      	strh	r2, [r3, #28]
 8009d98:	e7d7      	b.n	8009d4a <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009d9a:	4b09      	ldr	r3, [pc, #36]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009d9c:	839e      	strh	r6, [r3, #28]
 8009d9e:	e7d4      	b.n	8009d4a <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 8009da0:	2004      	movs	r0, #4
 8009da2:	f7ff fc19 	bl	80095d8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009da6:	4806      	ldr	r0, [pc, #24]	@ (8009dc0 <RadioSetTxConfig+0x19c>)
 8009da8:	2302      	movs	r3, #2
 8009daa:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8009dae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009db0:	6483      	str	r3, [r0, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009db2:	2316      	movs	r3, #22
 8009db4:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009db8:	3038      	adds	r0, #56	@ 0x38
 8009dba:	f000 fe0f 	bl	800a9dc <SUBGRF_SetModulationParams>
            break;
 8009dbe:	e788      	b.n	8009cd2 <RadioSetTxConfig+0xae>
 8009dc0:	2000586c 	.word	0x2000586c
 8009dc4:	0800eb04 	.word	0x0800eb04
 8009dc8:	08010b7c 	.word	0x08010b7c
 8009dcc:	200000ec 	.word	0x200000ec

08009dd0 <RadioSetRxConfig>:
{
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	b087      	sub	sp, #28
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460e      	mov	r6, r1
 8009dda:	4615      	mov	r5, r2
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	f8bd 9044 	ldrh.w	r9, [sp, #68]	@ 0x44
 8009de2:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 8009de6:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 8009dea:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 8009dee:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
    SubgRf.RxContinuous = rxContinuous;
 8009df2:	4bb1      	ldr	r3, [pc, #708]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 8009df4:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8009df8:	f001 f877 	bl	800aeea <RFW_DeInit>
    if( rxContinuous == true )
 8009dfc:	f1b8 0f00 	cmp.w	r8, #0
 8009e00:	d001      	beq.n	8009e06 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8009e02:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	d059      	beq.n	8009ebe <RadioSetRxConfig+0xee>
        MaxPayloadLength = payloadLen;
 8009e0a:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8009e0e:	4bab      	ldr	r3, [pc, #684]	@ (800a0bc <RadioSetRxConfig+0x2ec>)
 8009e10:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8009e12:	2c01      	cmp	r4, #1
 8009e14:	f000 80d3 	beq.w	8009fbe <RadioSetRxConfig+0x1ee>
 8009e18:	2c05      	cmp	r4, #5
 8009e1a:	d054      	beq.n	8009ec6 <RadioSetRxConfig+0xf6>
 8009e1c:	2c00      	cmp	r4, #0
 8009e1e:	f040 80c7 	bne.w	8009fb0 <RadioSetRxConfig+0x1e0>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009e22:	2000      	movs	r0, #0
 8009e24:	f000 fbce 	bl	800a5c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009e28:	4ca3      	ldr	r4, [pc, #652]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 8009e2a:	f04f 0800 	mov.w	r8, #0
 8009e2e:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009e32:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009e34:	230b      	movs	r3, #11
 8009e36:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f000 fff0 	bl	800ae20 <SUBGRF_GetFskBandwidthRegValue>
 8009e40:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009e44:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009e48:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8009e4c:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009e50:	2304      	movs	r3, #4
 8009e52:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8009e54:	2318      	movs	r3, #24
 8009e56:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009e58:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009e5c:	f087 0701 	eor.w	r7, r7, #1
 8009e60:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8009e62:	4b96      	ldr	r3, [pc, #600]	@ (800a0bc <RadioSetRxConfig+0x2ec>)
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8009e68:	f1bb 0f00 	cmp.w	fp, #0
 8009e6c:	f000 80a3 	beq.w	8009fb6 <RadioSetRxConfig+0x1e6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009e70:	22f2      	movs	r2, #242	@ 0xf2
 8009e72:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009e74:	4c90      	ldr	r4, [pc, #576]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 8009e76:	2301      	movs	r3, #1
 8009e78:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8009e7a:	f7ff f87f 	bl	8008f7c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8009e7e:	2000      	movs	r0, #0
 8009e80:	f7ff fbaa 	bl	80095d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009e84:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8009e88:	f000 fda8 	bl	800a9dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009e8c:	f104 000e 	add.w	r0, r4, #14
 8009e90:	f000 fe26 	bl	800aae0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009e94:	4a8a      	ldr	r2, [pc, #552]	@ (800a0c0 <RadioSetRxConfig+0x2f0>)
 8009e96:	ab04      	add	r3, sp, #16
 8009e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fa0d 	bl	800a2c0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009ea6:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009eaa:	f000 f9e0 	bl	800a26e <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8009eae:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8009eb2:	fb03 f30a 	mul.w	r3, r3, sl
 8009eb6:	fbb3 f3f5 	udiv	r3, r3, r5
 8009eba:	60a3      	str	r3, [r4, #8]
            break;
 8009ebc:	e078      	b.n	8009fb0 <RadioSetRxConfig+0x1e0>
        MaxPayloadLength = 0xFF;
 8009ebe:	4b7f      	ldr	r3, [pc, #508]	@ (800a0bc <RadioSetRxConfig+0x2ec>)
 8009ec0:	22ff      	movs	r2, #255	@ 0xff
 8009ec2:	701a      	strb	r2, [r3, #0]
 8009ec4:	e7a5      	b.n	8009e12 <RadioSetRxConfig+0x42>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	f000 fb7c 	bl	800a5c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009ecc:	4c7a      	ldr	r4, [pc, #488]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 8009ece:	2700      	movs	r7, #0
 8009ed0:	f884 7038 	strb.w	r7, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009ed4:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8009ed6:	2309      	movs	r3, #9
 8009ed8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8009edc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8009ee0:	6423      	str	r3, [r4, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f000 ff9c 	bl	800ae20 <SUBGRF_GetFskBandwidthRegValue>
 8009ee8:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009eec:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009eee:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8009ef2:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8009ef6:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8009ef8:	2310      	movs	r3, #16
 8009efa:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009efc:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8009efe:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8009f00:	4b6e      	ldr	r3, [pc, #440]	@ (800a0bc <RadioSetRxConfig+0x2ec>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009f06:	2301      	movs	r3, #1
 8009f08:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8009f0a:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8009f0c:	2005      	movs	r0, #5
 8009f0e:	f7ff fb63 	bl	80095d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009f12:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8009f16:	f000 fd61 	bl	800a9dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f1a:	f104 000e 	add.w	r0, r4, #14
 8009f1e:	f000 fddf 	bl	800aae0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009f22:	ab02      	add	r3, sp, #8
 8009f24:	4a67      	ldr	r2, [pc, #412]	@ (800a0c4 <RadioSetRxConfig+0x2f4>)
 8009f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 f9c6 	bl	800a2c0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009f34:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009f38:	f000 f999 	bl	800a26e <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8009f3c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8009f40:	f7fe ff9c 	bl	8008e7c <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8009f44:	f000 01ef 	and.w	r1, r0, #239	@ 0xef
 8009f48:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8009f4c:	f7fe ff9a 	bl	8008e84 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8009f50:	2104      	movs	r1, #4
 8009f52:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8009f56:	f7fe ff95 	bl	8008e84 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8009f5a:	f640 009b 	movw	r0, #2203	@ 0x89b
 8009f5e:	f7fe ff8d 	bl	8008e7c <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009f62:	f000 01e3 	and.w	r1, r0, #227	@ 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8009f66:	f041 0108 	orr.w	r1, r1, #8
 8009f6a:	f640 009b 	movw	r0, #2203	@ 0x89b
 8009f6e:	f7fe ff89 	bl	8008e84 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8009f72:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8009f76:	f7fe ff81 	bl	8008e7c <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009f7a:	f000 01e7 	and.w	r1, r0, #231	@ 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8009f7e:	f041 0118 	orr.w	r1, r1, #24
 8009f82:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8009f86:	f7fe ff7d 	bl	8008e84 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8009f8a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009f8e:	f7fe ff75 	bl	8008e7c <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8009f92:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8009f96:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 8009f9a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009f9e:	f7fe ff71 	bl	8008e84 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8009fa2:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8009fa6:	fb03 f30a 	mul.w	r3, r3, sl
 8009faa:	fbb3 f3f5 	udiv	r3, r3, r5
 8009fae:	60a3      	str	r3, [r4, #8]
}
 8009fb0:	b007      	add	sp, #28
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009fb6:	4b40      	ldr	r3, [pc, #256]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 8009fb8:	2201      	movs	r2, #1
 8009fba:	75da      	strb	r2, [r3, #23]
 8009fbc:	e75a      	b.n	8009e74 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	f000 fb00 	bl	800a5c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009fc4:	4a3c      	ldr	r2, [pc, #240]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8009fcc:	b2eb      	uxtb	r3, r5
 8009fce:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8009fd2:	493d      	ldr	r1, [pc, #244]	@ (800a0c8 <RadioSetRxConfig+0x2f8>)
 8009fd4:	5d89      	ldrb	r1, [r1, r6]
 8009fd6:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8009fda:	9901      	ldr	r1, [sp, #4]
 8009fdc:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009fe0:	b91e      	cbnz	r6, 8009fea <RadioSetRxConfig+0x21a>
 8009fe2:	f1a5 020b 	sub.w	r2, r5, #11
 8009fe6:	2a01      	cmp	r2, #1
 8009fe8:	d94b      	bls.n	800a082 <RadioSetRxConfig+0x2b2>
 8009fea:	2e01      	cmp	r6, #1
 8009fec:	d047      	beq.n	800a07e <RadioSetRxConfig+0x2ae>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009fee:	4a32      	ldr	r2, [pc, #200]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009ff6:	4a30      	ldr	r2, [pc, #192]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009ffc:	3b05      	subs	r3, #5
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	428b      	cmp	r3, r1
 800a002:	d943      	bls.n	800a08c <RadioSetRxConfig+0x2bc>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a004:	4b2c      	ldr	r3, [pc, #176]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 800a006:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a00a:	4c2b      	ldr	r4, [pc, #172]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 800a00c:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a00e:	4b2b      	ldr	r3, [pc, #172]	@ (800a0bc <RadioSetRxConfig+0x2ec>)
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800a014:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800a018:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800a01c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800a020:	f7fe ffac 	bl	8008f7c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800a024:	2001      	movs	r0, #1
 800a026:	f7ff fad7 	bl	80095d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a02a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800a02e:	f000 fcd5 	bl	800a9dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a032:	f104 000e 	add.w	r0, r4, #14
 800a036:	f000 fd53 	bl	800aae0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a03a:	fa5f f08a 	uxtb.w	r0, sl
 800a03e:	f000 face 	bl	800a5de <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800a042:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800a046:	f000 f8eb 	bl	800a220 <SUBGRF_ReadRegister>
 800a04a:	f000 0101 	and.w	r1, r0, #1
 800a04e:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800a052:	f000 f8d1 	bl	800a1f8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a056:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d021      	beq.n	800a0a2 <RadioSetRxConfig+0x2d2>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800a05e:	f240 7036 	movw	r0, #1846	@ 0x736
 800a062:	f000 f8dd 	bl	800a220 <SUBGRF_ReadRegister>
 800a066:	f040 0104 	orr.w	r1, r0, #4
 800a06a:	b2c9      	uxtb	r1, r1
 800a06c:	f240 7036 	movw	r0, #1846	@ 0x736
 800a070:	f000 f8c2 	bl	800a1f8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800a074:	4b10      	ldr	r3, [pc, #64]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 800a076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a07a:	609a      	str	r2, [r3, #8]
}
 800a07c:	e798      	b.n	8009fb0 <RadioSetRxConfig+0x1e0>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a07e:	2d0c      	cmp	r5, #12
 800a080:	d1b5      	bne.n	8009fee <RadioSetRxConfig+0x21e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800a082:	4a0d      	ldr	r2, [pc, #52]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 800a084:	2101      	movs	r1, #1
 800a086:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800a08a:	e7b4      	b.n	8009ff6 <RadioSetRxConfig+0x226>
                if( preambleLen < 12 )
 800a08c:	f1b9 0f0b 	cmp.w	r9, #11
 800a090:	d803      	bhi.n	800a09a <RadioSetRxConfig+0x2ca>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800a092:	4613      	mov	r3, r2
 800a094:	220c      	movs	r2, #12
 800a096:	839a      	strh	r2, [r3, #28]
 800a098:	e7b7      	b.n	800a00a <RadioSetRxConfig+0x23a>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a09a:	4b07      	ldr	r3, [pc, #28]	@ (800a0b8 <RadioSetRxConfig+0x2e8>)
 800a09c:	f8a3 901c 	strh.w	r9, [r3, #28]
 800a0a0:	e7b3      	b.n	800a00a <RadioSetRxConfig+0x23a>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a0a2:	f240 7036 	movw	r0, #1846	@ 0x736
 800a0a6:	f000 f8bb 	bl	800a220 <SUBGRF_ReadRegister>
 800a0aa:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800a0ae:	f240 7036 	movw	r0, #1846	@ 0x736
 800a0b2:	f000 f8a1 	bl	800a1f8 <SUBGRF_WriteRegister>
 800a0b6:	e7dd      	b.n	800a074 <RadioSetRxConfig+0x2a4>
 800a0b8:	2000586c 	.word	0x2000586c
 800a0bc:	200000ec 	.word	0x200000ec
 800a0c0:	0800eb04 	.word	0x0800eb04
 800a0c4:	0800eb0c 	.word	0x0800eb0c
 800a0c8:	08010b7c 	.word	0x08010b7c

0800a0cc <RadioIsChannelFree>:
{
 800a0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ce:	b08b      	sub	sp, #44	@ 0x2c
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	4616      	mov	r6, r2
 800a0d6:	461d      	mov	r5, r3
    RadioStandby( );
 800a0d8:	f7fe ff50 	bl	8008f7c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800a0dc:	2000      	movs	r0, #0
 800a0de:	f7ff fa7b 	bl	80095d8 <RadioSetModem>
    RadioSetChannel( freq );
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f7ff f942 	bl	800936c <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ec:	2400      	movs	r4, #0
 800a0ee:	9408      	str	r4, [sp, #32]
 800a0f0:	9407      	str	r4, [sp, #28]
 800a0f2:	9406      	str	r4, [sp, #24]
 800a0f4:	9405      	str	r4, [sp, #20]
 800a0f6:	9404      	str	r4, [sp, #16]
 800a0f8:	9403      	str	r4, [sp, #12]
 800a0fa:	9402      	str	r4, [sp, #8]
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	9700      	str	r7, [sp, #0]
 800a102:	4623      	mov	r3, r4
 800a104:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800a108:	4639      	mov	r1, r7
 800a10a:	4620      	mov	r0, r4
 800a10c:	f7ff fe60 	bl	8009dd0 <RadioSetRxConfig>
    RadioRx( 0 );
 800a110:	4620      	mov	r0, r4
 800a112:	f7ff f943 	bl	800939c <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800a116:	f7ff f8f5 	bl	8009304 <RadioGetWakeupTime>
 800a11a:	f7f8 ffff 	bl	800311c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800a11e:	f001 fa3b 	bl	800b598 <UTIL_TIMER_GetCurrentTime>
 800a122:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800a124:	4620      	mov	r0, r4
 800a126:	f001 fa41 	bl	800b5ac <UTIL_TIMER_GetElapsedTime>
 800a12a:	42a8      	cmp	r0, r5
 800a12c:	d206      	bcs.n	800a13c <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800a12e:	2000      	movs	r0, #0
 800a130:	f7ff f8f5 	bl	800931e <RadioRssi>
        if( rssi > rssiThresh )
 800a134:	42b0      	cmp	r0, r6
 800a136:	ddf5      	ble.n	800a124 <RadioIsChannelFree+0x58>
            status = false;
 800a138:	2400      	movs	r4, #0
 800a13a:	e000      	b.n	800a13e <RadioIsChannelFree+0x72>
    bool status = true;
 800a13c:	2401      	movs	r4, #1
    RadioStandby( );
 800a13e:	f7fe ff1d 	bl	8008f7c <RadioStandby>
}
 800a142:	4620      	mov	r0, r4
 800a144:	b00b      	add	sp, #44	@ 0x2c
 800a146:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a148 <RadioInit>:
{
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	b082      	sub	sp, #8
    RadioEvents = events;
 800a14c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c4 <RadioInit+0x7c>)
 800a14e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800a150:	4d1d      	ldr	r5, [pc, #116]	@ (800a1c8 <RadioInit+0x80>)
 800a152:	2400      	movs	r4, #0
 800a154:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 800a156:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 800a158:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a15a:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800a15c:	481b      	ldr	r0, [pc, #108]	@ (800a1cc <RadioInit+0x84>)
 800a15e:	f000 fb2f 	bl	800a7c0 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 800a162:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 800a164:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 800a166:	f000 fa5b 	bl	800a620 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800a16a:	4621      	mov	r1, r4
 800a16c:	4620      	mov	r0, r4
 800a16e:	f000 fd27 	bl	800abc0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800a172:	2204      	movs	r2, #4
 800a174:	4621      	mov	r1, r4
 800a176:	2001      	movs	r0, #1
 800a178:	f000 fba2 	bl	800a8c0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800a17c:	4623      	mov	r3, r4
 800a17e:	4622      	mov	r2, r4
 800a180:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a184:	4608      	mov	r0, r1
 800a186:	f000 fae2 	bl	800a74e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800a18a:	f7ff f93f 	bl	800940c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800a18e:	4e10      	ldr	r6, [pc, #64]	@ (800a1d0 <RadioInit+0x88>)
 800a190:	9400      	str	r4, [sp, #0]
 800a192:	4b10      	ldr	r3, [pc, #64]	@ (800a1d4 <RadioInit+0x8c>)
 800a194:	4622      	mov	r2, r4
 800a196:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a19a:	4630      	mov	r0, r6
 800a19c:	f001 f9de 	bl	800b55c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800a1a0:	4d0d      	ldr	r5, [pc, #52]	@ (800a1d8 <RadioInit+0x90>)
 800a1a2:	9400      	str	r4, [sp, #0]
 800a1a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a1dc <RadioInit+0x94>)
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	f001 f9d5 	bl	800b55c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f001 fa30 	bl	800b618 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	f001 fa2d 	bl	800b618 <UTIL_TIMER_Stop>
}
 800a1be:	b002      	add	sp, #8
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
 800a1c2:	bf00      	nop
 800a1c4:	200058c8 	.word	0x200058c8
 800a1c8:	2000586c 	.word	0x2000586c
 800a1cc:	080092f1 	.word	0x080092f1
 800a1d0:	20005854 	.word	0x20005854
 800a1d4:	08008d5d 	.word	0x08008d5d
 800a1d8:	2000583c 	.word	0x2000583c
 800a1dc:	08008d85 	.word	0x08008d85

0800a1e0 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 800a1e0:	4b01      	ldr	r3, [pc, #4]	@ (800a1e8 <SUBGRF_GetOperatingMode+0x8>)
 800a1e2:	7818      	ldrb	r0, [r3, #0]
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	200059da 	.word	0x200059da

0800a1ec <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 800a1ec:	4b01      	ldr	r3, [pc, #4]	@ (800a1f4 <SUBGRF_GetPacketType+0x8>)
 800a1ee:	7818      	ldrb	r0, [r3, #0]
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	200059d9 	.word	0x200059d9

0800a1f8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a1f8:	b510      	push	{r4, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	f88d 1007 	strb.w	r1, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a200:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a204:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a206:	2301      	movs	r3, #1
 800a208:	f10d 0207 	add.w	r2, sp, #7
 800a20c:	4601      	mov	r1, r0
 800a20e:	4803      	ldr	r0, [pc, #12]	@ (800a21c <SUBGRF_WriteRegister+0x24>)
 800a210:	f7fc fd7c 	bl	8006d0c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a214:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800a218:	b002      	add	sp, #8
 800a21a:	bd10      	pop	{r4, pc}
 800a21c:	20000fc0 	.word	0x20000fc0

0800a220 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a220:	b510      	push	{r4, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a226:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a22a:	b672      	cpsid	i
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a22c:	2301      	movs	r3, #1
 800a22e:	f10d 0207 	add.w	r2, sp, #7
 800a232:	4804      	ldr	r0, [pc, #16]	@ (800a244 <SUBGRF_ReadRegister+0x24>)
 800a234:	f7fc fdba 	bl	8006dac <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a238:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
    return data;
}
 800a23c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800a240:	b002      	add	sp, #8
 800a242:	bd10      	pop	{r4, pc}
 800a244:	20000fc0 	.word	0x20000fc0

0800a248 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800a248:	b510      	push	{r4, lr}
 800a24a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800a24c:	f7fa fd34 	bl	8004cb8 <RBI_IsDCDC>
 800a250:	2801      	cmp	r0, #1
 800a252:	d000      	beq.n	800a256 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800a254:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a256:	f640 1023 	movw	r0, #2339	@ 0x923
 800a25a:	f7ff ffe1 	bl	800a220 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800a25e:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a262:	4321      	orrs	r1, r4
 800a264:	f640 1023 	movw	r0, #2339	@ 0x923
 800a268:	f7ff ffc6 	bl	800a1f8 <SUBGRF_WriteRegister>
}
 800a26c:	e7f2      	b.n	800a254 <Radio_SMPS_Set+0xc>

0800a26e <SUBGRF_SetWhiteningSeed>:
{
 800a26e:	b510      	push	{r4, lr}
 800a270:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800a272:	f7ff ffbb 	bl	800a1ec <SUBGRF_GetPacketType>
 800a276:	b100      	cbz	r0, 800a27a <SUBGRF_SetWhiteningSeed+0xc>
}
 800a278:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a27a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a27e:	f7ff ffcf 	bl	800a220 <SUBGRF_ReadRegister>
 800a282:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a286:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a28a:	4301      	orrs	r1, r0
 800a28c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a290:	f7ff ffb2 	bl	800a1f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a294:	b2e1      	uxtb	r1, r4
 800a296:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800a29a:	f7ff ffad 	bl	800a1f8 <SUBGRF_WriteRegister>
}
 800a29e:	e7eb      	b.n	800a278 <SUBGRF_SetWhiteningSeed+0xa>

0800a2a0 <SUBGRF_WriteRegisters>:
{
 800a2a0:	b510      	push	{r4, lr}
 800a2a2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a2a8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a2aa:	460a      	mov	r2, r1
 800a2ac:	4601      	mov	r1, r0
 800a2ae:	4803      	ldr	r0, [pc, #12]	@ (800a2bc <SUBGRF_WriteRegisters+0x1c>)
 800a2b0:	f7fc fd2c 	bl	8006d0c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2b4:	f384 8810 	msr	PRIMASK, r4
}
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000fc0 	.word	0x20000fc0

0800a2c0 <SUBGRF_SetSyncWord>:
{
 800a2c0:	b508      	push	{r3, lr}
 800a2c2:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a2c4:	2208      	movs	r2, #8
 800a2c6:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800a2ca:	f7ff ffe9 	bl	800a2a0 <SUBGRF_WriteRegisters>
}
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	bd08      	pop	{r3, pc}

0800a2d2 <SUBGRF_SetCrcSeed>:
{
 800a2d2:	b500      	push	{lr}
 800a2d4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a2d6:	0a03      	lsrs	r3, r0, #8
 800a2d8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a2dc:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800a2e0:	f7ff ff84 	bl	800a1ec <SUBGRF_GetPacketType>
 800a2e4:	b110      	cbz	r0, 800a2ec <SUBGRF_SetCrcSeed+0x1a>
}
 800a2e6:	b003      	add	sp, #12
 800a2e8:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	a901      	add	r1, sp, #4
 800a2f0:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800a2f4:	f7ff ffd4 	bl	800a2a0 <SUBGRF_WriteRegisters>
}
 800a2f8:	e7f5      	b.n	800a2e6 <SUBGRF_SetCrcSeed+0x14>

0800a2fa <SUBGRF_SetCrcPolynomial>:
{
 800a2fa:	b500      	push	{lr}
 800a2fc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a2fe:	0a03      	lsrs	r3, r0, #8
 800a300:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a304:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800a308:	f7ff ff70 	bl	800a1ec <SUBGRF_GetPacketType>
 800a30c:	b110      	cbz	r0, 800a314 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800a30e:	b003      	add	sp, #12
 800a310:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a314:	2202      	movs	r2, #2
 800a316:	a901      	add	r1, sp, #4
 800a318:	f240 60be 	movw	r0, #1726	@ 0x6be
 800a31c:	f7ff ffc0 	bl	800a2a0 <SUBGRF_WriteRegisters>
}
 800a320:	e7f5      	b.n	800a30e <SUBGRF_SetCrcPolynomial+0x14>
	...

0800a324 <SUBGRF_ReadRegisters>:
{
 800a324:	b510      	push	{r4, lr}
 800a326:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a328:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a32c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a32e:	460a      	mov	r2, r1
 800a330:	4601      	mov	r1, r0
 800a332:	4803      	ldr	r0, [pc, #12]	@ (800a340 <SUBGRF_ReadRegisters+0x1c>)
 800a334:	f7fc fd3a 	bl	8006dac <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a338:	f384 8810 	msr	PRIMASK, r4
}
 800a33c:	bd10      	pop	{r4, pc}
 800a33e:	bf00      	nop
 800a340:	20000fc0 	.word	0x20000fc0

0800a344 <SUBGRF_WriteBuffer>:
{
 800a344:	b510      	push	{r4, lr}
 800a346:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a348:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a34c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a34e:	460a      	mov	r2, r1
 800a350:	4601      	mov	r1, r0
 800a352:	4803      	ldr	r0, [pc, #12]	@ (800a360 <SUBGRF_WriteBuffer+0x1c>)
 800a354:	f7fc fe8c 	bl	8007070 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a358:	f384 8810 	msr	PRIMASK, r4
}
 800a35c:	bd10      	pop	{r4, pc}
 800a35e:	bf00      	nop
 800a360:	20000fc0 	.word	0x20000fc0

0800a364 <SUBGRF_SetPayload>:
{
 800a364:	b508      	push	{r3, lr}
 800a366:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800a368:	4601      	mov	r1, r0
 800a36a:	2000      	movs	r0, #0
 800a36c:	f7ff ffea 	bl	800a344 <SUBGRF_WriteBuffer>
}
 800a370:	bd08      	pop	{r3, pc}
	...

0800a374 <SUBGRF_ReadBuffer>:
{
 800a374:	b510      	push	{r4, lr}
 800a376:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a378:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a37c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a37e:	460a      	mov	r2, r1
 800a380:	4601      	mov	r1, r0
 800a382:	4803      	ldr	r0, [pc, #12]	@ (800a390 <SUBGRF_ReadBuffer+0x1c>)
 800a384:	f7fc febe 	bl	8007104 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a388:	f384 8810 	msr	PRIMASK, r4
}
 800a38c:	bd10      	pop	{r4, pc}
 800a38e:	bf00      	nop
 800a390:	20000fc0 	.word	0x20000fc0

0800a394 <SUBGRF_WriteCommand>:
{
 800a394:	b510      	push	{r4, lr}
 800a396:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a398:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a39c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a39e:	460a      	mov	r2, r1
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	4803      	ldr	r0, [pc, #12]	@ (800a3b0 <SUBGRF_WriteCommand+0x1c>)
 800a3a4:	f7fc fd56 	bl	8006e54 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3a8:	f384 8810 	msr	PRIMASK, r4
}
 800a3ac:	bd10      	pop	{r4, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20000fc0 	.word	0x20000fc0

0800a3b4 <SUBGRF_SetSleep>:
{
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	f7fa fc70 	bl	8004ca0 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a3c0:	2002      	movs	r0, #2
 800a3c2:	f7ff ff41 	bl	800a248 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a3c6:	f004 0304 	and.w	r3, r4, #4
 800a3ca:	f004 0202 	and.w	r2, r4, #2
 800a3ce:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a3d0:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a3d4:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a3d6:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f10d 0107 	add.w	r1, sp, #7
 800a3e0:	2084      	movs	r0, #132	@ 0x84
 800a3e2:	f7ff ffd7 	bl	800a394 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a3e6:	4b02      	ldr	r3, [pc, #8]	@ (800a3f0 <SUBGRF_SetSleep+0x3c>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]
}
 800a3ec:	b002      	add	sp, #8
 800a3ee:	bd10      	pop	{r4, pc}
 800a3f0:	200059da 	.word	0x200059da

0800a3f4 <SUBGRF_SetStandby>:
{
 800a3f4:	b500      	push	{lr}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f10d 0107 	add.w	r1, sp, #7
 800a402:	2080      	movs	r0, #128	@ 0x80
 800a404:	f7ff ffc6 	bl	800a394 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a408:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a40c:	b92b      	cbnz	r3, 800a41a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800a40e:	4b05      	ldr	r3, [pc, #20]	@ (800a424 <SUBGRF_SetStandby+0x30>)
 800a410:	2201      	movs	r2, #1
 800a412:	701a      	strb	r2, [r3, #0]
}
 800a414:	b003      	add	sp, #12
 800a416:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800a41a:	4b02      	ldr	r3, [pc, #8]	@ (800a424 <SUBGRF_SetStandby+0x30>)
 800a41c:	2202      	movs	r2, #2
 800a41e:	701a      	strb	r2, [r3, #0]
}
 800a420:	e7f8      	b.n	800a414 <SUBGRF_SetStandby+0x20>
 800a422:	bf00      	nop
 800a424:	200059da 	.word	0x200059da

0800a428 <SUBGRF_SetTx>:
{
 800a428:	b500      	push	{lr}
 800a42a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800a42c:	4b0a      	ldr	r3, [pc, #40]	@ (800a458 <SUBGRF_SetTx+0x30>)
 800a42e:	2204      	movs	r2, #4
 800a430:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a432:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a436:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a43a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a43e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a442:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a446:	2203      	movs	r2, #3
 800a448:	a901      	add	r1, sp, #4
 800a44a:	2083      	movs	r0, #131	@ 0x83
 800a44c:	f7ff ffa2 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a450:	b003      	add	sp, #12
 800a452:	f85d fb04 	ldr.w	pc, [sp], #4
 800a456:	bf00      	nop
 800a458:	200059da 	.word	0x200059da

0800a45c <SUBGRF_SendPayload>:
{
 800a45c:	b510      	push	{r4, lr}
 800a45e:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800a460:	f7ff ff80 	bl	800a364 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a464:	4620      	mov	r0, r4
 800a466:	f7ff ffdf 	bl	800a428 <SUBGRF_SetTx>
}
 800a46a:	bd10      	pop	{r4, pc}

0800a46c <SUBGRF_SetRx>:
{
 800a46c:	b500      	push	{lr}
 800a46e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800a470:	4b0a      	ldr	r3, [pc, #40]	@ (800a49c <SUBGRF_SetRx+0x30>)
 800a472:	2205      	movs	r2, #5
 800a474:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a476:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a47a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a47e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a482:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a486:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a48a:	2203      	movs	r2, #3
 800a48c:	a901      	add	r1, sp, #4
 800a48e:	2082      	movs	r0, #130	@ 0x82
 800a490:	f7ff ff80 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a494:	b003      	add	sp, #12
 800a496:	f85d fb04 	ldr.w	pc, [sp], #4
 800a49a:	bf00      	nop
 800a49c:	200059da 	.word	0x200059da

0800a4a0 <SUBGRF_GetRandom>:
{
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	b082      	sub	sp, #8
    uint32_t number = 0;
 800a4a4:	2600      	movs	r6, #0
 800a4a6:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a4a8:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a4ac:	f7ff feb8 	bl	800a220 <SUBGRF_ReadRegister>
 800a4b0:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a4b2:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 800a4b6:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a4ba:	f7ff fe9d 	bl	800a1f8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a4be:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a4c2:	f7ff fead 	bl	800a220 <SUBGRF_ReadRegister>
 800a4c6:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a4c8:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 800a4cc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a4d0:	f7ff fe92 	bl	800a1f8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a4d4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800a4d8:	f7ff ffc8 	bl	800a46c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a4dc:	2204      	movs	r2, #4
 800a4de:	eb0d 0102 	add.w	r1, sp, r2
 800a4e2:	f640 0019 	movw	r0, #2073	@ 0x819
 800a4e6:	f7ff ff1d 	bl	800a324 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f7ff ff82 	bl	800a3f4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a4f6:	f7ff fe7f 	bl	800a1f8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a500:	f7ff fe7a 	bl	800a1f8 <SUBGRF_WriteRegister>
}
 800a504:	9801      	ldr	r0, [sp, #4]
 800a506:	b002      	add	sp, #8
 800a508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a50c <SUBGRF_SetRxBoosted>:
{
 800a50c:	b510      	push	{r4, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800a512:	4b0c      	ldr	r3, [pc, #48]	@ (800a544 <SUBGRF_SetRxBoosted+0x38>)
 800a514:	2205      	movs	r2, #5
 800a516:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a518:	2197      	movs	r1, #151	@ 0x97
 800a51a:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800a51e:	f7ff fe6b 	bl	800a1f8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a522:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800a526:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a52a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a52e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a532:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a536:	2203      	movs	r2, #3
 800a538:	a901      	add	r1, sp, #4
 800a53a:	2082      	movs	r0, #130	@ 0x82
 800a53c:	f7ff ff2a 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a540:	b002      	add	sp, #8
 800a542:	bd10      	pop	{r4, pc}
 800a544:	200059da 	.word	0x200059da

0800a548 <SUBGRF_SetRxDutyCycle>:
{
 800a548:	b500      	push	{lr}
 800a54a:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a54c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a550:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a554:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a558:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a55c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a560:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800a564:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a568:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a56c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a570:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a574:	2206      	movs	r2, #6
 800a576:	4669      	mov	r1, sp
 800a578:	2094      	movs	r0, #148	@ 0x94
 800a57a:	f7ff ff0b 	bl	800a394 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a57e:	4b03      	ldr	r3, [pc, #12]	@ (800a58c <SUBGRF_SetRxDutyCycle+0x44>)
 800a580:	2206      	movs	r2, #6
 800a582:	701a      	strb	r2, [r3, #0]
}
 800a584:	b003      	add	sp, #12
 800a586:	f85d fb04 	ldr.w	pc, [sp], #4
 800a58a:	bf00      	nop
 800a58c:	200059da 	.word	0x200059da

0800a590 <SUBGRF_SetCad>:
{
 800a590:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a592:	2200      	movs	r2, #0
 800a594:	4611      	mov	r1, r2
 800a596:	20c5      	movs	r0, #197	@ 0xc5
 800a598:	f7ff fefc 	bl	800a394 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a59c:	4b01      	ldr	r3, [pc, #4]	@ (800a5a4 <SUBGRF_SetCad+0x14>)
 800a59e:	2207      	movs	r2, #7
 800a5a0:	701a      	strb	r2, [r3, #0]
}
 800a5a2:	bd08      	pop	{r3, pc}
 800a5a4:	200059da 	.word	0x200059da

0800a5a8 <SUBGRF_SetTxContinuousWave>:
{
 800a5a8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	20d1      	movs	r0, #209	@ 0xd1
 800a5b0:	f7ff fef0 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a5b4:	bd08      	pop	{r3, pc}

0800a5b6 <SUBGRF_SetTxInfinitePreamble>:
{
 800a5b6:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	20d2      	movs	r0, #210	@ 0xd2
 800a5be:	f7ff fee9 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a5c2:	bd08      	pop	{r3, pc}

0800a5c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800a5c4:	b500      	push	{lr}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f10d 0107 	add.w	r1, sp, #7
 800a5d2:	209f      	movs	r0, #159	@ 0x9f
 800a5d4:	f7ff fede 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a5d8:	b003      	add	sp, #12
 800a5da:	f85d fb04 	ldr.w	pc, [sp], #4

0800a5de <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800a5de:	b500      	push	{lr}
 800a5e0:	b083      	sub	sp, #12
 800a5e2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f10d 0107 	add.w	r1, sp, #7
 800a5ec:	20a0      	movs	r0, #160	@ 0xa0
 800a5ee:	f7ff fed1 	bl	800a394 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800a5f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a5f6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a5f8:	d90f      	bls.n	800a61a <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800a5fa:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800a5fc:	2200      	movs	r2, #0
        while( mant > 31 )
 800a5fe:	e002      	b.n	800a606 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 800a600:	089b      	lsrs	r3, r3, #2
            exp++;
 800a602:	3201      	adds	r2, #1
 800a604:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 800a606:	2b1f      	cmp	r3, #31
 800a608:	d8fa      	bhi.n	800a600 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800a60a:	00d9      	lsls	r1, r3, #3
 800a60c:	b2c9      	uxtb	r1, r1
 800a60e:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a610:	b2c9      	uxtb	r1, r1
 800a612:	f240 7006 	movw	r0, #1798	@ 0x706
 800a616:	f7ff fdef 	bl	800a1f8 <SUBGRF_WriteRegister>
}
 800a61a:	b003      	add	sp, #12
 800a61c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a620 <SUBGRF_SetRegulatorMode>:
{
 800a620:	b500      	push	{lr}
 800a622:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a624:	f7fa fb48 	bl	8004cb8 <RBI_IsDCDC>
 800a628:	2801      	cmp	r0, #1
 800a62a:	d00b      	beq.n	800a644 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800a62c:	2300      	movs	r3, #0
 800a62e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a632:	2201      	movs	r2, #1
 800a634:	f10d 0107 	add.w	r1, sp, #7
 800a638:	2096      	movs	r0, #150	@ 0x96
 800a63a:	f7ff feab 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a63e:	b003      	add	sp, #12
 800a640:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800a644:	2301      	movs	r3, #1
 800a646:	f88d 3007 	strb.w	r3, [sp, #7]
 800a64a:	e7f2      	b.n	800a632 <SUBGRF_SetRegulatorMode+0x12>

0800a64c <SUBGRF_Calibrate>:
{
 800a64c:	b500      	push	{lr}
 800a64e:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a650:	f000 0340 	and.w	r3, r0, #64	@ 0x40
 800a654:	f000 0220 	and.w	r2, r0, #32
 800a658:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a65a:	f000 0210 	and.w	r2, r0, #16
 800a65e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a660:	f000 0208 	and.w	r2, r0, #8
 800a664:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a666:	f000 0204 	and.w	r2, r0, #4
 800a66a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a66c:	f000 0202 	and.w	r2, r0, #2
 800a670:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a672:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a676:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a678:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a67c:	2201      	movs	r2, #1
 800a67e:	f10d 0107 	add.w	r1, sp, #7
 800a682:	2089      	movs	r0, #137	@ 0x89
 800a684:	f7ff fe86 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a688:	b003      	add	sp, #12
 800a68a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a690 <SUBGRF_CalibrateImage>:
{
 800a690:	b500      	push	{lr}
 800a692:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800a694:	4b1f      	ldr	r3, [pc, #124]	@ (800a714 <SUBGRF_CalibrateImage+0x84>)
 800a696:	4298      	cmp	r0, r3
 800a698:	d90d      	bls.n	800a6b6 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800a69a:	23e1      	movs	r3, #225	@ 0xe1
 800a69c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800a6a0:	23e9      	movs	r3, #233	@ 0xe9
 800a6a2:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	a901      	add	r1, sp, #4
 800a6aa:	2098      	movs	r0, #152	@ 0x98
 800a6ac:	f7ff fe72 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a6b0:	b003      	add	sp, #12
 800a6b2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800a6b6:	4b18      	ldr	r3, [pc, #96]	@ (800a718 <SUBGRF_CalibrateImage+0x88>)
 800a6b8:	4298      	cmp	r0, r3
 800a6ba:	d906      	bls.n	800a6ca <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800a6bc:	23d7      	movs	r3, #215	@ 0xd7
 800a6be:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800a6c2:	23db      	movs	r3, #219	@ 0xdb
 800a6c4:	f88d 3005 	strb.w	r3, [sp, #5]
 800a6c8:	e7ed      	b.n	800a6a6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800a6ca:	4b14      	ldr	r3, [pc, #80]	@ (800a71c <SUBGRF_CalibrateImage+0x8c>)
 800a6cc:	4298      	cmp	r0, r3
 800a6ce:	d906      	bls.n	800a6de <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800a6d0:	23c1      	movs	r3, #193	@ 0xc1
 800a6d2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800a6d6:	23c5      	movs	r3, #197	@ 0xc5
 800a6d8:	f88d 3005 	strb.w	r3, [sp, #5]
 800a6dc:	e7e3      	b.n	800a6a6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800a6de:	4b10      	ldr	r3, [pc, #64]	@ (800a720 <SUBGRF_CalibrateImage+0x90>)
 800a6e0:	4298      	cmp	r0, r3
 800a6e2:	d906      	bls.n	800a6f2 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800a6e4:	2375      	movs	r3, #117	@ 0x75
 800a6e6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800a6ea:	2381      	movs	r3, #129	@ 0x81
 800a6ec:	f88d 3005 	strb.w	r3, [sp, #5]
 800a6f0:	e7d9      	b.n	800a6a6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800a6f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a724 <SUBGRF_CalibrateImage+0x94>)
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	d906      	bls.n	800a706 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 800a6f8:	236b      	movs	r3, #107	@ 0x6b
 800a6fa:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800a6fe:	236f      	movs	r3, #111	@ 0x6f
 800a700:	f88d 3005 	strb.w	r3, [sp, #5]
 800a704:	e7cf      	b.n	800a6a6 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 800a706:	2329      	movs	r3, #41	@ 0x29
 800a708:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 800a70c:	232b      	movs	r3, #43	@ 0x2b
 800a70e:	f88d 3005 	strb.w	r3, [sp, #5]
 800a712:	e7c8      	b.n	800a6a6 <SUBGRF_CalibrateImage+0x16>
 800a714:	35a4e900 	.word	0x35a4e900
 800a718:	32a9f880 	.word	0x32a9f880
 800a71c:	2de54480 	.word	0x2de54480
 800a720:	1b6b0b00 	.word	0x1b6b0b00
 800a724:	1954fc40 	.word	0x1954fc40

0800a728 <SUBGRF_SetPaConfig>:
{
 800a728:	b500      	push	{lr}
 800a72a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800a72c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800a730:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800a734:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800a738:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a73c:	2204      	movs	r2, #4
 800a73e:	eb0d 0102 	add.w	r1, sp, r2
 800a742:	2095      	movs	r0, #149	@ 0x95
 800a744:	f7ff fe26 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a748:	b003      	add	sp, #12
 800a74a:	f85d fb04 	ldr.w	pc, [sp], #4

0800a74e <SUBGRF_SetDioIrqParams>:
{
 800a74e:	b500      	push	{lr}
 800a750:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a752:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800a756:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a75a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a75e:	0a08      	lsrs	r0, r1, #8
 800a760:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a764:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a768:	0a11      	lsrs	r1, r2, #8
 800a76a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a76e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a772:	0a1a      	lsrs	r2, r3, #8
 800a774:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a778:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a77c:	2208      	movs	r2, #8
 800a77e:	4669      	mov	r1, sp
 800a780:	4610      	mov	r0, r2
 800a782:	f7ff fe07 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a786:	b003      	add	sp, #12
 800a788:	f85d fb04 	ldr.w	pc, [sp], #4

0800a78c <SUBGRF_SetTcxoMode>:
{
 800a78c:	b500      	push	{lr}
 800a78e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800a790:	f000 0007 	and.w	r0, r0, #7
 800a794:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a798:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800a79c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a7a0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a7a4:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a7a8:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	eb0d 0102 	add.w	r1, sp, r2
 800a7b2:	2097      	movs	r0, #151	@ 0x97
 800a7b4:	f7ff fdee 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a7b8:	b003      	add	sp, #12
 800a7ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a7c0 <SUBGRF_Init>:
{
 800a7c0:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800a7c2:	b108      	cbz	r0, 800a7c8 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800a7c4:	4a18      	ldr	r2, [pc, #96]	@ (800a828 <SUBGRF_Init+0x68>)
 800a7c6:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800a7c8:	f7f8 fc18 	bl	8002ffc <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a7cc:	2002      	movs	r0, #2
 800a7ce:	f7ff fd3b 	bl	800a248 <Radio_SMPS_Set>
    ImageCalibrated = false;
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	4b15      	ldr	r3, [pc, #84]	@ (800a82c <SUBGRF_Init+0x6c>)
 800a7d6:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800a7d8:	f7ff fe0c 	bl	800a3f4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800a7dc:	f7fa fa68 	bl	8004cb0 <RBI_IsTCXO>
 800a7e0:	2801      	cmp	r0, #1
 800a7e2:	d014      	beq.n	800a80e <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a7e4:	2120      	movs	r1, #32
 800a7e6:	f640 1011 	movw	r0, #2321	@ 0x911
 800a7ea:	f7ff fd05 	bl	800a1f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a7ee:	2120      	movs	r1, #32
 800a7f0:	f640 1012 	movw	r0, #2322	@ 0x912
 800a7f4:	f7ff fd00 	bl	800a1f8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a7f8:	210e      	movs	r1, #14
 800a7fa:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a7fe:	f7ff fcfb 	bl	800a1f8 <SUBGRF_WriteRegister>
    RBI_Init();
 800a802:	f7fa fa49 	bl	8004c98 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800a806:	4b0a      	ldr	r3, [pc, #40]	@ (800a830 <SUBGRF_Init+0x70>)
 800a808:	2201      	movs	r2, #1
 800a80a:	701a      	strb	r2, [r3, #0]
}
 800a80c:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a80e:	2140      	movs	r1, #64	@ 0x40
 800a810:	f7ff ffbc 	bl	800a78c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800a814:	2100      	movs	r1, #0
 800a816:	f640 1011 	movw	r0, #2321	@ 0x911
 800a81a:	f7ff fced 	bl	800a1f8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 800a81e:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 800a822:	f7ff ff13 	bl	800a64c <SUBGRF_Calibrate>
 800a826:	e7e7      	b.n	800a7f8 <SUBGRF_Init+0x38>
 800a828:	200059cc 	.word	0x200059cc
 800a82c:	200059d0 	.word	0x200059d0
 800a830:	200059da 	.word	0x200059da

0800a834 <SUBGRF_SetRfFrequency>:
{
 800a834:	b510      	push	{r4, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800a83a:	4b12      	ldr	r3, [pc, #72]	@ (800a884 <SUBGRF_SetRfFrequency+0x50>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b1d3      	cbz	r3, 800a876 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a840:	4a11      	ldr	r2, [pc, #68]	@ (800a888 <SUBGRF_SetRfFrequency+0x54>)
 800a842:	2300      	movs	r3, #0
 800a844:	0660      	lsls	r0, r4, #25
 800a846:	09e1      	lsrs	r1, r4, #7
 800a848:	f7f6 fbe4 	bl	8001014 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a84c:	0e03      	lsrs	r3, r0, #24
 800a84e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a852:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a856:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a85a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a85e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a862:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a866:	2204      	movs	r2, #4
 800a868:	eb0d 0102 	add.w	r1, sp, r2
 800a86c:	2086      	movs	r0, #134	@ 0x86
 800a86e:	f7ff fd91 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a872:	b002      	add	sp, #8
 800a874:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800a876:	f7ff ff0b 	bl	800a690 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a87a:	4b02      	ldr	r3, [pc, #8]	@ (800a884 <SUBGRF_SetRfFrequency+0x50>)
 800a87c:	2201      	movs	r2, #1
 800a87e:	701a      	strb	r2, [r3, #0]
 800a880:	e7de      	b.n	800a840 <SUBGRF_SetRfFrequency+0xc>
 800a882:	bf00      	nop
 800a884:	200059d0 	.word	0x200059d0
 800a888:	01e84800 	.word	0x01e84800

0800a88c <SUBGRF_SetPacketType>:
{
 800a88c:	b500      	push	{lr}
 800a88e:	b083      	sub	sp, #12
 800a890:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800a894:	b2c3      	uxtb	r3, r0
 800a896:	4a09      	ldr	r2, [pc, #36]	@ (800a8bc <SUBGRF_SetPacketType+0x30>)
 800a898:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800a89a:	b143      	cbz	r3, 800a8ae <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a89c:	2201      	movs	r2, #1
 800a89e:	f10d 0107 	add.w	r1, sp, #7
 800a8a2:	208a      	movs	r0, #138	@ 0x8a
 800a8a4:	f7ff fd76 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a8a8:	b003      	add	sp, #12
 800a8aa:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800a8b4:	f7ff fca0 	bl	800a1f8 <SUBGRF_WriteRegister>
 800a8b8:	e7f0      	b.n	800a89c <SUBGRF_SetPacketType+0x10>
 800a8ba:	bf00      	nop
 800a8bc:	200059d9 	.word	0x200059d9

0800a8c0 <SUBGRF_SetTxParams>:
{
 800a8c0:	b570      	push	{r4, r5, r6, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 800a8c8:	2801      	cmp	r0, #1
 800a8ca:	d035      	beq.n	800a938 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a8cc:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800a8d0:	f7ff fca6 	bl	800a220 <SUBGRF_ReadRegister>
 800a8d4:	f040 011e 	orr.w	r1, r0, #30
 800a8d8:	b2c9      	uxtb	r1, r1
 800a8da:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800a8de:	f7ff fc8b 	bl	800a1f8 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	f7fa f9ec 	bl	8004cc0 <RBI_GetRFOMaxPowerConfig>
 800a8e8:	4605      	mov	r5, r0
        if (power > max_power)
 800a8ea:	4284      	cmp	r4, r0
 800a8ec:	dd00      	ble.n	800a8f0 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 800a8ee:	b244      	sxtb	r4, r0
        if (max_power == 20)
 800a8f0:	2d14      	cmp	r5, #20
 800a8f2:	d054      	beq.n	800a99e <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 800a8f4:	2d11      	cmp	r5, #17
 800a8f6:	d05c      	beq.n	800a9b2 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 800a8f8:	2d0e      	cmp	r5, #14
 800a8fa:	d064      	beq.n	800a9c6 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	2200      	movs	r2, #0
 800a900:	2107      	movs	r1, #7
 800a902:	2004      	movs	r0, #4
 800a904:	f7ff ff10 	bl	800a728 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a908:	1b64      	subs	r4, r4, r5
 800a90a:	3416      	adds	r4, #22
 800a90c:	b265      	sxtb	r5, r4
        if (power < -9)
 800a90e:	f115 0f09 	cmn.w	r5, #9
 800a912:	da01      	bge.n	800a918 <SUBGRF_SetTxParams+0x58>
            power = -9;
 800a914:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a918:	2138      	movs	r1, #56	@ 0x38
 800a91a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800a91e:	f7ff fc6b 	bl	800a1f8 <SUBGRF_WriteRegister>
    buf[0] = power;
 800a922:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800a926:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a92a:	2202      	movs	r2, #2
 800a92c:	a901      	add	r1, sp, #4
 800a92e:	208e      	movs	r0, #142	@ 0x8e
 800a930:	f7ff fd30 	bl	800a394 <SUBGRF_WriteCommand>
}
 800a934:	b002      	add	sp, #8
 800a936:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a938:	2000      	movs	r0, #0
 800a93a:	f7fa f9c1 	bl	8004cc0 <RBI_GetRFOMaxPowerConfig>
 800a93e:	4605      	mov	r5, r0
        if (power >  max_power)
 800a940:	4284      	cmp	r4, r0
 800a942:	dd00      	ble.n	800a946 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 800a944:	b244      	sxtb	r4, r0
        if (max_power == 14)
 800a946:	2d0e      	cmp	r5, #14
 800a948:	d015      	beq.n	800a976 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 800a94a:	2d0a      	cmp	r5, #10
 800a94c:	d01d      	beq.n	800a98a <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a94e:	2301      	movs	r3, #1
 800a950:	461a      	mov	r2, r3
 800a952:	2100      	movs	r1, #0
 800a954:	2007      	movs	r0, #7
 800a956:	f7ff fee7 	bl	800a728 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a95a:	1b65      	subs	r5, r4, r5
 800a95c:	350e      	adds	r5, #14
 800a95e:	b26d      	sxtb	r5, r5
        if (power < -17)
 800a960:	f115 0f11 	cmn.w	r5, #17
 800a964:	da01      	bge.n	800a96a <SUBGRF_SetTxParams+0xaa>
            power = -17;
 800a966:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a96a:	2118      	movs	r1, #24
 800a96c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800a970:	f7ff fc42 	bl	800a1f8 <SUBGRF_WriteRegister>
 800a974:	e7d5      	b.n	800a922 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a976:	2301      	movs	r3, #1
 800a978:	461a      	mov	r2, r3
 800a97a:	2100      	movs	r1, #0
 800a97c:	2004      	movs	r0, #4
 800a97e:	f7ff fed3 	bl	800a728 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a982:	1b65      	subs	r5, r4, r5
 800a984:	350e      	adds	r5, #14
 800a986:	b26d      	sxtb	r5, r5
 800a988:	e7ea      	b.n	800a960 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a98a:	2301      	movs	r3, #1
 800a98c:	461a      	mov	r2, r3
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff fec9 	bl	800a728 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a996:	1b65      	subs	r5, r4, r5
 800a998:	350d      	adds	r5, #13
 800a99a:	b26d      	sxtb	r5, r5
 800a99c:	e7e0      	b.n	800a960 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a99e:	2301      	movs	r3, #1
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2105      	movs	r1, #5
 800a9a4:	2003      	movs	r0, #3
 800a9a6:	f7ff febf 	bl	800a728 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a9aa:	1b65      	subs	r5, r4, r5
 800a9ac:	3516      	adds	r5, #22
 800a9ae:	b26d      	sxtb	r5, r5
 800a9b0:	e7ad      	b.n	800a90e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2103      	movs	r1, #3
 800a9b8:	2002      	movs	r0, #2
 800a9ba:	f7ff feb5 	bl	800a728 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a9be:	1b65      	subs	r5, r4, r5
 800a9c0:	3516      	adds	r5, #22
 800a9c2:	b26d      	sxtb	r5, r5
 800a9c4:	e7a3      	b.n	800a90e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	2102      	movs	r1, #2
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	f7ff feab 	bl	800a728 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a9d2:	1b65      	subs	r5, r4, r5
 800a9d4:	350e      	adds	r5, #14
 800a9d6:	b26d      	sxtb	r5, r5
 800a9d8:	e799      	b.n	800a90e <SUBGRF_SetTxParams+0x4e>
	...

0800a9dc <SUBGRF_SetModulationParams>:
{
 800a9dc:	b510      	push	{r4, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	9301      	str	r3, [sp, #4]
    if( PacketType != modulationParams->PacketType )
 800a9e8:	7800      	ldrb	r0, [r0, #0]
 800a9ea:	4b3a      	ldr	r3, [pc, #232]	@ (800aad4 <SUBGRF_SetModulationParams+0xf8>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	4298      	cmp	r0, r3
 800a9f0:	d106      	bne.n	800aa00 <SUBGRF_SetModulationParams+0x24>
    switch( modulationParams->PacketType )
 800a9f2:	7823      	ldrb	r3, [r4, #0]
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d82c      	bhi.n	800aa52 <SUBGRF_SetModulationParams+0x76>
 800a9f8:	e8df f003 	tbb	[pc, r3]
 800a9fc:	542d4205 	.word	0x542d4205
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800aa00:	f7ff ff44 	bl	800a88c <SUBGRF_SetPacketType>
 800aa04:	e7f5      	b.n	800a9f2 <SUBGRF_SetModulationParams+0x16>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800aa06:	6862      	ldr	r2, [r4, #4]
 800aa08:	4b33      	ldr	r3, [pc, #204]	@ (800aad8 <SUBGRF_SetModulationParams+0xfc>)
 800aa0a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aa0e:	0c1a      	lsrs	r2, r3, #16
 800aa10:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aa14:	0a1a      	lsrs	r2, r3, #8
 800aa16:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800aa1a:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800aa1e:	7b23      	ldrb	r3, [r4, #12]
 800aa20:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800aa24:	7b63      	ldrb	r3, [r4, #13]
 800aa26:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800aa2a:	68a1      	ldr	r1, [r4, #8]
 800aa2c:	4a2b      	ldr	r2, [pc, #172]	@ (800aadc <SUBGRF_SetModulationParams+0x100>)
 800aa2e:	2300      	movs	r3, #0
 800aa30:	0648      	lsls	r0, r1, #25
 800aa32:	09c9      	lsrs	r1, r1, #7
 800aa34:	f7f6 faee 	bl	8001014 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800aa38:	0c03      	lsrs	r3, r0, #16
 800aa3a:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800aa3e:	0a03      	lsrs	r3, r0, #8
 800aa40:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800aa44:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa48:	2208      	movs	r2, #8
 800aa4a:	4669      	mov	r1, sp
 800aa4c:	208b      	movs	r0, #139	@ 0x8b
 800aa4e:	f7ff fca1 	bl	800a394 <SUBGRF_WriteCommand>
}
 800aa52:	b002      	add	sp, #8
 800aa54:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800aa56:	6922      	ldr	r2, [r4, #16]
 800aa58:	4b1f      	ldr	r3, [pc, #124]	@ (800aad8 <SUBGRF_SetModulationParams+0xfc>)
 800aa5a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aa5e:	0c1a      	lsrs	r2, r3, #16
 800aa60:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aa64:	0a1a      	lsrs	r2, r3, #8
 800aa66:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800aa6a:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800aa6e:	7d23      	ldrb	r3, [r4, #20]
 800aa70:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa74:	2204      	movs	r2, #4
 800aa76:	4669      	mov	r1, sp
 800aa78:	208b      	movs	r0, #139	@ 0x8b
 800aa7a:	f7ff fc8b 	bl	800a394 <SUBGRF_WriteCommand>
        break;
 800aa7e:	e7e8      	b.n	800aa52 <SUBGRF_SetModulationParams+0x76>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800aa80:	7e23      	ldrb	r3, [r4, #24]
 800aa82:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800aa86:	7e63      	ldrb	r3, [r4, #25]
 800aa88:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800aa8c:	7ea3      	ldrb	r3, [r4, #26]
 800aa8e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800aa92:	7ee3      	ldrb	r3, [r4, #27]
 800aa94:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa98:	2204      	movs	r2, #4
 800aa9a:	4669      	mov	r1, sp
 800aa9c:	208b      	movs	r0, #139	@ 0x8b
 800aa9e:	f7ff fc79 	bl	800a394 <SUBGRF_WriteCommand>
        break;
 800aaa2:	e7d6      	b.n	800aa52 <SUBGRF_SetModulationParams+0x76>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800aaa4:	6862      	ldr	r2, [r4, #4]
 800aaa6:	4b0c      	ldr	r3, [pc, #48]	@ (800aad8 <SUBGRF_SetModulationParams+0xfc>)
 800aaa8:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aaac:	0c1a      	lsrs	r2, r3, #16
 800aaae:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aab2:	0a1a      	lsrs	r2, r3, #8
 800aab4:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800aab8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800aabc:	7b23      	ldrb	r3, [r4, #12]
 800aabe:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800aac2:	7b63      	ldrb	r3, [r4, #13]
 800aac4:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aac8:	2205      	movs	r2, #5
 800aaca:	4669      	mov	r1, sp
 800aacc:	208b      	movs	r0, #139	@ 0x8b
 800aace:	f7ff fc61 	bl	800a394 <SUBGRF_WriteCommand>
}
 800aad2:	e7be      	b.n	800aa52 <SUBGRF_SetModulationParams+0x76>
 800aad4:	200059d9 	.word	0x200059d9
 800aad8:	3d090000 	.word	0x3d090000
 800aadc:	01e84800 	.word	0x01e84800

0800aae0 <SUBGRF_SetPacketParams>:
{
 800aae0:	b510      	push	{r4, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800aae6:	2300      	movs	r3, #0
 800aae8:	9301      	str	r3, [sp, #4]
 800aaea:	9302      	str	r3, [sp, #8]
 800aaec:	f88d 300c 	strb.w	r3, [sp, #12]
    if( PacketType != packetParams->PacketType )
 800aaf0:	7800      	ldrb	r0, [r0, #0]
 800aaf2:	4b31      	ldr	r3, [pc, #196]	@ (800abb8 <SUBGRF_SetPacketParams+0xd8>)
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	4298      	cmp	r0, r3
 800aaf8:	d106      	bne.n	800ab08 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 800aafa:	7823      	ldrb	r3, [r4, #0]
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d82a      	bhi.n	800ab56 <SUBGRF_SetPacketParams+0x76>
 800ab00:	e8df f003 	tbb	[pc, r3]
 800ab04:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 800ab08:	f7ff fec0 	bl	800a88c <SUBGRF_SetPacketType>
 800ab0c:	e7f5      	b.n	800aafa <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800ab0e:	7a63      	ldrb	r3, [r4, #9]
 800ab10:	2bf1      	cmp	r3, #241	@ 0xf1
 800ab12:	d022      	beq.n	800ab5a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800ab14:	2bf2      	cmp	r3, #242	@ 0xf2
 800ab16:	d02a      	beq.n	800ab6e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800ab18:	8862      	ldrh	r2, [r4, #2]
 800ab1a:	0a11      	lsrs	r1, r2, #8
 800ab1c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800ab20:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800ab24:	7922      	ldrb	r2, [r4, #4]
 800ab26:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800ab2a:	7962      	ldrb	r2, [r4, #5]
 800ab2c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800ab30:	79a2      	ldrb	r2, [r4, #6]
 800ab32:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800ab36:	79e2      	ldrb	r2, [r4, #7]
 800ab38:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800ab3c:	7a22      	ldrb	r2, [r4, #8]
 800ab3e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800ab42:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800ab46:	7aa3      	ldrb	r3, [r4, #10]
 800ab48:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800ab4c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800ab4e:	a901      	add	r1, sp, #4
 800ab50:	208c      	movs	r0, #140	@ 0x8c
 800ab52:	f7ff fc1f 	bl	800a394 <SUBGRF_WriteCommand>
}
 800ab56:	b004      	add	sp, #16
 800ab58:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800ab5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800ab5e:	f7ff fbb8 	bl	800a2d2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800ab62:	f248 0005 	movw	r0, #32773	@ 0x8005
 800ab66:	f7ff fbc8 	bl	800a2fa <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	e7d4      	b.n	800ab18 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800ab6e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800ab72:	f7ff fbae 	bl	800a2d2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800ab76:	f241 0021 	movw	r0, #4129	@ 0x1021
 800ab7a:	f7ff fbbe 	bl	800a2fa <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800ab7e:	2306      	movs	r3, #6
 800ab80:	e7ca      	b.n	800ab18 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800ab82:	7b23      	ldrb	r3, [r4, #12]
 800ab84:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 800ab88:	2201      	movs	r2, #1
        break;
 800ab8a:	e7e0      	b.n	800ab4e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800ab8c:	89e3      	ldrh	r3, [r4, #14]
 800ab8e:	0a1a      	lsrs	r2, r3, #8
 800ab90:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800ab94:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800ab98:	7c23      	ldrb	r3, [r4, #16]
 800ab9a:	4a08      	ldr	r2, [pc, #32]	@ (800abbc <SUBGRF_SetPacketParams+0xdc>)
 800ab9c:	7013      	strb	r3, [r2, #0]
 800ab9e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800aba2:	7c63      	ldrb	r3, [r4, #17]
 800aba4:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800aba8:	7ca3      	ldrb	r3, [r4, #18]
 800abaa:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800abae:	7ce3      	ldrb	r3, [r4, #19]
 800abb0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 800abb4:	2206      	movs	r2, #6
        break;
 800abb6:	e7ca      	b.n	800ab4e <SUBGRF_SetPacketParams+0x6e>
 800abb8:	200059d9 	.word	0x200059d9
 800abbc:	200059d8 	.word	0x200059d8

0800abc0 <SUBGRF_SetBufferBaseAddress>:
{
 800abc0:	b500      	push	{lr}
 800abc2:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800abc4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800abc8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800abcc:	2202      	movs	r2, #2
 800abce:	a901      	add	r1, sp, #4
 800abd0:	208f      	movs	r0, #143	@ 0x8f
 800abd2:	f7ff fbdf 	bl	800a394 <SUBGRF_WriteCommand>
}
 800abd6:	b003      	add	sp, #12
 800abd8:	f85d fb04 	ldr.w	pc, [sp], #4

0800abdc <SUBGRF_ReadCommand>:
{
 800abdc:	b510      	push	{r4, lr}
 800abde:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abe0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800abe4:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800abe6:	460a      	mov	r2, r1
 800abe8:	4601      	mov	r1, r0
 800abea:	4803      	ldr	r0, [pc, #12]	@ (800abf8 <SUBGRF_ReadCommand+0x1c>)
 800abec:	f7fc f988 	bl	8006f00 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abf0:	f384 8810 	msr	PRIMASK, r4
}
 800abf4:	bd10      	pop	{r4, pc}
 800abf6:	bf00      	nop
 800abf8:	20000fc0 	.word	0x20000fc0

0800abfc <SUBGRF_GetRssiInst>:
{
 800abfc:	b500      	push	{lr}
 800abfe:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800ac00:	2201      	movs	r2, #1
 800ac02:	a901      	add	r1, sp, #4
 800ac04:	2015      	movs	r0, #21
 800ac06:	f7ff ffe9 	bl	800abdc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800ac0a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800ac0e:	4240      	negs	r0, r0
}
 800ac10:	1040      	asrs	r0, r0, #1
 800ac12:	b003      	add	sp, #12
 800ac14:	f85d fb04 	ldr.w	pc, [sp], #4

0800ac18 <SUBGRF_GetRxBufferStatus>:
{
 800ac18:	b530      	push	{r4, r5, lr}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ac20:	2202      	movs	r2, #2
 800ac22:	a901      	add	r1, sp, #4
 800ac24:	2013      	movs	r0, #19
 800ac26:	f7ff ffd9 	bl	800abdc <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ac2a:	f7ff fadf 	bl	800a1ec <SUBGRF_GetPacketType>
 800ac2e:	2801      	cmp	r0, #1
 800ac30:	d007      	beq.n	800ac42 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800ac32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ac36:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800ac38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ac3c:	7023      	strb	r3, [r4, #0]
}
 800ac3e:	b003      	add	sp, #12
 800ac40:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ac42:	4b05      	ldr	r3, [pc, #20]	@ (800ac58 <SUBGRF_GetRxBufferStatus+0x40>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d1f2      	bne.n	800ac32 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ac4c:	f240 7002 	movw	r0, #1794	@ 0x702
 800ac50:	f7ff fae6 	bl	800a220 <SUBGRF_ReadRegister>
 800ac54:	7028      	strb	r0, [r5, #0]
 800ac56:	e7ef      	b.n	800ac38 <SUBGRF_GetRxBufferStatus+0x20>
 800ac58:	200059d8 	.word	0x200059d8

0800ac5c <SUBGRF_GetPayload>:
{
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	4606      	mov	r6, r0
 800ac62:	460c      	mov	r4, r1
 800ac64:	4615      	mov	r5, r2
    uint8_t offset = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 800ac6c:	f10d 0107 	add.w	r1, sp, #7
 800ac70:	4620      	mov	r0, r4
 800ac72:	f7ff ffd1 	bl	800ac18 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800ac76:	7822      	ldrb	r2, [r4, #0]
 800ac78:	42aa      	cmp	r2, r5
 800ac7a:	d902      	bls.n	800ac82 <SUBGRF_GetPayload+0x26>
        return 1;
 800ac7c:	2001      	movs	r0, #1
}
 800ac7e:	b002      	add	sp, #8
 800ac80:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800ac82:	4631      	mov	r1, r6
 800ac84:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ac88:	f7ff fb74 	bl	800a374 <SUBGRF_ReadBuffer>
    return 0;
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	e7f6      	b.n	800ac7e <SUBGRF_GetPayload+0x22>

0800ac90 <SUBGRF_GetPacketStatus>:
{
 800ac90:	b510      	push	{r4, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800ac96:	2203      	movs	r2, #3
 800ac98:	a901      	add	r1, sp, #4
 800ac9a:	2014      	movs	r0, #20
 800ac9c:	f7ff ff9e 	bl	800abdc <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800aca0:	f7ff faa4 	bl	800a1ec <SUBGRF_GetPacketType>
 800aca4:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800aca6:	b148      	cbz	r0, 800acbc <SUBGRF_GetPacketStatus+0x2c>
 800aca8:	2801      	cmp	r0, #1
 800acaa:	d018      	beq.n	800acde <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800acac:	2214      	movs	r2, #20
 800acae:	2100      	movs	r1, #0
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 fb22 	bl	800b2fa <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800acb6:	230f      	movs	r3, #15
 800acb8:	7023      	strb	r3, [r4, #0]
}
 800acba:	e00e      	b.n	800acda <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800acbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800acc0:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800acc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800acc6:	425b      	negs	r3, r3
 800acc8:	105b      	asrs	r3, r3, #1
 800acca:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800accc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800acd0:	425b      	negs	r3, r3
 800acd2:	105b      	asrs	r3, r3, #1
 800acd4:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60a3      	str	r3, [r4, #8]
}
 800acda:	b002      	add	sp, #8
 800acdc:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800acde:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ace2:	425b      	negs	r3, r3
 800ace4:	105b      	asrs	r3, r3, #1
 800ace6:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800ace8:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800acec:	3302      	adds	r3, #2
 800acee:	109b      	asrs	r3, r3, #2
 800acf0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800acf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800acf6:	425b      	negs	r3, r3
 800acf8:	105b      	asrs	r3, r3, #1
 800acfa:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800acfc:	4b01      	ldr	r3, [pc, #4]	@ (800ad04 <SUBGRF_GetPacketStatus+0x74>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6123      	str	r3, [r4, #16]
            break;
 800ad02:	e7ea      	b.n	800acda <SUBGRF_GetPacketStatus+0x4a>
 800ad04:	200059d4 	.word	0x200059d4

0800ad08 <SUBGRF_SetSwitch>:
{
 800ad08:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 800ad0a:	2901      	cmp	r1, #1
 800ad0c:	d003      	beq.n	800ad16 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ad0e:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 800ad10:	f7f9 ffc6 	bl	8004ca0 <RBI_ConfigRFSwitch>
}
 800ad14:	bd10      	pop	{r4, pc}
 800ad16:	4604      	mov	r4, r0
 800ad18:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 800ad1a:	2c01      	cmp	r4, #1
 800ad1c:	d003      	beq.n	800ad26 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 800ad1e:	2c02      	cmp	r4, #2
 800ad20:	d1f6      	bne.n	800ad10 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 800ad22:	2003      	movs	r0, #3
 800ad24:	e7f4      	b.n	800ad10 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800ad26:	2004      	movs	r0, #4
 800ad28:	f7ff fa8e 	bl	800a248 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 800ad2c:	2002      	movs	r0, #2
 800ad2e:	e7f6      	b.n	800ad1e <SUBGRF_SetSwitch+0x16>

0800ad30 <SUBGRF_SetRfTxPower>:
{
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 800ad34:	f7f9 ffb8 	bl	8004ca8 <RBI_GetTxConfig>
    switch (TxConfig)
 800ad38:	b148      	cbz	r0, 800ad4e <SUBGRF_SetRfTxPower+0x1e>
 800ad3a:	2802      	cmp	r0, #2
 800ad3c:	d10d      	bne.n	800ad5a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 800ad3e:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800ad40:	2202      	movs	r2, #2
 800ad42:	4621      	mov	r1, r4
 800ad44:	4628      	mov	r0, r5
 800ad46:	f7ff fdbb 	bl	800a8c0 <SUBGRF_SetTxParams>
}
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 800ad4e:	2c0f      	cmp	r4, #15
 800ad50:	dc01      	bgt.n	800ad56 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 800ad52:	2501      	movs	r5, #1
 800ad54:	e7f4      	b.n	800ad40 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 800ad56:	2502      	movs	r5, #2
 800ad58:	e7f2      	b.n	800ad40 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 800ad5a:	2501      	movs	r5, #1
 800ad5c:	e7f0      	b.n	800ad40 <SUBGRF_SetRfTxPower+0x10>

0800ad5e <SUBGRF_GetRadioWakeUpTime>:
}
 800ad5e:	2001      	movs	r0, #1
 800ad60:	4770      	bx	lr
	...

0800ad64 <HAL_SUBGHZ_TxCpltCallback>:
{
 800ad64:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800ad66:	4b02      	ldr	r3, [pc, #8]	@ (800ad70 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	4798      	blx	r3
}
 800ad6e:	bd08      	pop	{r3, pc}
 800ad70:	200059cc 	.word	0x200059cc

0800ad74 <HAL_SUBGHZ_RxCpltCallback>:
{
 800ad74:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800ad76:	4b02      	ldr	r3, [pc, #8]	@ (800ad80 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2002      	movs	r0, #2
 800ad7c:	4798      	blx	r3
}
 800ad7e:	bd08      	pop	{r3, pc}
 800ad80:	200059cc 	.word	0x200059cc

0800ad84 <HAL_SUBGHZ_CRCErrorCallback>:
{
 800ad84:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800ad86:	4b02      	ldr	r3, [pc, #8]	@ (800ad90 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2040      	movs	r0, #64	@ 0x40
 800ad8c:	4798      	blx	r3
}
 800ad8e:	bd08      	pop	{r3, pc}
 800ad90:	200059cc 	.word	0x200059cc

0800ad94 <HAL_SUBGHZ_CADStatusCallback>:
{
 800ad94:	b508      	push	{r3, lr}
    switch (cadstatus)
 800ad96:	b139      	cbz	r1, 800ada8 <HAL_SUBGHZ_CADStatusCallback+0x14>
 800ad98:	2901      	cmp	r1, #1
 800ad9a:	d109      	bne.n	800adb0 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800ad9c:	4b05      	ldr	r3, [pc, #20]	@ (800adb4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ada4:	4798      	blx	r3
}
 800ada6:	e003      	b.n	800adb0 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800ada8:	4b02      	ldr	r3, [pc, #8]	@ (800adb4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2080      	movs	r0, #128	@ 0x80
 800adae:	4798      	blx	r3
}
 800adb0:	bd08      	pop	{r3, pc}
 800adb2:	bf00      	nop
 800adb4:	200059cc 	.word	0x200059cc

0800adb8 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 800adb8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800adba:	4b03      	ldr	r3, [pc, #12]	@ (800adc8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800adc2:	4798      	blx	r3
}
 800adc4:	bd08      	pop	{r3, pc}
 800adc6:	bf00      	nop
 800adc8:	200059cc 	.word	0x200059cc

0800adcc <HAL_SUBGHZ_HeaderErrorCallback>:
{
 800adcc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800adce:	4b02      	ldr	r3, [pc, #8]	@ (800add8 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2020      	movs	r0, #32
 800add4:	4798      	blx	r3
}
 800add6:	bd08      	pop	{r3, pc}
 800add8:	200059cc 	.word	0x200059cc

0800addc <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 800addc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800adde:	4b02      	ldr	r3, [pc, #8]	@ (800ade8 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2004      	movs	r0, #4
 800ade4:	4798      	blx	r3
}
 800ade6:	bd08      	pop	{r3, pc}
 800ade8:	200059cc 	.word	0x200059cc

0800adec <HAL_SUBGHZ_SyncWordValidCallback>:
{
 800adec:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800adee:	4b02      	ldr	r3, [pc, #8]	@ (800adf8 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2008      	movs	r0, #8
 800adf4:	4798      	blx	r3
}
 800adf6:	bd08      	pop	{r3, pc}
 800adf8:	200059cc 	.word	0x200059cc

0800adfc <HAL_SUBGHZ_HeaderValidCallback>:
{
 800adfc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800adfe:	4b02      	ldr	r3, [pc, #8]	@ (800ae08 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2010      	movs	r0, #16
 800ae04:	4798      	blx	r3
}
 800ae06:	bd08      	pop	{r3, pc}
 800ae08:	200059cc 	.word	0x200059cc

0800ae0c <HAL_SUBGHZ_LrFhssHopCallback>:
{
 800ae0c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800ae0e:	4b03      	ldr	r3, [pc, #12]	@ (800ae1c <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ae16:	4798      	blx	r3
}
 800ae18:	bd08      	pop	{r3, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200059cc 	.word	0x200059cc

0800ae20 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 800ae20:	4601      	mov	r1, r0
 800ae22:	b180      	cbz	r0, 800ae46 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ae24:	2300      	movs	r3, #0
 800ae26:	2b15      	cmp	r3, #21
 800ae28:	d80c      	bhi.n	800ae44 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800ae2a:	4a08      	ldr	r2, [pc, #32]	@ (800ae4c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800ae2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ae30:	428a      	cmp	r2, r1
 800ae32:	d802      	bhi.n	800ae3a <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ae34:	3301      	adds	r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	e7f5      	b.n	800ae26 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 800ae3a:	4a04      	ldr	r2, [pc, #16]	@ (800ae4c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800ae3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae40:	7918      	ldrb	r0, [r3, #4]
 800ae42:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 800ae44:	e7fe      	b.n	800ae44 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 800ae46:	201f      	movs	r0, #31
}
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	08010c0c 	.word	0x08010c0c

0800ae50 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	4605      	mov	r5, r0
 800ae56:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 800ae58:	4b1d      	ldr	r3, [pc, #116]	@ (800aed0 <SUBGRF_GetCFO+0x80>)
 800ae5a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800ae5c:	f640 0007 	movw	r0, #2055	@ 0x807
 800ae60:	f7ff f9de 	bl	800a220 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800ae64:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 800ae68:	3308      	adds	r3, #8
 800ae6a:	446b      	add	r3, sp
 800ae6c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 800ae70:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800ae74:	3301      	adds	r3, #1
 800ae76:	409a      	lsls	r2, r3
 800ae78:	4b16      	ldr	r3, [pc, #88]	@ (800aed4 <SUBGRF_GetCFO+0x84>)
 800ae7a:	fbb3 f3f2 	udiv	r3, r3, r2
  uint32_t cf_osr = cf_fs / bitRate;
 800ae7e:	fbb3 f0f5 	udiv	r0, r3, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800ae82:	2807      	cmp	r0, #7
 800ae84:	d804      	bhi.n	800ae90 <SUBGRF_GetCFO+0x40>
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800ae86:	0040      	lsls	r0, r0, #1
 800ae88:	2803      	cmp	r0, #3
 800ae8a:	d91e      	bls.n	800aeca <SUBGRF_GetCFO+0x7a>
 800ae8c:	2502      	movs	r5, #2
 800ae8e:	e000      	b.n	800ae92 <SUBGRF_GetCFO+0x42>
  uint8_t interp = 1;
 800ae90:	2501      	movs	r5, #1
  {
    interp = 4;
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800ae92:	fb03 f505 	mul.w	r5, r3, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800ae96:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800ae9a:	f7ff f9c1 	bl	800a220 <SUBGRF_ReadRegister>
 800ae9e:	0206      	lsls	r6, r0, #8
 800aea0:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800aea4:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800aea8:	f7ff f9ba 	bl	800a220 <SUBGRF_ReadRegister>
 800aeac:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800aeae:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800aeb2:	d003      	beq.n	800aebc <SUBGRF_GetCFO+0x6c>
  {
    cfo_bin |= 0xFFFFF000;
 800aeb4:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 800aeb8:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800aebc:	096d      	lsrs	r5, r5, #5
 800aebe:	fb05 f000 	mul.w	r0, r5, r0
 800aec2:	11c0      	asrs	r0, r0, #7
 800aec4:	6020      	str	r0, [r4, #0]
}
 800aec6:	b002      	add	sp, #8
 800aec8:	bd70      	pop	{r4, r5, r6, pc}
    interp = 4;
 800aeca:	2504      	movs	r5, #4
 800aecc:	e7e1      	b.n	800ae92 <SUBGRF_GetCFO+0x42>
 800aece:	bf00      	nop
 800aed0:	0c0a0804 	.word	0x0c0a0804
 800aed4:	01e84800 	.word	0x01e84800

0800aed8 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800aed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aedc:	4770      	bx	lr

0800aede <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800aede:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aee2:	4770      	bx	lr

0800aee4 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aee8:	4770      	bx	lr

0800aeea <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800aeea:	4770      	bx	lr

0800aeec <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800aeec:	2000      	movs	r0, #0
 800aeee:	4770      	bx	lr

0800aef0 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800aef0:	2000      	movs	r0, #0
 800aef2:	4770      	bx	lr

0800aef4 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800aef4:	4770      	bx	lr

0800aef6 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 800aef6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aefa:	4770      	bx	lr

0800aefc <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af00:	4770      	bx	lr

0800af02 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800af02:	4770      	bx	lr

0800af04 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800af04:	4770      	bx	lr

0800af06 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800af06:	4770      	bx	lr

0800af08 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800af08:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af0a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800af0e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800af10:	4b1e      	ldr	r3, [pc, #120]	@ (800af8c <TRACE_AllocateBufer+0x84>)
 800af12:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800af16:	8a1a      	ldrh	r2, [r3, #16]
 800af18:	4596      	cmp	lr, r2
 800af1a:	d011      	beq.n	800af40 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800af1c:	4596      	cmp	lr, r2
 800af1e:	d921      	bls.n	800af64 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800af20:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 800af24:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800af26:	4283      	cmp	r3, r0
 800af28:	d81f      	bhi.n	800af6a <TRACE_AllocateBufer+0x62>
 800af2a:	4282      	cmp	r2, r0
 800af2c:	d91d      	bls.n	800af6a <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800af2e:	4b17      	ldr	r3, [pc, #92]	@ (800af8c <TRACE_AllocateBufer+0x84>)
 800af30:	2401      	movs	r4, #1
 800af32:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800af34:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800af38:	2400      	movs	r4, #0
 800af3a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800af3c:	4613      	mov	r3, r2
 800af3e:	e014      	b.n	800af6a <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800af40:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 800af44:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800af46:	4298      	cmp	r0, r3
 800af48:	d30f      	bcc.n	800af6a <TRACE_AllocateBufer+0x62>
 800af4a:	4282      	cmp	r2, r0
 800af4c:	d90d      	bls.n	800af6a <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800af4e:	4b0f      	ldr	r3, [pc, #60]	@ (800af8c <TRACE_AllocateBufer+0x84>)
 800af50:	2401      	movs	r4, #1
 800af52:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800af54:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800af58:	f04f 0e00 	mov.w	lr, #0
 800af5c:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800af60:	4613      	mov	r3, r2
 800af62:	e002      	b.n	800af6a <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800af64:	eba2 020e 	sub.w	r2, r2, lr
 800af68:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800af6a:	4283      	cmp	r3, r0
 800af6c:	d90a      	bls.n	800af84 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800af6e:	4a07      	ldr	r2, [pc, #28]	@ (800af8c <TRACE_AllocateBufer+0x84>)
 800af70:	8a53      	ldrh	r3, [r2, #18]
 800af72:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800af74:	4403      	add	r3, r0
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 800af7c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af7e:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800af82:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 800af84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af88:	e7f9      	b.n	800af7e <TRACE_AllocateBufer+0x76>
 800af8a:	bf00      	nop
 800af8c:	20005cdc 	.word	0x20005cdc

0800af90 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af90:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800af94:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800af96:	4a03      	ldr	r2, [pc, #12]	@ (800afa4 <TRACE_Lock+0x14>)
 800af98:	8ad3      	ldrh	r3, [r2, #22]
 800af9a:	3301      	adds	r3, #1
 800af9c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af9e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800afa2:	4770      	bx	lr
 800afa4:	20005cdc 	.word	0x20005cdc

0800afa8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800afac:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800afae:	4a03      	ldr	r2, [pc, #12]	@ (800afbc <TRACE_UnLock+0x14>)
 800afb0:	8ad3      	ldrh	r3, [r2, #22]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afb6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800afba:	4770      	bx	lr
 800afbc:	20005cdc 	.word	0x20005cdc

0800afc0 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800afc0:	4b02      	ldr	r3, [pc, #8]	@ (800afcc <TRACE_IsLocked+0xc>)
 800afc2:	8ad8      	ldrh	r0, [r3, #22]
}
 800afc4:	3800      	subs	r0, #0
 800afc6:	bf18      	it	ne
 800afc8:	2001      	movne	r0, #1
 800afca:	4770      	bx	lr
 800afcc:	20005cdc 	.word	0x20005cdc

0800afd0 <UTIL_ADV_TRACE_Init>:
{
 800afd0:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800afd2:	2218      	movs	r2, #24
 800afd4:	2100      	movs	r1, #0
 800afd6:	4807      	ldr	r0, [pc, #28]	@ (800aff4 <UTIL_ADV_TRACE_Init+0x24>)
 800afd8:	f000 f98f 	bl	800b2fa <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800afdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afe0:	2100      	movs	r1, #0
 800afe2:	4805      	ldr	r0, [pc, #20]	@ (800aff8 <UTIL_ADV_TRACE_Init+0x28>)
 800afe4:	f000 f989 	bl	800b2fa <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800afe8:	4b04      	ldr	r3, [pc, #16]	@ (800affc <UTIL_ADV_TRACE_Init+0x2c>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4804      	ldr	r0, [pc, #16]	@ (800b000 <UTIL_ADV_TRACE_Init+0x30>)
 800afee:	4798      	blx	r3
}
 800aff0:	bd08      	pop	{r3, pc}
 800aff2:	bf00      	nop
 800aff4:	20005cdc 	.word	0x20005cdc
 800aff8:	20005adc 	.word	0x20005adc
 800affc:	08010aa4 	.word	0x08010aa4
 800b000:	0800b181 	.word	0x0800b181

0800b004 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800b004:	4b01      	ldr	r3, [pc, #4]	@ (800b00c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800b006:	6058      	str	r0, [r3, #4]
}
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	20005cdc 	.word	0x20005cdc

0800b010 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800b010:	4b01      	ldr	r3, [pc, #4]	@ (800b018 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800b012:	7218      	strb	r0, [r3, #8]
}
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	20005cdc 	.word	0x20005cdc

0800b01c <TRACE_Send>:
{
 800b01c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b01e:	f3ef 8310 	mrs	r3, PRIMASK
 800b022:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800b024:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 800b026:	f7ff ffcb 	bl	800afc0 <TRACE_IsLocked>
 800b02a:	b118      	cbz	r0, 800b034 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b02c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800b030:	2000      	movs	r0, #0
}
 800b032:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 800b034:	f7ff ffac 	bl	800af90 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800b038:	4b1c      	ldr	r3, [pc, #112]	@ (800b0ac <TRACE_Send+0x90>)
 800b03a:	8a1a      	ldrh	r2, [r3, #16]
 800b03c:	8a5b      	ldrh	r3, [r3, #18]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d02e      	beq.n	800b0a0 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800b042:	491a      	ldr	r1, [pc, #104]	@ (800b0ac <TRACE_Send+0x90>)
 800b044:	7889      	ldrb	r1, [r1, #2]
 800b046:	2901      	cmp	r1, #1
 800b048:	d017      	beq.n	800b07a <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800b04a:	4a18      	ldr	r2, [pc, #96]	@ (800b0ac <TRACE_Send+0x90>)
 800b04c:	7892      	ldrb	r2, [r2, #2]
 800b04e:	b932      	cbnz	r2, 800b05e <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b050:	4a16      	ldr	r2, [pc, #88]	@ (800b0ac <TRACE_Send+0x90>)
 800b052:	8a12      	ldrh	r2, [r2, #16]
 800b054:	4293      	cmp	r3, r2
 800b056:	d91e      	bls.n	800b096 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800b058:	1a9b      	subs	r3, r3, r2
 800b05a:	4a14      	ldr	r2, [pc, #80]	@ (800b0ac <TRACE_Send+0x90>)
 800b05c:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800b05e:	4e13      	ldr	r6, [pc, #76]	@ (800b0ac <TRACE_Send+0x90>)
 800b060:	8a35      	ldrh	r5, [r6, #16]
 800b062:	4b13      	ldr	r3, [pc, #76]	@ (800b0b0 <TRACE_Send+0x94>)
 800b064:	441d      	add	r5, r3
 800b066:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 800b06a:	f7f8 f83d 	bl	80030e8 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800b06e:	4b11      	ldr	r3, [pc, #68]	@ (800b0b4 <TRACE_Send+0x98>)
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	8ab1      	ldrh	r1, [r6, #20]
 800b074:	4628      	mov	r0, r5
 800b076:	4798      	blx	r3
 800b078:	e7db      	b.n	800b032 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800b07a:	480c      	ldr	r0, [pc, #48]	@ (800b0ac <TRACE_Send+0x90>)
 800b07c:	8801      	ldrh	r1, [r0, #0]
 800b07e:	1a8a      	subs	r2, r1, r2
 800b080:	b292      	uxth	r2, r2
 800b082:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800b084:	2102      	movs	r1, #2
 800b086:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800b088:	2100      	movs	r1, #0
 800b08a:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	d1dc      	bne.n	800b04a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b090:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b092:	8201      	strh	r1, [r0, #16]
 800b094:	e7d9      	b.n	800b04a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800b096:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 800b09a:	4b04      	ldr	r3, [pc, #16]	@ (800b0ac <TRACE_Send+0x90>)
 800b09c:	829a      	strh	r2, [r3, #20]
 800b09e:	e7de      	b.n	800b05e <TRACE_Send+0x42>
      TRACE_UnLock();
 800b0a0:	f7ff ff82 	bl	800afa8 <TRACE_UnLock>
 800b0a4:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800b0a8:	2000      	movs	r0, #0
}
 800b0aa:	e7c2      	b.n	800b032 <TRACE_Send+0x16>
 800b0ac:	20005cdc 	.word	0x20005cdc
 800b0b0:	20005adc 	.word	0x20005adc
 800b0b4:	08010aa4 	.word	0x08010aa4

0800b0b8 <UTIL_ADV_TRACE_COND_FSend>:
{
 800b0b8:	b408      	push	{r3}
 800b0ba:	b530      	push	{r4, r5, lr}
 800b0bc:	b086      	sub	sp, #24
 800b0be:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800b0c6:	4b2b      	ldr	r3, [pc, #172]	@ (800b174 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800b0c8:	7a1b      	ldrb	r3, [r3, #8]
 800b0ca:	4283      	cmp	r3, r0
 800b0cc:	d34c      	bcc.n	800b168 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800b0ce:	4b29      	ldr	r3, [pc, #164]	@ (800b174 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	4399      	bics	r1, r3
 800b0d4:	d14b      	bne.n	800b16e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800b0d6:	4b27      	ldr	r3, [pc, #156]	@ (800b174 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	b123      	cbz	r3, 800b0e6 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 800b0dc:	b11a      	cbz	r2, 800b0e6 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800b0de:	f10d 0102 	add.w	r1, sp, #2
 800b0e2:	a801      	add	r0, sp, #4
 800b0e4:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 800b0e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b0e8:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b0f0:	4821      	ldr	r0, [pc, #132]	@ (800b178 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800b0f2:	f000 fc2f 	bl	800b954 <tiny_vsnprintf_like>
 800b0f6:	b285      	uxth	r5, r0
  TRACE_Lock();
 800b0f8:	f7ff ff4a 	bl	800af90 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800b0fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b100:	18e8      	adds	r0, r5, r3
 800b102:	4669      	mov	r1, sp
 800b104:	b280      	uxth	r0, r0
 800b106:	f7ff feff 	bl	800af08 <TRACE_AllocateBufer>
 800b10a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800b10e:	d026      	beq.n	800b15e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 800b110:	2300      	movs	r3, #0
 800b112:	e00d      	b.n	800b130 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800b114:	f8bd 2000 	ldrh.w	r2, [sp]
 800b118:	f103 0118 	add.w	r1, r3, #24
 800b11c:	4469      	add	r1, sp
 800b11e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 800b122:	4916      	ldr	r1, [pc, #88]	@ (800b17c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800b124:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 800b126:	3201      	adds	r2, #1
 800b128:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 800b12c:	3301      	adds	r3, #1
 800b12e:	b29b      	uxth	r3, r3
 800b130:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b134:	429a      	cmp	r2, r3
 800b136:	d8ed      	bhi.n	800b114 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b138:	f8bd 0000 	ldrh.w	r0, [sp]
 800b13c:	9b05      	ldr	r3, [sp, #20]
 800b13e:	4622      	mov	r2, r4
 800b140:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b144:	4c0d      	ldr	r4, [pc, #52]	@ (800b17c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800b146:	4420      	add	r0, r4
 800b148:	f000 fc04 	bl	800b954 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800b14c:	f7ff ff2c 	bl	800afa8 <TRACE_UnLock>
    return TRACE_Send();
 800b150:	f7ff ff64 	bl	800b01c <TRACE_Send>
}
 800b154:	b006      	add	sp, #24
 800b156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b15a:	b001      	add	sp, #4
 800b15c:	4770      	bx	lr
  TRACE_UnLock();
 800b15e:	f7ff ff23 	bl	800afa8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800b162:	f06f 0002 	mvn.w	r0, #2
 800b166:	e7f5      	b.n	800b154 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 800b168:	f06f 0004 	mvn.w	r0, #4
 800b16c:	e7f2      	b.n	800b154 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800b16e:	f06f 0005 	mvn.w	r0, #5
 800b172:	e7ef      	b.n	800b154 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800b174:	20005cdc 	.word	0x20005cdc
 800b178:	200059dc 	.word	0x200059dc
 800b17c:	20005adc 	.word	0x20005adc

0800b180 <TRACE_TxCpltCallback>:
{
 800b180:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b182:	f3ef 8310 	mrs	r3, PRIMASK
 800b186:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800b188:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800b18a:	4b26      	ldr	r3, [pc, #152]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b18c:	789b      	ldrb	r3, [r3, #2]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d016      	beq.n	800b1c0 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800b192:	4a24      	ldr	r2, [pc, #144]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b194:	8a13      	ldrh	r3, [r2, #16]
 800b196:	8a90      	ldrh	r0, [r2, #20]
 800b198:	4403      	add	r3, r0
 800b19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19e:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800b1a0:	4b20      	ldr	r3, [pc, #128]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b1a2:	8a1a      	ldrh	r2, [r3, #16]
 800b1a4:	8a5b      	ldrh	r3, [r3, #18]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d003      	beq.n	800b1b2 <TRACE_TxCpltCallback+0x32>
 800b1aa:	481e      	ldr	r0, [pc, #120]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b1ac:	8ac0      	ldrh	r0, [r0, #22]
 800b1ae:	2801      	cmp	r0, #1
 800b1b0:	d00b      	beq.n	800b1ca <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1b2:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800b1b6:	f7f7 ff9d 	bl	80030f4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800b1ba:	f7ff fef5 	bl	800afa8 <TRACE_UnLock>
}
 800b1be:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b1c0:	4b18      	ldr	r3, [pc, #96]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b1c6:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 800b1c8:	e7ea      	b.n	800b1a0 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800b1ca:	4816      	ldr	r0, [pc, #88]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b1cc:	7880      	ldrb	r0, [r0, #2]
 800b1ce:	2801      	cmp	r0, #1
 800b1d0:	d014      	beq.n	800b1fc <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800b1d2:	4a14      	ldr	r2, [pc, #80]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b1d4:	7892      	ldrb	r2, [r2, #2]
 800b1d6:	b932      	cbnz	r2, 800b1e6 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b1d8:	4a12      	ldr	r2, [pc, #72]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b1da:	8a12      	ldrh	r2, [r2, #16]
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d91b      	bls.n	800b218 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800b1e0:	1a9b      	subs	r3, r3, r2
 800b1e2:	4a10      	ldr	r2, [pc, #64]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b1e4:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b1e8:	8a18      	ldrh	r0, [r3, #16]
 800b1ea:	4a0f      	ldr	r2, [pc, #60]	@ (800b228 <TRACE_TxCpltCallback+0xa8>)
 800b1ec:	4410      	add	r0, r2
 800b1ee:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800b1f2:	4a0e      	ldr	r2, [pc, #56]	@ (800b22c <TRACE_TxCpltCallback+0xac>)
 800b1f4:	68d2      	ldr	r2, [r2, #12]
 800b1f6:	8a99      	ldrh	r1, [r3, #20]
 800b1f8:	4790      	blx	r2
 800b1fa:	e7e0      	b.n	800b1be <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800b1fc:	4c09      	ldr	r4, [pc, #36]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b1fe:	8820      	ldrh	r0, [r4, #0]
 800b200:	1a82      	subs	r2, r0, r2
 800b202:	b292      	uxth	r2, r2
 800b204:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800b206:	2002      	movs	r0, #2
 800b208:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800b20a:	2000      	movs	r0, #0
 800b20c:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800b20e:	2a00      	cmp	r2, #0
 800b210:	d1df      	bne.n	800b1d2 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b212:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b214:	8220      	strh	r0, [r4, #16]
 800b216:	e7dc      	b.n	800b1d2 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800b218:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 800b21c:	4b01      	ldr	r3, [pc, #4]	@ (800b224 <TRACE_TxCpltCallback+0xa4>)
 800b21e:	829a      	strh	r2, [r3, #20]
 800b220:	e7e1      	b.n	800b1e6 <TRACE_TxCpltCallback+0x66>
 800b222:	bf00      	nop
 800b224:	20005cdc 	.word	0x20005cdc
 800b228:	20005adc 	.word	0x20005adc
 800b22c:	08010aa4 	.word	0x08010aa4

0800b230 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b230:	2300      	movs	r3, #0
 800b232:	4a02      	ldr	r2, [pc, #8]	@ (800b23c <UTIL_LPM_Init+0xc>)
 800b234:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b236:	4a02      	ldr	r2, [pc, #8]	@ (800b240 <UTIL_LPM_Init+0x10>)
 800b238:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b23a:	4770      	bx	lr
 800b23c:	20005cf8 	.word	0x20005cf8
 800b240:	20005cf4 	.word	0x20005cf4

0800b244 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b244:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b248:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800b24a:	b141      	cbz	r1, 800b25e <UTIL_LPM_SetStopMode+0x1a>
 800b24c:	2901      	cmp	r1, #1
 800b24e:	d103      	bne.n	800b258 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800b250:	4906      	ldr	r1, [pc, #24]	@ (800b26c <UTIL_LPM_SetStopMode+0x28>)
 800b252:	680a      	ldr	r2, [r1, #0]
 800b254:	4302      	orrs	r2, r0
 800b256:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b258:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b25c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800b25e:	4903      	ldr	r1, [pc, #12]	@ (800b26c <UTIL_LPM_SetStopMode+0x28>)
 800b260:	680a      	ldr	r2, [r1, #0]
 800b262:	ea22 0200 	bic.w	r2, r2, r0
 800b266:	600a      	str	r2, [r1, #0]
      break;
 800b268:	e7f6      	b.n	800b258 <UTIL_LPM_SetStopMode+0x14>
 800b26a:	bf00      	nop
 800b26c:	20005cf8 	.word	0x20005cf8

0800b270 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b270:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b274:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800b276:	b141      	cbz	r1, 800b28a <UTIL_LPM_SetOffMode+0x1a>
 800b278:	2901      	cmp	r1, #1
 800b27a:	d103      	bne.n	800b284 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b27c:	4906      	ldr	r1, [pc, #24]	@ (800b298 <UTIL_LPM_SetOffMode+0x28>)
 800b27e:	680a      	ldr	r2, [r1, #0]
 800b280:	4302      	orrs	r2, r0
 800b282:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b284:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b288:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800b28a:	4903      	ldr	r1, [pc, #12]	@ (800b298 <UTIL_LPM_SetOffMode+0x28>)
 800b28c:	680a      	ldr	r2, [r1, #0]
 800b28e:	ea22 0200 	bic.w	r2, r2, r0
 800b292:	600a      	str	r2, [r1, #0]
      break;
 800b294:	e7f6      	b.n	800b284 <UTIL_LPM_SetOffMode+0x14>
 800b296:	bf00      	nop
 800b298:	20005cf4 	.word	0x20005cf4

0800b29c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800b29c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b29e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b2a2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b2a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d8 <UTIL_LPM_EnterLowPower+0x3c>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	b13b      	cbz	r3, 800b2ba <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800b2aa:	4d0c      	ldr	r5, [pc, #48]	@ (800b2dc <UTIL_LPM_EnterLowPower+0x40>)
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800b2b0:	686b      	ldr	r3, [r5, #4]
 800b2b2:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b4:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b2ba:	4b09      	ldr	r3, [pc, #36]	@ (800b2e0 <UTIL_LPM_EnterLowPower+0x44>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	b12b      	cbz	r3, 800b2cc <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 800b2c0:	4d06      	ldr	r5, [pc, #24]	@ (800b2dc <UTIL_LPM_EnterLowPower+0x40>)
 800b2c2:	68ab      	ldr	r3, [r5, #8]
 800b2c4:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800b2c6:	68eb      	ldr	r3, [r5, #12]
 800b2c8:	4798      	blx	r3
 800b2ca:	e7f3      	b.n	800b2b4 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 800b2cc:	4d03      	ldr	r5, [pc, #12]	@ (800b2dc <UTIL_LPM_EnterLowPower+0x40>)
 800b2ce:	692b      	ldr	r3, [r5, #16]
 800b2d0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800b2d2:	696b      	ldr	r3, [r5, #20]
 800b2d4:	4798      	blx	r3
 800b2d6:	e7ed      	b.n	800b2b4 <UTIL_LPM_EnterLowPower+0x18>
 800b2d8:	20005cf8 	.word	0x20005cf8
 800b2dc:	08010a4c 	.word	0x08010a4c
 800b2e0:	20005cf4 	.word	0x20005cf4

0800b2e4 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800b2e4:	e004      	b.n	800b2f0 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 800b2e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2ea:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	1e53      	subs	r3, r2, #1
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	2a00      	cmp	r2, #0
 800b2f6:	d1f6      	bne.n	800b2e6 <UTIL_MEM_cpy_8+0x2>
    }
}
 800b2f8:	4770      	bx	lr

0800b2fa <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800b2fa:	e002      	b.n	800b302 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 800b2fc:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 800b300:	461a      	mov	r2, r3
 800b302:	1e53      	subs	r3, r2, #1
 800b304:	b29b      	uxth	r3, r3
 800b306:	2a00      	cmp	r2, #0
 800b308:	d1f8      	bne.n	800b2fc <UTIL_MEM_set_8+0x2>
  }
}
 800b30a:	4770      	bx	lr

0800b30c <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b30c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b310:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800b312:	4a06      	ldr	r2, [pc, #24]	@ (800b32c <UTIL_SEQ_SetTask+0x20>)
 800b314:	6813      	ldr	r3, [r2, #0]
 800b316:	4303      	orrs	r3, r0
 800b318:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b31a:	4a05      	ldr	r2, [pc, #20]	@ (800b330 <UTIL_SEQ_SetTask+0x24>)
 800b31c:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 800b320:	4303      	orrs	r3, r0
 800b322:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b326:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800b32a:	4770      	bx	lr
 800b32c:	20005d18 	.word	0x20005d18
 800b330:	20005cfc 	.word	0x20005cfc

0800b334 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800b334:	4770      	bx	lr

0800b336 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800b336:	4770      	bx	lr

0800b338 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b338:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b33c:	d216      	bcs.n	800b36c <SEQ_BitPosition+0x34>
 800b33e:	0400      	lsls	r0, r0, #16
 800b340:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b342:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800b346:	d202      	bcs.n	800b34e <SEQ_BitPosition+0x16>
 800b348:	3308      	adds	r3, #8
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b34e:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800b352:	d202      	bcs.n	800b35a <SEQ_BitPosition+0x22>
 800b354:	3304      	adds	r3, #4
 800b356:	b2db      	uxtb	r3, r3
 800b358:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b35a:	0f00      	lsrs	r0, r0, #28
 800b35c:	4a04      	ldr	r2, [pc, #16]	@ (800b370 <SEQ_BitPosition+0x38>)
 800b35e:	5c10      	ldrb	r0, [r2, r0]
 800b360:	4418      	add	r0, r3
 800b362:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 800b364:	f1c0 001f 	rsb	r0, r0, #31
}
 800b368:	b2c0      	uxtb	r0, r0
 800b36a:	4770      	bx	lr
uint8_t n = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	e7e8      	b.n	800b342 <SEQ_BitPosition+0xa>
 800b370:	08010cbc 	.word	0x08010cbc

0800b374 <UTIL_SEQ_Run>:
{
 800b374:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 800b376:	4b42      	ldr	r3, [pc, #264]	@ (800b480 <UTIL_SEQ_Run+0x10c>)
 800b378:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 800b37a:	4020      	ands	r0, r4
 800b37c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 800b37e:	4b41      	ldr	r3, [pc, #260]	@ (800b484 <UTIL_SEQ_Run+0x110>)
 800b380:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 800b382:	4b41      	ldr	r3, [pc, #260]	@ (800b488 <UTIL_SEQ_Run+0x114>)
 800b384:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 800b386:	4941      	ldr	r1, [pc, #260]	@ (800b48c <UTIL_SEQ_Run+0x118>)
 800b388:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 800b38a:	4941      	ldr	r1, [pc, #260]	@ (800b490 <UTIL_SEQ_Run+0x11c>)
 800b38c:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b38e:	e02f      	b.n	800b3f0 <UTIL_SEQ_Run+0x7c>
      counter++;
 800b390:	3301      	adds	r3, #1
 800b392:	e034      	b.n	800b3fe <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b394:	4d3f      	ldr	r5, [pc, #252]	@ (800b494 <UTIL_SEQ_Run+0x120>)
 800b396:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b39a:	6868      	ldr	r0, [r5, #4]
 800b39c:	4010      	ands	r0, r2
 800b39e:	f7ff ffcb 	bl	800b338 <SEQ_BitPosition>
 800b3a2:	4e3d      	ldr	r6, [pc, #244]	@ (800b498 <UTIL_SEQ_Run+0x124>)
 800b3a4:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b3a6:	686a      	ldr	r2, [r5, #4]
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b3ae:	ea22 0200 	bic.w	r2, r2, r0
 800b3b2:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3b4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b3b8:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b3ba:	6832      	ldr	r2, [r6, #0]
 800b3bc:	fa03 f202 	lsl.w	r2, r3, r2
 800b3c0:	43d6      	mvns	r6, r2
 800b3c2:	4d30      	ldr	r5, [pc, #192]	@ (800b484 <UTIL_SEQ_Run+0x110>)
 800b3c4:	6828      	ldr	r0, [r5, #0]
 800b3c6:	ea20 0202 	bic.w	r2, r0, r2
 800b3ca:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d12d      	bne.n	800b42c <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d0:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800b3d4:	4b30      	ldr	r3, [pc, #192]	@ (800b498 <UTIL_SEQ_Run+0x124>)
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	4b30      	ldr	r3, [pc, #192]	@ (800b49c <UTIL_SEQ_Run+0x128>)
 800b3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3de:	4798      	blx	r3
    local_taskset = TaskSet;
 800b3e0:	4b28      	ldr	r3, [pc, #160]	@ (800b484 <UTIL_SEQ_Run+0x110>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 800b3e4:	4b28      	ldr	r3, [pc, #160]	@ (800b488 <UTIL_SEQ_Run+0x114>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 800b3e8:	4928      	ldr	r1, [pc, #160]	@ (800b48c <UTIL_SEQ_Run+0x118>)
 800b3ea:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 800b3ec:	4928      	ldr	r1, [pc, #160]	@ (800b490 <UTIL_SEQ_Run+0x11c>)
 800b3ee:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b3f0:	4002      	ands	r2, r0
 800b3f2:	4d23      	ldr	r5, [pc, #140]	@ (800b480 <UTIL_SEQ_Run+0x10c>)
 800b3f4:	682d      	ldr	r5, [r5, #0]
 800b3f6:	422a      	tst	r2, r5
 800b3f8:	d020      	beq.n	800b43c <UTIL_SEQ_Run+0xc8>
 800b3fa:	400b      	ands	r3, r1
 800b3fc:	d11e      	bne.n	800b43c <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b3fe:	4a25      	ldr	r2, [pc, #148]	@ (800b494 <UTIL_SEQ_Run+0x120>)
 800b400:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b404:	4002      	ands	r2, r0
 800b406:	422a      	tst	r2, r5
 800b408:	d0c2      	beq.n	800b390 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b40a:	4922      	ldr	r1, [pc, #136]	@ (800b494 <UTIL_SEQ_Run+0x120>)
 800b40c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800b410:	4002      	ands	r2, r0
 800b412:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b414:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b418:	6849      	ldr	r1, [r1, #4]
 800b41a:	4211      	tst	r1, r2
 800b41c:	d1ba      	bne.n	800b394 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b41e:	491d      	ldr	r1, [pc, #116]	@ (800b494 <UTIL_SEQ_Run+0x120>)
 800b420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b428:	6048      	str	r0, [r1, #4]
 800b42a:	e7b3      	b.n	800b394 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b42c:	3b01      	subs	r3, #1
 800b42e:	4819      	ldr	r0, [pc, #100]	@ (800b494 <UTIL_SEQ_Run+0x120>)
 800b430:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 800b434:	4032      	ands	r2, r6
 800b436:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b43a:	e7c7      	b.n	800b3cc <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b43c:	4b16      	ldr	r3, [pc, #88]	@ (800b498 <UTIL_SEQ_Run+0x124>)
 800b43e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b442:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b444:	f7ff ff76 	bl	800b334 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b448:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b44c:	b672      	cpsid	i
  local_taskset = TaskSet;
 800b44e:	4b0d      	ldr	r3, [pc, #52]	@ (800b484 <UTIL_SEQ_Run+0x110>)
 800b450:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 800b452:	4a0d      	ldr	r2, [pc, #52]	@ (800b488 <UTIL_SEQ_Run+0x114>)
 800b454:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 800b456:	4a0d      	ldr	r2, [pc, #52]	@ (800b48c <UTIL_SEQ_Run+0x118>)
 800b458:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b45a:	4013      	ands	r3, r2
 800b45c:	4a08      	ldr	r2, [pc, #32]	@ (800b480 <UTIL_SEQ_Run+0x10c>)
 800b45e:	6812      	ldr	r2, [r2, #0]
 800b460:	4213      	tst	r3, r2
 800b462:	d103      	bne.n	800b46c <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 800b464:	4b0a      	ldr	r3, [pc, #40]	@ (800b490 <UTIL_SEQ_Run+0x11c>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	420b      	tst	r3, r1
 800b46a:	d006      	beq.n	800b47a <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b46c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800b470:	f7ff ff61 	bl	800b336 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800b474:	4b02      	ldr	r3, [pc, #8]	@ (800b480 <UTIL_SEQ_Run+0x10c>)
 800b476:	601c      	str	r4, [r3, #0]
}
 800b478:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 800b47a:	f7f7 fe31 	bl	80030e0 <UTIL_SEQ_Idle>
 800b47e:	e7f5      	b.n	800b46c <UTIL_SEQ_Run+0xf8>
 800b480:	200000f0 	.word	0x200000f0
 800b484:	20005d18 	.word	0x20005d18
 800b488:	20005d14 	.word	0x20005d14
 800b48c:	200000f4 	.word	0x200000f4
 800b490:	20005d10 	.word	0x20005d10
 800b494:	20005cfc 	.word	0x20005cfc
 800b498:	20005d0c 	.word	0x20005d0c
 800b49c:	20005d04 	.word	0x20005d04

0800b4a0 <UTIL_SEQ_RegTask>:
{
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4a4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b4a8:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b4aa:	f7ff ff45 	bl	800b338 <SEQ_BitPosition>
 800b4ae:	4b03      	ldr	r3, [pc, #12]	@ (800b4bc <UTIL_SEQ_RegTask+0x1c>)
 800b4b0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4b4:	f385 8810 	msr	PRIMASK, r5
}
 800b4b8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20005d04 	.word	0x20005d04

0800b4c0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800b4c0:	b082      	sub	sp, #8
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	f10d 0c08 	add.w	ip, sp, #8
 800b4c8:	e90c 0006 	stmdb	ip, {r1, r2}
 800b4cc:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	6002      	str	r2, [r0, #0]
 800b4d2:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 800b4d4:	440b      	add	r3, r1
 800b4d6:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b4d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800b4dc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800b4e0:	440a      	add	r2, r1
 800b4e2:	b291      	uxth	r1, r2
 800b4e4:	b212      	sxth	r2, r2
 800b4e6:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 800b4e8:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800b4ec:	db04      	blt.n	800b4f8 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 800b4f2:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 800b4f6:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 800b4f8:	b002      	add	sp, #8
 800b4fa:	b002      	add	sp, #8
 800b4fc:	4770      	bx	lr
	...

0800b500 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800b500:	b530      	push	{r4, r5, lr}
 800b502:	b087      	sub	sp, #28
 800b504:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b506:	2300      	movs	r3, #0
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800b50e:	6003      	str	r3, [r0, #0]
 800b510:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b512:	4d0b      	ldr	r5, [pc, #44]	@ (800b540 <SysTimeGet+0x40>)
 800b514:	692b      	ldr	r3, [r5, #16]
 800b516:	a805      	add	r0, sp, #20
 800b518:	4798      	blx	r3
 800b51a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800b51c:	68eb      	ldr	r3, [r5, #12]
 800b51e:	4798      	blx	r3
 800b520:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800b524:	686b      	ldr	r3, [r5, #4]
 800b526:	4798      	blx	r3
 800b528:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800b52a:	9b05      	ldr	r3, [sp, #20]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	9b04      	ldr	r3, [sp, #16]
 800b530:	aa02      	add	r2, sp, #8
 800b532:	ca06      	ldmia	r2, {r1, r2}
 800b534:	4620      	mov	r0, r4
 800b536:	f7ff ffc3 	bl	800b4c0 <SysTimeAdd>

  return sysTime;
}
 800b53a:	4620      	mov	r0, r4
 800b53c:	b007      	add	sp, #28
 800b53e:	bd30      	pop	{r4, r5, pc}
 800b540:	08010a64 	.word	0x08010a64

0800b544 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b544:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b546:	4b03      	ldr	r3, [pc, #12]	@ (800b554 <UTIL_TIMER_Init+0x10>)
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b54c:	4b02      	ldr	r3, [pc, #8]	@ (800b558 <UTIL_TIMER_Init+0x14>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4798      	blx	r3
}
 800b552:	bd08      	pop	{r3, pc}
 800b554:	20005d1c 	.word	0x20005d1c
 800b558:	08010a78 	.word	0x08010a78

0800b55c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 800b55c:	b1a8      	cbz	r0, 800b58a <UTIL_TIMER_Create+0x2e>
{
 800b55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b560:	4617      	mov	r7, r2
 800b562:	461e      	mov	r6, r3
 800b564:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 800b566:	b193      	cbz	r3, 800b58e <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 800b568:	2500      	movs	r5, #0
 800b56a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b56c:	4b09      	ldr	r3, [pc, #36]	@ (800b594 <UTIL_TIMER_Create+0x38>)
 800b56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b570:	4608      	mov	r0, r1
 800b572:	4798      	blx	r3
 800b574:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800b576:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 800b578:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800b57a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800b57c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800b57e:	9b06      	ldr	r3, [sp, #24]
 800b580:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800b582:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800b584:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 800b586:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 800b588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800b58a:	2001      	movs	r0, #1
}
 800b58c:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 800b58e:	2001      	movs	r0, #1
 800b590:	e7fa      	b.n	800b588 <UTIL_TIMER_Create+0x2c>
 800b592:	bf00      	nop
 800b594:	08010a78 	.word	0x08010a78

0800b598 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b598:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b59a:	4c03      	ldr	r4, [pc, #12]	@ (800b5a8 <UTIL_TIMER_GetCurrentTime+0x10>)
 800b59c:	69e3      	ldr	r3, [r4, #28]
 800b59e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800b5a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b5a2:	4798      	blx	r3
}
 800b5a4:	bd10      	pop	{r4, pc}
 800b5a6:	bf00      	nop
 800b5a8:	08010a78 	.word	0x08010a78

0800b5ac <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b5ac:	b570      	push	{r4, r5, r6, lr}
 800b5ae:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b5b0:	4d05      	ldr	r5, [pc, #20]	@ (800b5c8 <UTIL_TIMER_GetElapsedTime+0x1c>)
 800b5b2:	69eb      	ldr	r3, [r5, #28]
 800b5b4:	4798      	blx	r3
 800b5b6:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b5b8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b5be:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800b5c0:	1a20      	subs	r0, r4, r0
 800b5c2:	4798      	blx	r3
}
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
 800b5c6:	bf00      	nop
 800b5c8:	08010a78 	.word	0x08010a78

0800b5cc <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b5cc:	4b05      	ldr	r3, [pc, #20]	@ (800b5e4 <TimerExists+0x18>)
 800b5ce:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800b5d0:	e000      	b.n	800b5d4 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 800b5d2:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800b5d4:	b11b      	cbz	r3, 800b5de <TimerExists+0x12>
    if( cur == TimerObject )
 800b5d6:	4283      	cmp	r3, r0
 800b5d8:	d1fb      	bne.n	800b5d2 <TimerExists+0x6>
      return true;
 800b5da:	2001      	movs	r0, #1
  }
  return false;
}
 800b5dc:	4770      	bx	lr
  return false;
 800b5de:	2000      	movs	r0, #0
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20005d1c 	.word	0x20005d1c

0800b5e8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ea:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b5ec:	4e09      	ldr	r6, [pc, #36]	@ (800b614 <TimerSetTimeout+0x2c>)
 800b5ee:	6a33      	ldr	r3, [r6, #32]
 800b5f0:	4798      	blx	r3
 800b5f2:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b5f8:	6827      	ldr	r7, [r4, #0]
 800b5fa:	69b6      	ldr	r6, [r6, #24]
 800b5fc:	47b0      	blx	r6
 800b5fe:	4428      	add	r0, r5
 800b600:	4287      	cmp	r7, r0
 800b602:	d202      	bcs.n	800b60a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b604:	47b0      	blx	r6
 800b606:	4428      	add	r0, r5
 800b608:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b60a:	4b02      	ldr	r3, [pc, #8]	@ (800b614 <TimerSetTimeout+0x2c>)
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	6820      	ldr	r0, [r4, #0]
 800b610:	4798      	blx	r3
}
 800b612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b614:	08010a78 	.word	0x08010a78

0800b618 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 800b618:	b368      	cbz	r0, 800b676 <UTIL_TIMER_Stop+0x5e>
{
 800b61a:	b510      	push	{r4, lr}
 800b61c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b61e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b622:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b624:	4b15      	ldr	r3, [pc, #84]	@ (800b67c <UTIL_TIMER_Stop+0x64>)
 800b626:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 800b628:	2301      	movs	r3, #1
 800b62a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 800b62c:	b1e1      	cbz	r1, 800b668 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b632:	4288      	cmp	r0, r1
 800b634:	d006      	beq.n	800b644 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b636:	460b      	mov	r3, r1
        while( cur != NULL )
 800b638:	b1b3      	cbz	r3, 800b668 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d011      	beq.n	800b662 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 800b63e:	4619      	mov	r1, r3
            cur = cur->Next;
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	e7f9      	b.n	800b638 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 800b644:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 800b646:	6948      	ldr	r0, [r1, #20]
 800b648:	b120      	cbz	r0, 800b654 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 800b64a:	4b0c      	ldr	r3, [pc, #48]	@ (800b67c <UTIL_TIMER_Stop+0x64>)
 800b64c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 800b64e:	f7ff ffcb 	bl	800b5e8 <TimerSetTimeout>
 800b652:	e009      	b.n	800b668 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 800b654:	4b0a      	ldr	r3, [pc, #40]	@ (800b680 <UTIL_TIMER_Stop+0x68>)
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	4798      	blx	r3
            TimerListHead = NULL;
 800b65a:	4b08      	ldr	r3, [pc, #32]	@ (800b67c <UTIL_TIMER_Stop+0x64>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	e002      	b.n	800b668 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	b123      	cbz	r3, 800b670 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 800b666:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b668:	f384 8810 	msr	PRIMASK, r4
}
 800b66c:	2000      	movs	r0, #0
}
 800b66e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 800b670:	2300      	movs	r3, #0
 800b672:	614b      	str	r3, [r1, #20]
 800b674:	e7f8      	b.n	800b668 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 800b676:	2001      	movs	r0, #1
}
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	20005d1c 	.word	0x20005d1c
 800b680:	08010a78 	.word	0x08010a78

0800b684 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b684:	4b09      	ldr	r3, [pc, #36]	@ (800b6ac <TimerInsertTimer+0x28>)
 800b686:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b688:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800b68a:	e001      	b.n	800b690 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 800b68c:	461a      	mov	r2, r3
        next = next->Next;
 800b68e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 800b690:	6951      	ldr	r1, [r2, #20]
 800b692:	b139      	cbz	r1, 800b6a4 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 800b694:	6819      	ldr	r1, [r3, #0]
 800b696:	f8d0 c000 	ldr.w	ip, [r0]
 800b69a:	458c      	cmp	ip, r1
 800b69c:	d8f6      	bhi.n	800b68c <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 800b69e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800b6a0:	6143      	str	r3, [r0, #20]
        return;
 800b6a2:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 800b6a4:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6143      	str	r3, [r0, #20]
}
 800b6aa:	4770      	bx	lr
 800b6ac:	20005d1c 	.word	0x20005d1c

0800b6b0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b6b0:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b6b2:	4b05      	ldr	r3, [pc, #20]	@ (800b6c8 <TimerInsertNewHeadTimer+0x18>)
 800b6b4:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 800b6b6:	b10b      	cbz	r3, 800b6bc <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b6bc:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800b6be:	4b02      	ldr	r3, [pc, #8]	@ (800b6c8 <TimerInsertNewHeadTimer+0x18>)
 800b6c0:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800b6c2:	f7ff ff91 	bl	800b5e8 <TimerSetTimeout>
}
 800b6c6:	bd08      	pop	{r3, pc}
 800b6c8:	20005d1c 	.word	0x20005d1c

0800b6cc <UTIL_TIMER_Start>:
{
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d036      	beq.n	800b740 <UTIL_TIMER_Start+0x74>
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	f7ff ff7a 	bl	800b5cc <TimerExists>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d134      	bne.n	800b746 <UTIL_TIMER_Start+0x7a>
 800b6dc:	7a65      	ldrb	r5, [r4, #9]
 800b6de:	2d00      	cmp	r5, #0
 800b6e0:	d133      	bne.n	800b74a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6e2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b6e6:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 800b6e8:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b6ea:	4b19      	ldr	r3, [pc, #100]	@ (800b750 <UTIL_TIMER_Start+0x84>)
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	4798      	blx	r3
    if( ticks < minValue )
 800b6f0:	4287      	cmp	r7, r0
 800b6f2:	d300      	bcc.n	800b6f6 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 800b6f4:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 800b6f6:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800b700:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800b702:	4b14      	ldr	r3, [pc, #80]	@ (800b754 <UTIL_TIMER_Start+0x88>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	b183      	cbz	r3, 800b72a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b708:	4b11      	ldr	r3, [pc, #68]	@ (800b750 <UTIL_TIMER_Start+0x84>)
 800b70a:	699b      	ldr	r3, [r3, #24]
 800b70c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	4418      	add	r0, r3
 800b712:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b714:	4b0f      	ldr	r3, [pc, #60]	@ (800b754 <UTIL_TIMER_Start+0x88>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4298      	cmp	r0, r3
 800b71c:	d20c      	bcs.n	800b738 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 800b71e:	4620      	mov	r0, r4
 800b720:	f7ff ffc6 	bl	800b6b0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b724:	f386 8810 	msr	PRIMASK, r6
}
 800b728:	e00b      	b.n	800b742 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 800b72a:	4b09      	ldr	r3, [pc, #36]	@ (800b750 <UTIL_TIMER_Start+0x84>)
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b730:	4620      	mov	r0, r4
 800b732:	f7ff ffbd 	bl	800b6b0 <TimerInsertNewHeadTimer>
 800b736:	e7f5      	b.n	800b724 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 800b738:	4620      	mov	r0, r4
 800b73a:	f7ff ffa3 	bl	800b684 <TimerInsertTimer>
 800b73e:	e7f1      	b.n	800b724 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b740:	2501      	movs	r5, #1
}
 800b742:	4628      	mov	r0, r5
 800b744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b746:	2501      	movs	r5, #1
 800b748:	e7fb      	b.n	800b742 <UTIL_TIMER_Start+0x76>
 800b74a:	2501      	movs	r5, #1
 800b74c:	e7f9      	b.n	800b742 <UTIL_TIMER_Start+0x76>
 800b74e:	bf00      	nop
 800b750:	08010a78 	.word	0x08010a78
 800b754:	20005d1c 	.word	0x20005d1c

0800b758 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 800b758:	b198      	cbz	r0, 800b782 <UTIL_TIMER_SetPeriod+0x2a>
{
 800b75a:	b510      	push	{r4, lr}
 800b75c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b75e:	4b0a      	ldr	r3, [pc, #40]	@ (800b788 <UTIL_TIMER_SetPeriod+0x30>)
 800b760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b762:	4608      	mov	r0, r1
 800b764:	4798      	blx	r3
 800b766:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800b768:	4620      	mov	r0, r4
 800b76a:	f7ff ff2f 	bl	800b5cc <TimerExists>
 800b76e:	b908      	cbnz	r0, 800b774 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b770:	2000      	movs	r0, #0
}
 800b772:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 800b774:	4620      	mov	r0, r4
 800b776:	f7ff ff4f 	bl	800b618 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7ff ffa6 	bl	800b6cc <UTIL_TIMER_Start>
 800b780:	e7f7      	b.n	800b772 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b782:	2001      	movs	r0, #1
}
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	08010a78 	.word	0x08010a78

0800b78c <UTIL_TIMER_IRQ_Handler>:
{
 800b78c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b78e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b792:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800b794:	4c1e      	ldr	r4, [pc, #120]	@ (800b810 <UTIL_TIMER_IRQ_Handler+0x84>)
 800b796:	6963      	ldr	r3, [r4, #20]
 800b798:	4798      	blx	r3
 800b79a:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 800b7a0:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 800b7a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b814 <UTIL_TIMER_IRQ_Handler+0x88>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	b923      	cbnz	r3, 800b7b2 <UTIL_TIMER_IRQ_Handler+0x26>
 800b7a8:	e018      	b.n	800b7dc <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800b7ae:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800b7b0:	b1a3      	cbz	r3, 800b7dc <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	42a2      	cmp	r2, r4
 800b7b6:	d9f8      	bls.n	800b7aa <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 800b7b8:	1a31      	subs	r1, r6, r0
 800b7ba:	440a      	add	r2, r1
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	e7f6      	b.n	800b7ae <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 800b7c0:	4b14      	ldr	r3, [pc, #80]	@ (800b814 <UTIL_TIMER_IRQ_Handler+0x88>)
 800b7c2:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 800b7c4:	6962      	ldr	r2, [r4, #20]
 800b7c6:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 800b7cc:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 800b7ce:	68e3      	ldr	r3, [r4, #12]
 800b7d0:	6920      	ldr	r0, [r4, #16]
 800b7d2:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800b7d4:	8963      	ldrh	r3, [r4, #10]
 800b7d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7da:	d012      	beq.n	800b802 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b7dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b814 <UTIL_TIMER_IRQ_Handler+0x88>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	b13b      	cbz	r3, 800b7f2 <UTIL_TIMER_IRQ_Handler+0x66>
 800b7e2:	681c      	ldr	r4, [r3, #0]
 800b7e4:	2c00      	cmp	r4, #0
 800b7e6:	d0eb      	beq.n	800b7c0 <UTIL_TIMER_IRQ_Handler+0x34>
 800b7e8:	4b09      	ldr	r3, [pc, #36]	@ (800b810 <UTIL_TIMER_IRQ_Handler+0x84>)
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	4798      	blx	r3
 800b7ee:	4284      	cmp	r4, r0
 800b7f0:	d3e6      	bcc.n	800b7c0 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800b7f2:	4b08      	ldr	r3, [pc, #32]	@ (800b814 <UTIL_TIMER_IRQ_Handler+0x88>)
 800b7f4:	6818      	ldr	r0, [r3, #0]
 800b7f6:	b108      	cbz	r0, 800b7fc <UTIL_TIMER_IRQ_Handler+0x70>
 800b7f8:	7a03      	ldrb	r3, [r0, #8]
 800b7fa:	b133      	cbz	r3, 800b80a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7fc:	f385 8810 	msr	PRIMASK, r5
}
 800b800:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 800b802:	4620      	mov	r0, r4
 800b804:	f7ff ff62 	bl	800b6cc <UTIL_TIMER_Start>
 800b808:	e7e8      	b.n	800b7dc <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 800b80a:	f7ff feed 	bl	800b5e8 <TimerSetTimeout>
 800b80e:	e7f5      	b.n	800b7fc <UTIL_TIMER_IRQ_Handler+0x70>
 800b810:	08010a78 	.word	0x08010a78
 800b814:	20005d1c 	.word	0x20005d1c

0800b818 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b818:	4601      	mov	r1, r0
  int i = 0;
 800b81a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b81c:	e008      	b.n	800b830 <ee_skip_atoi+0x18>
 800b81e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b822:	1c53      	adds	r3, r2, #1
 800b824:	600b      	str	r3, [r1, #0]
 800b826:	7813      	ldrb	r3, [r2, #0]
 800b828:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b82c:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800b830:	680a      	ldr	r2, [r1, #0]
 800b832:	7813      	ldrb	r3, [r2, #0]
 800b834:	3b30      	subs	r3, #48	@ 0x30
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b09      	cmp	r3, #9
 800b83a:	d9f0      	bls.n	800b81e <ee_skip_atoi+0x6>
  return i;
}
 800b83c:	4770      	bx	lr
	...

0800b840 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800b840:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 800b844:	b093      	sub	sp, #76	@ 0x4c
 800b846:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b848:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800b84a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800b84e:	d110      	bne.n	800b872 <ee_number+0x32>
  char *dig = lower_digits;
 800b850:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 800b94c <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800b854:	1e9f      	subs	r7, r3, #2
 800b856:	2f22      	cmp	r7, #34	@ 0x22
 800b858:	d875      	bhi.n	800b946 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 800b85a:	f016 0401 	ands.w	r4, r6, #1
 800b85e:	d00b      	beq.n	800b878 <ee_number+0x38>
 800b860:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 800b864:	f016 0f02 	tst.w	r6, #2
 800b868:	d00f      	beq.n	800b88a <ee_number+0x4a>
  {
    if (num < 0)
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	db07      	blt.n	800b87e <ee_number+0x3e>
  sign = 0;
 800b86e:	2700      	movs	r7, #0
 800b870:	e00c      	b.n	800b88c <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 800b872:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 800b950 <ee_number+0x110>
 800b876:	e7ed      	b.n	800b854 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 800b878:	f04f 0e20 	mov.w	lr, #32
 800b87c:	e7f2      	b.n	800b864 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 800b87e:	4252      	negs	r2, r2
      size--;
 800b880:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b882:	3e01      	subs	r6, #1
 800b884:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 800b886:	272d      	movs	r7, #45	@ 0x2d
 800b888:	e000      	b.n	800b88c <ee_number+0x4c>
  sign = 0;
 800b88a:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 800b88c:	bb5a      	cbnz	r2, 800b8e6 <ee_number+0xa6>
    tmp[i++] = '0';
 800b88e:	2330      	movs	r3, #48	@ 0x30
 800b890:	f88d 3004 	strb.w	r3, [sp, #4]
 800b894:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 800b898:	45ac      	cmp	ip, r5
 800b89a:	dd00      	ble.n	800b89e <ee_number+0x5e>
 800b89c:	4665      	mov	r5, ip
  size -= precision;
 800b89e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b8a0:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800b8a2:	b31c      	cbz	r4, 800b8ec <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 800b8a4:	b11f      	cbz	r7, 800b8ae <ee_number+0x6e>
 800b8a6:	f800 7b01 	strb.w	r7, [r0], #1
 800b8aa:	3901      	subs	r1, #1
 800b8ac:	d007      	beq.n	800b8be <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b8b4:	dd24      	ble.n	800b900 <ee_number+0xc0>
 800b8b6:	f800 eb01 	strb.w	lr, [r0], #1
 800b8ba:	3901      	subs	r1, #1
 800b8bc:	d1f7      	bne.n	800b8ae <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 800b8be:	b013      	add	sp, #76	@ 0x4c
 800b8c0:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800b8c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8c8:	fb03 2216 	mls	r2, r3, r6, r2
 800b8cc:	f81a 8002 	ldrb.w	r8, [sl, r2]
 800b8d0:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 800b8d4:	446a      	add	r2, sp
 800b8d6:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 800b8da:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800b8dc:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	d1ef      	bne.n	800b8c4 <ee_number+0x84>
 800b8e4:	e7d8      	b.n	800b898 <ee_number+0x58>
  i = 0;
 800b8e6:	f04f 0c00 	mov.w	ip, #0
 800b8ea:	e7f9      	b.n	800b8e0 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b8f2:	ddd7      	ble.n	800b8a4 <ee_number+0x64>
 800b8f4:	2220      	movs	r2, #32
 800b8f6:	f800 2b01 	strb.w	r2, [r0], #1
 800b8fa:	3901      	subs	r1, #1
 800b8fc:	d1f6      	bne.n	800b8ec <ee_number+0xac>
 800b8fe:	e7de      	b.n	800b8be <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 800b900:	4565      	cmp	r5, ip
 800b902:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800b906:	dd05      	ble.n	800b914 <ee_number+0xd4>
 800b908:	2230      	movs	r2, #48	@ 0x30
 800b90a:	f800 2b01 	strb.w	r2, [r0], #1
 800b90e:	3901      	subs	r1, #1
 800b910:	d1f6      	bne.n	800b900 <ee_number+0xc0>
 800b912:	e7d4      	b.n	800b8be <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800b914:	4662      	mov	r2, ip
 800b916:	2a00      	cmp	r2, #0
 800b918:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b91c:	dd09      	ble.n	800b932 <ee_number+0xf2>
 800b91e:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 800b922:	446a      	add	r2, sp
 800b924:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 800b928:	f800 2b01 	strb.w	r2, [r0], #1
 800b92c:	3901      	subs	r1, #1
 800b92e:	d1f1      	bne.n	800b914 <ee_number+0xd4>
 800b930:	e7c5      	b.n	800b8be <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 800b932:	2b00      	cmp	r3, #0
 800b934:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b938:	ddc1      	ble.n	800b8be <ee_number+0x7e>
 800b93a:	2220      	movs	r2, #32
 800b93c:	f800 2b01 	strb.w	r2, [r0], #1
 800b940:	3901      	subs	r1, #1
 800b942:	d1f6      	bne.n	800b932 <ee_number+0xf2>
 800b944:	e7bb      	b.n	800b8be <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 800b946:	2000      	movs	r0, #0
 800b948:	e7b9      	b.n	800b8be <ee_number+0x7e>
 800b94a:	bf00      	nop
 800b94c:	080109f4 	.word	0x080109f4
 800b950:	08010a1c 	.word	0x08010a1c

0800b954 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800b954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b958:	b087      	sub	sp, #28
 800b95a:	9205      	str	r2, [sp, #20]
 800b95c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800b95e:	1e0f      	subs	r7, r1, #0
 800b960:	f340 80b8 	ble.w	800bad4 <tiny_vsnprintf_like+0x180>
 800b964:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b966:	4604      	mov	r4, r0
 800b968:	e004      	b.n	800b974 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 800b96a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b96e:	9b05      	ldr	r3, [sp, #20]
 800b970:	3301      	adds	r3, #1
 800b972:	9305      	str	r3, [sp, #20]
 800b974:	9905      	ldr	r1, [sp, #20]
 800b976:	780a      	ldrb	r2, [r1, #0]
 800b978:	b922      	cbnz	r2, 800b984 <tiny_vsnprintf_like+0x30>
 800b97a:	1ba3      	subs	r3, r4, r6
 800b97c:	1e78      	subs	r0, r7, #1
 800b97e:	4283      	cmp	r3, r0
 800b980:	f2c0 80a2 	blt.w	800bac8 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 800b984:	1ba3      	subs	r3, r4, r6
 800b986:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b98a:	4543      	cmp	r3, r8
 800b98c:	f280 809c 	bge.w	800bac8 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 800b990:	2a25      	cmp	r2, #37	@ 0x25
 800b992:	d1ea      	bne.n	800b96a <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800b994:	1c4b      	adds	r3, r1, #1
 800b996:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 800b998:	784b      	ldrb	r3, [r1, #1]
 800b99a:	2b30      	cmp	r3, #48	@ 0x30
 800b99c:	d020      	beq.n	800b9e0 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 800b99e:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 800b9a2:	3b30      	subs	r3, #48	@ 0x30
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b09      	cmp	r3, #9
 800b9a8:	d91d      	bls.n	800b9e6 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 800b9aa:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
#endif

    // Default base
    base = 10;

    switch (*fmt)
 800b9ae:	9b05      	ldr	r3, [sp, #20]
 800b9b0:	781a      	ldrb	r2, [r3, #0]
 800b9b2:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 800b9b6:	2b20      	cmp	r3, #32
 800b9b8:	d867      	bhi.n	800ba8a <tiny_vsnprintf_like+0x136>
 800b9ba:	e8df f003 	tbb	[pc, r3]
 800b9be:	664a      	.short	0x664a
 800b9c0:	66666666 	.word	0x66666666
 800b9c4:	66666666 	.word	0x66666666
 800b9c8:	66621e66 	.word	0x66621e66
 800b9cc:	62666666 	.word	0x62666666
 800b9d0:	66666666 	.word	0x66666666
 800b9d4:	66666666 	.word	0x66666666
 800b9d8:	19662866 	.word	0x19662866
 800b9dc:	6666      	.short	0x6666
 800b9de:	7c          	.byte	0x7c
 800b9df:	00          	.byte	0x00
      flags |= ZEROPAD;
 800b9e0:	f04f 0901 	mov.w	r9, #1
 800b9e4:	e7dd      	b.n	800b9a2 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 800b9e6:	a805      	add	r0, sp, #20
 800b9e8:	f7ff ff16 	bl	800b818 <ee_skip_atoi>
 800b9ec:	4605      	mov	r5, r0
 800b9ee:	e7de      	b.n	800b9ae <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 800b9f0:	230a      	movs	r3, #10
 800b9f2:	e031      	b.n	800ba58 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800b9f4:	2320      	movs	r3, #32
 800b9f6:	f804 3b01 	strb.w	r3, [r4], #1
 800b9fa:	3d01      	subs	r5, #1
 800b9fc:	2d00      	cmp	r5, #0
 800b9fe:	dcf9      	bgt.n	800b9f4 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 800ba00:	9b04      	ldr	r3, [sp, #16]
 800ba02:	1d1a      	adds	r2, r3, #4
 800ba04:	9204      	str	r2, [sp, #16]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800ba0c:	e7af      	b.n	800b96e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 800ba0e:	9b04      	ldr	r3, [sp, #16]
 800ba10:	1d1a      	adds	r2, r3, #4
 800ba12:	9204      	str	r2, [sp, #16]
 800ba14:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 800ba18:	f1b8 0f00 	cmp.w	r8, #0
 800ba1c:	d003      	beq.n	800ba26 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 800ba1e:	4640      	mov	r0, r8
 800ba20:	f7f4 fbfe 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800ba24:	e006      	b.n	800ba34 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 800ba26:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800bad8 <tiny_vsnprintf_like+0x184>
 800ba2a:	e7f8      	b.n	800ba1e <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 800ba2c:	2220      	movs	r2, #32
 800ba2e:	f804 2b01 	strb.w	r2, [r4], #1
 800ba32:	461d      	mov	r5, r3
 800ba34:	1e6b      	subs	r3, r5, #1
 800ba36:	4285      	cmp	r5, r0
 800ba38:	dcf8      	bgt.n	800ba2c <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	e006      	b.n	800ba4c <tiny_vsnprintf_like+0xf8>
 800ba3e:	4643      	mov	r3, r8
 800ba40:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ba44:	f804 1b01 	strb.w	r1, [r4], #1
 800ba48:	3201      	adds	r2, #1
 800ba4a:	4698      	mov	r8, r3
 800ba4c:	4282      	cmp	r2, r0
 800ba4e:	dbf6      	blt.n	800ba3e <tiny_vsnprintf_like+0xea>
 800ba50:	e78d      	b.n	800b96e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800ba52:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 800ba56:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 800ba58:	f019 0f02 	tst.w	r9, #2
 800ba5c:	d02f      	beq.n	800babe <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 800ba5e:	9a04      	ldr	r2, [sp, #16]
 800ba60:	1d11      	adds	r1, r2, #4
 800ba62:	9104      	str	r1, [sp, #16]
 800ba64:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800ba66:	1ba1      	subs	r1, r4, r6
 800ba68:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba70:	9001      	str	r0, [sp, #4]
 800ba72:	9500      	str	r5, [sp, #0]
 800ba74:	eba8 0101 	sub.w	r1, r8, r1
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f7ff fee1 	bl	800b840 <ee_number>
 800ba7e:	4604      	mov	r4, r0
 800ba80:	e775      	b.n	800b96e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 800ba82:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 800ba86:	230a      	movs	r3, #10
 800ba88:	e7e6      	b.n	800ba58 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800ba8a:	2a25      	cmp	r2, #37	@ 0x25
 800ba8c:	d002      	beq.n	800ba94 <tiny_vsnprintf_like+0x140>
 800ba8e:	2325      	movs	r3, #37	@ 0x25
 800ba90:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800ba94:	1ba3      	subs	r3, r4, r6
 800ba96:	4598      	cmp	r8, r3
 800ba98:	dd0f      	ble.n	800baba <tiny_vsnprintf_like+0x166>
        if (*fmt)
 800ba9a:	9b05      	ldr	r3, [sp, #20]
 800ba9c:	781a      	ldrb	r2, [r3, #0]
 800ba9e:	b13a      	cbz	r2, 800bab0 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 800baa0:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800baa4:	1ba3      	subs	r3, r4, r6
 800baa6:	4598      	cmp	r8, r3
 800baa8:	f73f af61 	bgt.w	800b96e <tiny_vsnprintf_like+0x1a>
    base = 10;
 800baac:	230a      	movs	r3, #10
 800baae:	e7d3      	b.n	800ba58 <tiny_vsnprintf_like+0x104>
          --fmt;
 800bab0:	3b01      	subs	r3, #1
 800bab2:	9305      	str	r3, [sp, #20]
 800bab4:	e7f6      	b.n	800baa4 <tiny_vsnprintf_like+0x150>
        base = 16;
 800bab6:	2310      	movs	r3, #16
 800bab8:	e7ce      	b.n	800ba58 <tiny_vsnprintf_like+0x104>
    base = 10;
 800baba:	230a      	movs	r3, #10
 800babc:	e7cc      	b.n	800ba58 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 800babe:	9a04      	ldr	r2, [sp, #16]
 800bac0:	1d11      	adds	r1, r2, #4
 800bac2:	9104      	str	r1, [sp, #16]
 800bac4:	6812      	ldr	r2, [r2, #0]
 800bac6:	e7ce      	b.n	800ba66 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 800bac8:	2300      	movs	r3, #0
 800baca:	7023      	strb	r3, [r4, #0]
  return str - buf;
 800bacc:	1ba0      	subs	r0, r4, r6
}
 800bace:	b007      	add	sp, #28
 800bad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 800bad4:	2000      	movs	r0, #0
 800bad6:	e7fa      	b.n	800bace <tiny_vsnprintf_like+0x17a>
 800bad8:	08010a44 	.word	0x08010a44

0800badc <atoi>:
 800badc:	220a      	movs	r2, #10
 800bade:	2100      	movs	r1, #0
 800bae0:	f000 b87a 	b.w	800bbd8 <strtol>

0800bae4 <_strtol_l.isra.0>:
 800bae4:	2b24      	cmp	r3, #36	@ 0x24
 800bae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baea:	4686      	mov	lr, r0
 800baec:	4690      	mov	r8, r2
 800baee:	d801      	bhi.n	800baf4 <_strtol_l.isra.0+0x10>
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d106      	bne.n	800bb02 <_strtol_l.isra.0+0x1e>
 800baf4:	f000 ffd8 	bl	800caa8 <__errno>
 800baf8:	2316      	movs	r3, #22
 800bafa:	6003      	str	r3, [r0, #0]
 800bafc:	2000      	movs	r0, #0
 800bafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb02:	4834      	ldr	r0, [pc, #208]	@ (800bbd4 <_strtol_l.isra.0+0xf0>)
 800bb04:	460d      	mov	r5, r1
 800bb06:	462a      	mov	r2, r5
 800bb08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb0c:	5d06      	ldrb	r6, [r0, r4]
 800bb0e:	f016 0608 	ands.w	r6, r6, #8
 800bb12:	d1f8      	bne.n	800bb06 <_strtol_l.isra.0+0x22>
 800bb14:	2c2d      	cmp	r4, #45	@ 0x2d
 800bb16:	d110      	bne.n	800bb3a <_strtol_l.isra.0+0x56>
 800bb18:	782c      	ldrb	r4, [r5, #0]
 800bb1a:	2601      	movs	r6, #1
 800bb1c:	1c95      	adds	r5, r2, #2
 800bb1e:	f033 0210 	bics.w	r2, r3, #16
 800bb22:	d115      	bne.n	800bb50 <_strtol_l.isra.0+0x6c>
 800bb24:	2c30      	cmp	r4, #48	@ 0x30
 800bb26:	d10d      	bne.n	800bb44 <_strtol_l.isra.0+0x60>
 800bb28:	782a      	ldrb	r2, [r5, #0]
 800bb2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bb2e:	2a58      	cmp	r2, #88	@ 0x58
 800bb30:	d108      	bne.n	800bb44 <_strtol_l.isra.0+0x60>
 800bb32:	786c      	ldrb	r4, [r5, #1]
 800bb34:	3502      	adds	r5, #2
 800bb36:	2310      	movs	r3, #16
 800bb38:	e00a      	b.n	800bb50 <_strtol_l.isra.0+0x6c>
 800bb3a:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb3c:	bf04      	itt	eq
 800bb3e:	782c      	ldrbeq	r4, [r5, #0]
 800bb40:	1c95      	addeq	r5, r2, #2
 800bb42:	e7ec      	b.n	800bb1e <_strtol_l.isra.0+0x3a>
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1f6      	bne.n	800bb36 <_strtol_l.isra.0+0x52>
 800bb48:	2c30      	cmp	r4, #48	@ 0x30
 800bb4a:	bf14      	ite	ne
 800bb4c:	230a      	movne	r3, #10
 800bb4e:	2308      	moveq	r3, #8
 800bb50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bb54:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800bb58:	2200      	movs	r2, #0
 800bb5a:	fbbc f9f3 	udiv	r9, ip, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	fb03 ca19 	mls	sl, r3, r9, ip
 800bb64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bb68:	2f09      	cmp	r7, #9
 800bb6a:	d80f      	bhi.n	800bb8c <_strtol_l.isra.0+0xa8>
 800bb6c:	463c      	mov	r4, r7
 800bb6e:	42a3      	cmp	r3, r4
 800bb70:	dd1b      	ble.n	800bbaa <_strtol_l.isra.0+0xc6>
 800bb72:	1c57      	adds	r7, r2, #1
 800bb74:	d007      	beq.n	800bb86 <_strtol_l.isra.0+0xa2>
 800bb76:	4581      	cmp	r9, r0
 800bb78:	d314      	bcc.n	800bba4 <_strtol_l.isra.0+0xc0>
 800bb7a:	d101      	bne.n	800bb80 <_strtol_l.isra.0+0x9c>
 800bb7c:	45a2      	cmp	sl, r4
 800bb7e:	db11      	blt.n	800bba4 <_strtol_l.isra.0+0xc0>
 800bb80:	fb00 4003 	mla	r0, r0, r3, r4
 800bb84:	2201      	movs	r2, #1
 800bb86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb8a:	e7eb      	b.n	800bb64 <_strtol_l.isra.0+0x80>
 800bb8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bb90:	2f19      	cmp	r7, #25
 800bb92:	d801      	bhi.n	800bb98 <_strtol_l.isra.0+0xb4>
 800bb94:	3c37      	subs	r4, #55	@ 0x37
 800bb96:	e7ea      	b.n	800bb6e <_strtol_l.isra.0+0x8a>
 800bb98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bb9c:	2f19      	cmp	r7, #25
 800bb9e:	d804      	bhi.n	800bbaa <_strtol_l.isra.0+0xc6>
 800bba0:	3c57      	subs	r4, #87	@ 0x57
 800bba2:	e7e4      	b.n	800bb6e <_strtol_l.isra.0+0x8a>
 800bba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bba8:	e7ed      	b.n	800bb86 <_strtol_l.isra.0+0xa2>
 800bbaa:	1c53      	adds	r3, r2, #1
 800bbac:	d108      	bne.n	800bbc0 <_strtol_l.isra.0+0xdc>
 800bbae:	2322      	movs	r3, #34	@ 0x22
 800bbb0:	f8ce 3000 	str.w	r3, [lr]
 800bbb4:	4660      	mov	r0, ip
 800bbb6:	f1b8 0f00 	cmp.w	r8, #0
 800bbba:	d0a0      	beq.n	800bafe <_strtol_l.isra.0+0x1a>
 800bbbc:	1e69      	subs	r1, r5, #1
 800bbbe:	e006      	b.n	800bbce <_strtol_l.isra.0+0xea>
 800bbc0:	b106      	cbz	r6, 800bbc4 <_strtol_l.isra.0+0xe0>
 800bbc2:	4240      	negs	r0, r0
 800bbc4:	f1b8 0f00 	cmp.w	r8, #0
 800bbc8:	d099      	beq.n	800bafe <_strtol_l.isra.0+0x1a>
 800bbca:	2a00      	cmp	r2, #0
 800bbcc:	d1f6      	bne.n	800bbbc <_strtol_l.isra.0+0xd8>
 800bbce:	f8c8 1000 	str.w	r1, [r8]
 800bbd2:	e794      	b.n	800bafe <_strtol_l.isra.0+0x1a>
 800bbd4:	08010ccd 	.word	0x08010ccd

0800bbd8 <strtol>:
 800bbd8:	4613      	mov	r3, r2
 800bbda:	460a      	mov	r2, r1
 800bbdc:	4601      	mov	r1, r0
 800bbde:	4802      	ldr	r0, [pc, #8]	@ (800bbe8 <strtol+0x10>)
 800bbe0:	6800      	ldr	r0, [r0, #0]
 800bbe2:	f7ff bf7f 	b.w	800bae4 <_strtol_l.isra.0>
 800bbe6:	bf00      	nop
 800bbe8:	20000104 	.word	0x20000104

0800bbec <__cvt>:
 800bbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf0:	b088      	sub	sp, #32
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	461d      	mov	r5, r3
 800bbf6:	4614      	mov	r4, r2
 800bbf8:	bfbc      	itt	lt
 800bbfa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800bbfe:	4614      	movlt	r4, r2
 800bc00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bc02:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800bc04:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800bc08:	bfb6      	itet	lt
 800bc0a:	461d      	movlt	r5, r3
 800bc0c:	2300      	movge	r3, #0
 800bc0e:	232d      	movlt	r3, #45	@ 0x2d
 800bc10:	7013      	strb	r3, [r2, #0]
 800bc12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc14:	f023 0820 	bic.w	r8, r3, #32
 800bc18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc1c:	d005      	beq.n	800bc2a <__cvt+0x3e>
 800bc1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bc22:	d100      	bne.n	800bc26 <__cvt+0x3a>
 800bc24:	3601      	adds	r6, #1
 800bc26:	2302      	movs	r3, #2
 800bc28:	e000      	b.n	800bc2c <__cvt+0x40>
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	aa07      	add	r2, sp, #28
 800bc2e:	9204      	str	r2, [sp, #16]
 800bc30:	aa06      	add	r2, sp, #24
 800bc32:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bc36:	e9cd 3600 	strd	r3, r6, [sp]
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	f000 fff7 	bl	800cc30 <_dtoa_r>
 800bc42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bc46:	4607      	mov	r7, r0
 800bc48:	d119      	bne.n	800bc7e <__cvt+0x92>
 800bc4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc4c:	07db      	lsls	r3, r3, #31
 800bc4e:	d50e      	bpl.n	800bc6e <__cvt+0x82>
 800bc50:	eb00 0906 	add.w	r9, r0, r6
 800bc54:	2200      	movs	r2, #0
 800bc56:	2300      	movs	r3, #0
 800bc58:	4620      	mov	r0, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f4 ff0c 	bl	8000a78 <__aeabi_dcmpeq>
 800bc60:	b108      	cbz	r0, 800bc66 <__cvt+0x7a>
 800bc62:	f8cd 901c 	str.w	r9, [sp, #28]
 800bc66:	2230      	movs	r2, #48	@ 0x30
 800bc68:	9b07      	ldr	r3, [sp, #28]
 800bc6a:	454b      	cmp	r3, r9
 800bc6c:	d31e      	bcc.n	800bcac <__cvt+0xc0>
 800bc6e:	9b07      	ldr	r3, [sp, #28]
 800bc70:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bc72:	1bdb      	subs	r3, r3, r7
 800bc74:	4638      	mov	r0, r7
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	b008      	add	sp, #32
 800bc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc82:	eb00 0906 	add.w	r9, r0, r6
 800bc86:	d1e5      	bne.n	800bc54 <__cvt+0x68>
 800bc88:	7803      	ldrb	r3, [r0, #0]
 800bc8a:	2b30      	cmp	r3, #48	@ 0x30
 800bc8c:	d10a      	bne.n	800bca4 <__cvt+0xb8>
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2300      	movs	r3, #0
 800bc92:	4620      	mov	r0, r4
 800bc94:	4629      	mov	r1, r5
 800bc96:	f7f4 feef 	bl	8000a78 <__aeabi_dcmpeq>
 800bc9a:	b918      	cbnz	r0, 800bca4 <__cvt+0xb8>
 800bc9c:	f1c6 0601 	rsb	r6, r6, #1
 800bca0:	f8ca 6000 	str.w	r6, [sl]
 800bca4:	f8da 3000 	ldr.w	r3, [sl]
 800bca8:	4499      	add	r9, r3
 800bcaa:	e7d3      	b.n	800bc54 <__cvt+0x68>
 800bcac:	1c59      	adds	r1, r3, #1
 800bcae:	9107      	str	r1, [sp, #28]
 800bcb0:	701a      	strb	r2, [r3, #0]
 800bcb2:	e7d9      	b.n	800bc68 <__cvt+0x7c>

0800bcb4 <__exponent>:
 800bcb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcb6:	2900      	cmp	r1, #0
 800bcb8:	bfba      	itte	lt
 800bcba:	4249      	neglt	r1, r1
 800bcbc:	232d      	movlt	r3, #45	@ 0x2d
 800bcbe:	232b      	movge	r3, #43	@ 0x2b
 800bcc0:	2909      	cmp	r1, #9
 800bcc2:	7002      	strb	r2, [r0, #0]
 800bcc4:	7043      	strb	r3, [r0, #1]
 800bcc6:	dd29      	ble.n	800bd1c <__exponent+0x68>
 800bcc8:	f10d 0307 	add.w	r3, sp, #7
 800bccc:	461d      	mov	r5, r3
 800bcce:	270a      	movs	r7, #10
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	fbb1 f6f7 	udiv	r6, r1, r7
 800bcd6:	fb07 1416 	mls	r4, r7, r6, r1
 800bcda:	3430      	adds	r4, #48	@ 0x30
 800bcdc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bce0:	460c      	mov	r4, r1
 800bce2:	2c63      	cmp	r4, #99	@ 0x63
 800bce4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bce8:	4631      	mov	r1, r6
 800bcea:	dcf1      	bgt.n	800bcd0 <__exponent+0x1c>
 800bcec:	3130      	adds	r1, #48	@ 0x30
 800bcee:	1e94      	subs	r4, r2, #2
 800bcf0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bcf4:	1c41      	adds	r1, r0, #1
 800bcf6:	4623      	mov	r3, r4
 800bcf8:	42ab      	cmp	r3, r5
 800bcfa:	d30a      	bcc.n	800bd12 <__exponent+0x5e>
 800bcfc:	f10d 0309 	add.w	r3, sp, #9
 800bd00:	1a9b      	subs	r3, r3, r2
 800bd02:	42ac      	cmp	r4, r5
 800bd04:	bf88      	it	hi
 800bd06:	2300      	movhi	r3, #0
 800bd08:	3302      	adds	r3, #2
 800bd0a:	4403      	add	r3, r0
 800bd0c:	1a18      	subs	r0, r3, r0
 800bd0e:	b003      	add	sp, #12
 800bd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd12:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bd16:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bd1a:	e7ed      	b.n	800bcf8 <__exponent+0x44>
 800bd1c:	2330      	movs	r3, #48	@ 0x30
 800bd1e:	3130      	adds	r1, #48	@ 0x30
 800bd20:	7083      	strb	r3, [r0, #2]
 800bd22:	70c1      	strb	r1, [r0, #3]
 800bd24:	1d03      	adds	r3, r0, #4
 800bd26:	e7f1      	b.n	800bd0c <__exponent+0x58>

0800bd28 <_printf_float>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	b091      	sub	sp, #68	@ 0x44
 800bd2e:	460c      	mov	r4, r1
 800bd30:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800bd34:	4616      	mov	r6, r2
 800bd36:	461f      	mov	r7, r3
 800bd38:	4605      	mov	r5, r0
 800bd3a:	f000 fe6b 	bl	800ca14 <_localeconv_r>
 800bd3e:	6803      	ldr	r3, [r0, #0]
 800bd40:	9308      	str	r3, [sp, #32]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f4 fa6c 	bl	8000220 <strlen>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	930e      	str	r3, [sp, #56]	@ 0x38
 800bd4c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd50:	9009      	str	r0, [sp, #36]	@ 0x24
 800bd52:	3307      	adds	r3, #7
 800bd54:	f023 0307 	bic.w	r3, r3, #7
 800bd58:	f103 0208 	add.w	r2, r3, #8
 800bd5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bd60:	f8d4 b000 	ldr.w	fp, [r4]
 800bd64:	f8c8 2000 	str.w	r2, [r8]
 800bd68:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bd70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd72:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800bd76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bd7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd7e:	4b9d      	ldr	r3, [pc, #628]	@ (800bff4 <_printf_float+0x2cc>)
 800bd80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd84:	f7f4 feaa 	bl	8000adc <__aeabi_dcmpun>
 800bd88:	bb70      	cbnz	r0, 800bde8 <_printf_float+0xc0>
 800bd8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd8e:	4b99      	ldr	r3, [pc, #612]	@ (800bff4 <_printf_float+0x2cc>)
 800bd90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd94:	f7f4 fe84 	bl	8000aa0 <__aeabi_dcmple>
 800bd98:	bb30      	cbnz	r0, 800bde8 <_printf_float+0xc0>
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4640      	mov	r0, r8
 800bda0:	4649      	mov	r1, r9
 800bda2:	f7f4 fe73 	bl	8000a8c <__aeabi_dcmplt>
 800bda6:	b110      	cbz	r0, 800bdae <_printf_float+0x86>
 800bda8:	232d      	movs	r3, #45	@ 0x2d
 800bdaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdae:	4a92      	ldr	r2, [pc, #584]	@ (800bff8 <_printf_float+0x2d0>)
 800bdb0:	4b92      	ldr	r3, [pc, #584]	@ (800bffc <_printf_float+0x2d4>)
 800bdb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bdb6:	bf8c      	ite	hi
 800bdb8:	4690      	movhi	r8, r2
 800bdba:	4698      	movls	r8, r3
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	6123      	str	r3, [r4, #16]
 800bdc0:	f02b 0304 	bic.w	r3, fp, #4
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	f04f 0900 	mov.w	r9, #0
 800bdca:	9700      	str	r7, [sp, #0]
 800bdcc:	4633      	mov	r3, r6
 800bdce:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f000 f9d4 	bl	800c180 <_printf_common>
 800bdd8:	3001      	adds	r0, #1
 800bdda:	f040 808f 	bne.w	800befc <_printf_float+0x1d4>
 800bdde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bde2:	b011      	add	sp, #68	@ 0x44
 800bde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde8:	4642      	mov	r2, r8
 800bdea:	464b      	mov	r3, r9
 800bdec:	4640      	mov	r0, r8
 800bdee:	4649      	mov	r1, r9
 800bdf0:	f7f4 fe74 	bl	8000adc <__aeabi_dcmpun>
 800bdf4:	b140      	cbz	r0, 800be08 <_printf_float+0xe0>
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	bfbc      	itt	lt
 800bdfc:	232d      	movlt	r3, #45	@ 0x2d
 800bdfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800be02:	4a7f      	ldr	r2, [pc, #508]	@ (800c000 <_printf_float+0x2d8>)
 800be04:	4b7f      	ldr	r3, [pc, #508]	@ (800c004 <_printf_float+0x2dc>)
 800be06:	e7d4      	b.n	800bdb2 <_printf_float+0x8a>
 800be08:	6863      	ldr	r3, [r4, #4]
 800be0a:	1c5a      	adds	r2, r3, #1
 800be0c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800be10:	d13f      	bne.n	800be92 <_printf_float+0x16a>
 800be12:	2306      	movs	r3, #6
 800be14:	6063      	str	r3, [r4, #4]
 800be16:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800be1a:	2200      	movs	r2, #0
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	9206      	str	r2, [sp, #24]
 800be20:	aa0e      	add	r2, sp, #56	@ 0x38
 800be22:	e9cd a204 	strd	sl, r2, [sp, #16]
 800be26:	aa0d      	add	r2, sp, #52	@ 0x34
 800be28:	9203      	str	r2, [sp, #12]
 800be2a:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800be2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800be32:	6863      	ldr	r3, [r4, #4]
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	4642      	mov	r2, r8
 800be38:	464b      	mov	r3, r9
 800be3a:	4628      	mov	r0, r5
 800be3c:	910a      	str	r1, [sp, #40]	@ 0x28
 800be3e:	f7ff fed5 	bl	800bbec <__cvt>
 800be42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be44:	2947      	cmp	r1, #71	@ 0x47
 800be46:	4680      	mov	r8, r0
 800be48:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800be4a:	d128      	bne.n	800be9e <_printf_float+0x176>
 800be4c:	1cc8      	adds	r0, r1, #3
 800be4e:	db02      	blt.n	800be56 <_printf_float+0x12e>
 800be50:	6863      	ldr	r3, [r4, #4]
 800be52:	4299      	cmp	r1, r3
 800be54:	dd40      	ble.n	800bed8 <_printf_float+0x1b0>
 800be56:	f1aa 0a02 	sub.w	sl, sl, #2
 800be5a:	fa5f fa8a 	uxtb.w	sl, sl
 800be5e:	3901      	subs	r1, #1
 800be60:	4652      	mov	r2, sl
 800be62:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800be66:	910d      	str	r1, [sp, #52]	@ 0x34
 800be68:	f7ff ff24 	bl	800bcb4 <__exponent>
 800be6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be6e:	1813      	adds	r3, r2, r0
 800be70:	2a01      	cmp	r2, #1
 800be72:	4681      	mov	r9, r0
 800be74:	6123      	str	r3, [r4, #16]
 800be76:	dc02      	bgt.n	800be7e <_printf_float+0x156>
 800be78:	6822      	ldr	r2, [r4, #0]
 800be7a:	07d2      	lsls	r2, r2, #31
 800be7c:	d501      	bpl.n	800be82 <_printf_float+0x15a>
 800be7e:	3301      	adds	r3, #1
 800be80:	6123      	str	r3, [r4, #16]
 800be82:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800be86:	2b00      	cmp	r3, #0
 800be88:	d09f      	beq.n	800bdca <_printf_float+0xa2>
 800be8a:	232d      	movs	r3, #45	@ 0x2d
 800be8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be90:	e79b      	b.n	800bdca <_printf_float+0xa2>
 800be92:	2947      	cmp	r1, #71	@ 0x47
 800be94:	d1bf      	bne.n	800be16 <_printf_float+0xee>
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1bd      	bne.n	800be16 <_printf_float+0xee>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e7ba      	b.n	800be14 <_printf_float+0xec>
 800be9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bea2:	d9dc      	bls.n	800be5e <_printf_float+0x136>
 800bea4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bea8:	d118      	bne.n	800bedc <_printf_float+0x1b4>
 800beaa:	2900      	cmp	r1, #0
 800beac:	6863      	ldr	r3, [r4, #4]
 800beae:	dd0b      	ble.n	800bec8 <_printf_float+0x1a0>
 800beb0:	6121      	str	r1, [r4, #16]
 800beb2:	b913      	cbnz	r3, 800beba <_printf_float+0x192>
 800beb4:	6822      	ldr	r2, [r4, #0]
 800beb6:	07d0      	lsls	r0, r2, #31
 800beb8:	d502      	bpl.n	800bec0 <_printf_float+0x198>
 800beba:	3301      	adds	r3, #1
 800bebc:	440b      	add	r3, r1
 800bebe:	6123      	str	r3, [r4, #16]
 800bec0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bec2:	f04f 0900 	mov.w	r9, #0
 800bec6:	e7dc      	b.n	800be82 <_printf_float+0x15a>
 800bec8:	b913      	cbnz	r3, 800bed0 <_printf_float+0x1a8>
 800beca:	6822      	ldr	r2, [r4, #0]
 800becc:	07d2      	lsls	r2, r2, #31
 800bece:	d501      	bpl.n	800bed4 <_printf_float+0x1ac>
 800bed0:	3302      	adds	r3, #2
 800bed2:	e7f4      	b.n	800bebe <_printf_float+0x196>
 800bed4:	2301      	movs	r3, #1
 800bed6:	e7f2      	b.n	800bebe <_printf_float+0x196>
 800bed8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bedc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bede:	4299      	cmp	r1, r3
 800bee0:	db05      	blt.n	800beee <_printf_float+0x1c6>
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	6121      	str	r1, [r4, #16]
 800bee6:	07d8      	lsls	r0, r3, #31
 800bee8:	d5ea      	bpl.n	800bec0 <_printf_float+0x198>
 800beea:	1c4b      	adds	r3, r1, #1
 800beec:	e7e7      	b.n	800bebe <_printf_float+0x196>
 800beee:	2900      	cmp	r1, #0
 800bef0:	bfd4      	ite	le
 800bef2:	f1c1 0202 	rsble	r2, r1, #2
 800bef6:	2201      	movgt	r2, #1
 800bef8:	4413      	add	r3, r2
 800befa:	e7e0      	b.n	800bebe <_printf_float+0x196>
 800befc:	6823      	ldr	r3, [r4, #0]
 800befe:	055a      	lsls	r2, r3, #21
 800bf00:	d407      	bmi.n	800bf12 <_printf_float+0x1ea>
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	4642      	mov	r2, r8
 800bf06:	4631      	mov	r1, r6
 800bf08:	4628      	mov	r0, r5
 800bf0a:	47b8      	blx	r7
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	d12b      	bne.n	800bf68 <_printf_float+0x240>
 800bf10:	e765      	b.n	800bdde <_printf_float+0xb6>
 800bf12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf16:	f240 80dd 	bls.w	800c0d4 <_printf_float+0x3ac>
 800bf1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf1e:	2200      	movs	r2, #0
 800bf20:	2300      	movs	r3, #0
 800bf22:	f7f4 fda9 	bl	8000a78 <__aeabi_dcmpeq>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d033      	beq.n	800bf92 <_printf_float+0x26a>
 800bf2a:	4a37      	ldr	r2, [pc, #220]	@ (800c008 <_printf_float+0x2e0>)
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	4631      	mov	r1, r6
 800bf30:	4628      	mov	r0, r5
 800bf32:	47b8      	blx	r7
 800bf34:	3001      	adds	r0, #1
 800bf36:	f43f af52 	beq.w	800bdde <_printf_float+0xb6>
 800bf3a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800bf3e:	4543      	cmp	r3, r8
 800bf40:	db02      	blt.n	800bf48 <_printf_float+0x220>
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	07d8      	lsls	r0, r3, #31
 800bf46:	d50f      	bpl.n	800bf68 <_printf_float+0x240>
 800bf48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4628      	mov	r0, r5
 800bf50:	47b8      	blx	r7
 800bf52:	3001      	adds	r0, #1
 800bf54:	f43f af43 	beq.w	800bdde <_printf_float+0xb6>
 800bf58:	f04f 0900 	mov.w	r9, #0
 800bf5c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bf60:	f104 0a1a 	add.w	sl, r4, #26
 800bf64:	45c8      	cmp	r8, r9
 800bf66:	dc09      	bgt.n	800bf7c <_printf_float+0x254>
 800bf68:	6823      	ldr	r3, [r4, #0]
 800bf6a:	079b      	lsls	r3, r3, #30
 800bf6c:	f100 8103 	bmi.w	800c176 <_printf_float+0x44e>
 800bf70:	68e0      	ldr	r0, [r4, #12]
 800bf72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf74:	4298      	cmp	r0, r3
 800bf76:	bfb8      	it	lt
 800bf78:	4618      	movlt	r0, r3
 800bf7a:	e732      	b.n	800bde2 <_printf_float+0xba>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	4652      	mov	r2, sl
 800bf80:	4631      	mov	r1, r6
 800bf82:	4628      	mov	r0, r5
 800bf84:	47b8      	blx	r7
 800bf86:	3001      	adds	r0, #1
 800bf88:	f43f af29 	beq.w	800bdde <_printf_float+0xb6>
 800bf8c:	f109 0901 	add.w	r9, r9, #1
 800bf90:	e7e8      	b.n	800bf64 <_printf_float+0x23c>
 800bf92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dc39      	bgt.n	800c00c <_printf_float+0x2e4>
 800bf98:	4a1b      	ldr	r2, [pc, #108]	@ (800c008 <_printf_float+0x2e0>)
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	47b8      	blx	r7
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	f43f af1b 	beq.w	800bdde <_printf_float+0xb6>
 800bfa8:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800bfac:	ea59 0303 	orrs.w	r3, r9, r3
 800bfb0:	d102      	bne.n	800bfb8 <_printf_float+0x290>
 800bfb2:	6823      	ldr	r3, [r4, #0]
 800bfb4:	07d9      	lsls	r1, r3, #31
 800bfb6:	d5d7      	bpl.n	800bf68 <_printf_float+0x240>
 800bfb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bfbc:	4631      	mov	r1, r6
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	47b8      	blx	r7
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	f43f af0b 	beq.w	800bdde <_printf_float+0xb6>
 800bfc8:	f04f 0a00 	mov.w	sl, #0
 800bfcc:	f104 0b1a 	add.w	fp, r4, #26
 800bfd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfd2:	425b      	negs	r3, r3
 800bfd4:	4553      	cmp	r3, sl
 800bfd6:	dc01      	bgt.n	800bfdc <_printf_float+0x2b4>
 800bfd8:	464b      	mov	r3, r9
 800bfda:	e793      	b.n	800bf04 <_printf_float+0x1dc>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	465a      	mov	r2, fp
 800bfe0:	4631      	mov	r1, r6
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	47b8      	blx	r7
 800bfe6:	3001      	adds	r0, #1
 800bfe8:	f43f aef9 	beq.w	800bdde <_printf_float+0xb6>
 800bfec:	f10a 0a01 	add.w	sl, sl, #1
 800bff0:	e7ee      	b.n	800bfd0 <_printf_float+0x2a8>
 800bff2:	bf00      	nop
 800bff4:	7fefffff 	.word	0x7fefffff
 800bff8:	08010dd1 	.word	0x08010dd1
 800bffc:	08010dcd 	.word	0x08010dcd
 800c000:	08010dd9 	.word	0x08010dd9
 800c004:	08010dd5 	.word	0x08010dd5
 800c008:	08010ddd 	.word	0x08010ddd
 800c00c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c00e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c012:	4553      	cmp	r3, sl
 800c014:	bfa8      	it	ge
 800c016:	4653      	movge	r3, sl
 800c018:	2b00      	cmp	r3, #0
 800c01a:	4699      	mov	r9, r3
 800c01c:	dc36      	bgt.n	800c08c <_printf_float+0x364>
 800c01e:	f04f 0b00 	mov.w	fp, #0
 800c022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c026:	f104 021a 	add.w	r2, r4, #26
 800c02a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c02c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c02e:	eba3 0309 	sub.w	r3, r3, r9
 800c032:	455b      	cmp	r3, fp
 800c034:	dc31      	bgt.n	800c09a <_printf_float+0x372>
 800c036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c038:	459a      	cmp	sl, r3
 800c03a:	dc3a      	bgt.n	800c0b2 <_printf_float+0x38a>
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	07da      	lsls	r2, r3, #31
 800c040:	d437      	bmi.n	800c0b2 <_printf_float+0x38a>
 800c042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c044:	ebaa 0903 	sub.w	r9, sl, r3
 800c048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c04a:	ebaa 0303 	sub.w	r3, sl, r3
 800c04e:	4599      	cmp	r9, r3
 800c050:	bfa8      	it	ge
 800c052:	4699      	movge	r9, r3
 800c054:	f1b9 0f00 	cmp.w	r9, #0
 800c058:	dc33      	bgt.n	800c0c2 <_printf_float+0x39a>
 800c05a:	f04f 0800 	mov.w	r8, #0
 800c05e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c062:	f104 0b1a 	add.w	fp, r4, #26
 800c066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c068:	ebaa 0303 	sub.w	r3, sl, r3
 800c06c:	eba3 0309 	sub.w	r3, r3, r9
 800c070:	4543      	cmp	r3, r8
 800c072:	f77f af79 	ble.w	800bf68 <_printf_float+0x240>
 800c076:	2301      	movs	r3, #1
 800c078:	465a      	mov	r2, fp
 800c07a:	4631      	mov	r1, r6
 800c07c:	4628      	mov	r0, r5
 800c07e:	47b8      	blx	r7
 800c080:	3001      	adds	r0, #1
 800c082:	f43f aeac 	beq.w	800bdde <_printf_float+0xb6>
 800c086:	f108 0801 	add.w	r8, r8, #1
 800c08a:	e7ec      	b.n	800c066 <_printf_float+0x33e>
 800c08c:	4642      	mov	r2, r8
 800c08e:	4631      	mov	r1, r6
 800c090:	4628      	mov	r0, r5
 800c092:	47b8      	blx	r7
 800c094:	3001      	adds	r0, #1
 800c096:	d1c2      	bne.n	800c01e <_printf_float+0x2f6>
 800c098:	e6a1      	b.n	800bdde <_printf_float+0xb6>
 800c09a:	2301      	movs	r3, #1
 800c09c:	4631      	mov	r1, r6
 800c09e:	4628      	mov	r0, r5
 800c0a0:	920a      	str	r2, [sp, #40]	@ 0x28
 800c0a2:	47b8      	blx	r7
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	f43f ae9a 	beq.w	800bdde <_printf_float+0xb6>
 800c0aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0ac:	f10b 0b01 	add.w	fp, fp, #1
 800c0b0:	e7bb      	b.n	800c02a <_printf_float+0x302>
 800c0b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0b6:	4631      	mov	r1, r6
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	47b8      	blx	r7
 800c0bc:	3001      	adds	r0, #1
 800c0be:	d1c0      	bne.n	800c042 <_printf_float+0x31a>
 800c0c0:	e68d      	b.n	800bdde <_printf_float+0xb6>
 800c0c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	4442      	add	r2, r8
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	47b8      	blx	r7
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	d1c3      	bne.n	800c05a <_printf_float+0x332>
 800c0d2:	e684      	b.n	800bdde <_printf_float+0xb6>
 800c0d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c0d8:	f1ba 0f01 	cmp.w	sl, #1
 800c0dc:	dc01      	bgt.n	800c0e2 <_printf_float+0x3ba>
 800c0de:	07db      	lsls	r3, r3, #31
 800c0e0:	d536      	bpl.n	800c150 <_printf_float+0x428>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	4642      	mov	r2, r8
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	47b8      	blx	r7
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	f43f ae76 	beq.w	800bdde <_printf_float+0xb6>
 800c0f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0f6:	4631      	mov	r1, r6
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	47b8      	blx	r7
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	f43f ae6e 	beq.w	800bdde <_printf_float+0xb6>
 800c102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c106:	2200      	movs	r2, #0
 800c108:	2300      	movs	r3, #0
 800c10a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c10e:	f7f4 fcb3 	bl	8000a78 <__aeabi_dcmpeq>
 800c112:	b9c0      	cbnz	r0, 800c146 <_printf_float+0x41e>
 800c114:	4653      	mov	r3, sl
 800c116:	f108 0201 	add.w	r2, r8, #1
 800c11a:	4631      	mov	r1, r6
 800c11c:	4628      	mov	r0, r5
 800c11e:	47b8      	blx	r7
 800c120:	3001      	adds	r0, #1
 800c122:	d10c      	bne.n	800c13e <_printf_float+0x416>
 800c124:	e65b      	b.n	800bdde <_printf_float+0xb6>
 800c126:	2301      	movs	r3, #1
 800c128:	465a      	mov	r2, fp
 800c12a:	4631      	mov	r1, r6
 800c12c:	4628      	mov	r0, r5
 800c12e:	47b8      	blx	r7
 800c130:	3001      	adds	r0, #1
 800c132:	f43f ae54 	beq.w	800bdde <_printf_float+0xb6>
 800c136:	f108 0801 	add.w	r8, r8, #1
 800c13a:	45d0      	cmp	r8, sl
 800c13c:	dbf3      	blt.n	800c126 <_printf_float+0x3fe>
 800c13e:	464b      	mov	r3, r9
 800c140:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c144:	e6df      	b.n	800bf06 <_printf_float+0x1de>
 800c146:	f04f 0800 	mov.w	r8, #0
 800c14a:	f104 0b1a 	add.w	fp, r4, #26
 800c14e:	e7f4      	b.n	800c13a <_printf_float+0x412>
 800c150:	2301      	movs	r3, #1
 800c152:	4642      	mov	r2, r8
 800c154:	e7e1      	b.n	800c11a <_printf_float+0x3f2>
 800c156:	2301      	movs	r3, #1
 800c158:	464a      	mov	r2, r9
 800c15a:	4631      	mov	r1, r6
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b8      	blx	r7
 800c160:	3001      	adds	r0, #1
 800c162:	f43f ae3c 	beq.w	800bdde <_printf_float+0xb6>
 800c166:	f108 0801 	add.w	r8, r8, #1
 800c16a:	68e3      	ldr	r3, [r4, #12]
 800c16c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c16e:	1a5b      	subs	r3, r3, r1
 800c170:	4543      	cmp	r3, r8
 800c172:	dcf0      	bgt.n	800c156 <_printf_float+0x42e>
 800c174:	e6fc      	b.n	800bf70 <_printf_float+0x248>
 800c176:	f04f 0800 	mov.w	r8, #0
 800c17a:	f104 0919 	add.w	r9, r4, #25
 800c17e:	e7f4      	b.n	800c16a <_printf_float+0x442>

0800c180 <_printf_common>:
 800c180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c184:	4616      	mov	r6, r2
 800c186:	4698      	mov	r8, r3
 800c188:	688a      	ldr	r2, [r1, #8]
 800c18a:	690b      	ldr	r3, [r1, #16]
 800c18c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c190:	4293      	cmp	r3, r2
 800c192:	bfb8      	it	lt
 800c194:	4613      	movlt	r3, r2
 800c196:	6033      	str	r3, [r6, #0]
 800c198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c19c:	4607      	mov	r7, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	b10a      	cbz	r2, 800c1a6 <_printf_common+0x26>
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	6033      	str	r3, [r6, #0]
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	0699      	lsls	r1, r3, #26
 800c1aa:	bf42      	ittt	mi
 800c1ac:	6833      	ldrmi	r3, [r6, #0]
 800c1ae:	3302      	addmi	r3, #2
 800c1b0:	6033      	strmi	r3, [r6, #0]
 800c1b2:	6825      	ldr	r5, [r4, #0]
 800c1b4:	f015 0506 	ands.w	r5, r5, #6
 800c1b8:	d106      	bne.n	800c1c8 <_printf_common+0x48>
 800c1ba:	f104 0a19 	add.w	sl, r4, #25
 800c1be:	68e3      	ldr	r3, [r4, #12]
 800c1c0:	6832      	ldr	r2, [r6, #0]
 800c1c2:	1a9b      	subs	r3, r3, r2
 800c1c4:	42ab      	cmp	r3, r5
 800c1c6:	dc26      	bgt.n	800c216 <_printf_common+0x96>
 800c1c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c1cc:	6822      	ldr	r2, [r4, #0]
 800c1ce:	3b00      	subs	r3, #0
 800c1d0:	bf18      	it	ne
 800c1d2:	2301      	movne	r3, #1
 800c1d4:	0692      	lsls	r2, r2, #26
 800c1d6:	d42b      	bmi.n	800c230 <_printf_common+0xb0>
 800c1d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c1dc:	4641      	mov	r1, r8
 800c1de:	4638      	mov	r0, r7
 800c1e0:	47c8      	blx	r9
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	d01e      	beq.n	800c224 <_printf_common+0xa4>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	6922      	ldr	r2, [r4, #16]
 800c1ea:	f003 0306 	and.w	r3, r3, #6
 800c1ee:	2b04      	cmp	r3, #4
 800c1f0:	bf02      	ittt	eq
 800c1f2:	68e5      	ldreq	r5, [r4, #12]
 800c1f4:	6833      	ldreq	r3, [r6, #0]
 800c1f6:	1aed      	subeq	r5, r5, r3
 800c1f8:	68a3      	ldr	r3, [r4, #8]
 800c1fa:	bf0c      	ite	eq
 800c1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c200:	2500      	movne	r5, #0
 800c202:	4293      	cmp	r3, r2
 800c204:	bfc4      	itt	gt
 800c206:	1a9b      	subgt	r3, r3, r2
 800c208:	18ed      	addgt	r5, r5, r3
 800c20a:	2600      	movs	r6, #0
 800c20c:	341a      	adds	r4, #26
 800c20e:	42b5      	cmp	r5, r6
 800c210:	d11a      	bne.n	800c248 <_printf_common+0xc8>
 800c212:	2000      	movs	r0, #0
 800c214:	e008      	b.n	800c228 <_printf_common+0xa8>
 800c216:	2301      	movs	r3, #1
 800c218:	4652      	mov	r2, sl
 800c21a:	4641      	mov	r1, r8
 800c21c:	4638      	mov	r0, r7
 800c21e:	47c8      	blx	r9
 800c220:	3001      	adds	r0, #1
 800c222:	d103      	bne.n	800c22c <_printf_common+0xac>
 800c224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22c:	3501      	adds	r5, #1
 800c22e:	e7c6      	b.n	800c1be <_printf_common+0x3e>
 800c230:	18e1      	adds	r1, r4, r3
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	2030      	movs	r0, #48	@ 0x30
 800c236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c23a:	4422      	add	r2, r4
 800c23c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c244:	3302      	adds	r3, #2
 800c246:	e7c7      	b.n	800c1d8 <_printf_common+0x58>
 800c248:	2301      	movs	r3, #1
 800c24a:	4622      	mov	r2, r4
 800c24c:	4641      	mov	r1, r8
 800c24e:	4638      	mov	r0, r7
 800c250:	47c8      	blx	r9
 800c252:	3001      	adds	r0, #1
 800c254:	d0e6      	beq.n	800c224 <_printf_common+0xa4>
 800c256:	3601      	adds	r6, #1
 800c258:	e7d9      	b.n	800c20e <_printf_common+0x8e>
	...

0800c25c <_printf_i>:
 800c25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c260:	7e0f      	ldrb	r7, [r1, #24]
 800c262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c264:	2f78      	cmp	r7, #120	@ 0x78
 800c266:	4691      	mov	r9, r2
 800c268:	4680      	mov	r8, r0
 800c26a:	460c      	mov	r4, r1
 800c26c:	469a      	mov	sl, r3
 800c26e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c272:	d807      	bhi.n	800c284 <_printf_i+0x28>
 800c274:	2f62      	cmp	r7, #98	@ 0x62
 800c276:	d80a      	bhi.n	800c28e <_printf_i+0x32>
 800c278:	2f00      	cmp	r7, #0
 800c27a:	f000 80d1 	beq.w	800c420 <_printf_i+0x1c4>
 800c27e:	2f58      	cmp	r7, #88	@ 0x58
 800c280:	f000 80b8 	beq.w	800c3f4 <_printf_i+0x198>
 800c284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c28c:	e03a      	b.n	800c304 <_printf_i+0xa8>
 800c28e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c292:	2b15      	cmp	r3, #21
 800c294:	d8f6      	bhi.n	800c284 <_printf_i+0x28>
 800c296:	a101      	add	r1, pc, #4	@ (adr r1, 800c29c <_printf_i+0x40>)
 800c298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c29c:	0800c2f5 	.word	0x0800c2f5
 800c2a0:	0800c309 	.word	0x0800c309
 800c2a4:	0800c285 	.word	0x0800c285
 800c2a8:	0800c285 	.word	0x0800c285
 800c2ac:	0800c285 	.word	0x0800c285
 800c2b0:	0800c285 	.word	0x0800c285
 800c2b4:	0800c309 	.word	0x0800c309
 800c2b8:	0800c285 	.word	0x0800c285
 800c2bc:	0800c285 	.word	0x0800c285
 800c2c0:	0800c285 	.word	0x0800c285
 800c2c4:	0800c285 	.word	0x0800c285
 800c2c8:	0800c407 	.word	0x0800c407
 800c2cc:	0800c333 	.word	0x0800c333
 800c2d0:	0800c3c1 	.word	0x0800c3c1
 800c2d4:	0800c285 	.word	0x0800c285
 800c2d8:	0800c285 	.word	0x0800c285
 800c2dc:	0800c429 	.word	0x0800c429
 800c2e0:	0800c285 	.word	0x0800c285
 800c2e4:	0800c333 	.word	0x0800c333
 800c2e8:	0800c285 	.word	0x0800c285
 800c2ec:	0800c285 	.word	0x0800c285
 800c2f0:	0800c3c9 	.word	0x0800c3c9
 800c2f4:	6833      	ldr	r3, [r6, #0]
 800c2f6:	1d1a      	adds	r2, r3, #4
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	6032      	str	r2, [r6, #0]
 800c2fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c304:	2301      	movs	r3, #1
 800c306:	e09c      	b.n	800c442 <_printf_i+0x1e6>
 800c308:	6833      	ldr	r3, [r6, #0]
 800c30a:	6820      	ldr	r0, [r4, #0]
 800c30c:	1d19      	adds	r1, r3, #4
 800c30e:	6031      	str	r1, [r6, #0]
 800c310:	0606      	lsls	r6, r0, #24
 800c312:	d501      	bpl.n	800c318 <_printf_i+0xbc>
 800c314:	681d      	ldr	r5, [r3, #0]
 800c316:	e003      	b.n	800c320 <_printf_i+0xc4>
 800c318:	0645      	lsls	r5, r0, #25
 800c31a:	d5fb      	bpl.n	800c314 <_printf_i+0xb8>
 800c31c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c320:	2d00      	cmp	r5, #0
 800c322:	da03      	bge.n	800c32c <_printf_i+0xd0>
 800c324:	232d      	movs	r3, #45	@ 0x2d
 800c326:	426d      	negs	r5, r5
 800c328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c32c:	4858      	ldr	r0, [pc, #352]	@ (800c490 <_printf_i+0x234>)
 800c32e:	230a      	movs	r3, #10
 800c330:	e011      	b.n	800c356 <_printf_i+0xfa>
 800c332:	6821      	ldr	r1, [r4, #0]
 800c334:	6833      	ldr	r3, [r6, #0]
 800c336:	0608      	lsls	r0, r1, #24
 800c338:	f853 5b04 	ldr.w	r5, [r3], #4
 800c33c:	d402      	bmi.n	800c344 <_printf_i+0xe8>
 800c33e:	0649      	lsls	r1, r1, #25
 800c340:	bf48      	it	mi
 800c342:	b2ad      	uxthmi	r5, r5
 800c344:	2f6f      	cmp	r7, #111	@ 0x6f
 800c346:	4852      	ldr	r0, [pc, #328]	@ (800c490 <_printf_i+0x234>)
 800c348:	6033      	str	r3, [r6, #0]
 800c34a:	bf14      	ite	ne
 800c34c:	230a      	movne	r3, #10
 800c34e:	2308      	moveq	r3, #8
 800c350:	2100      	movs	r1, #0
 800c352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c356:	6866      	ldr	r6, [r4, #4]
 800c358:	60a6      	str	r6, [r4, #8]
 800c35a:	2e00      	cmp	r6, #0
 800c35c:	db05      	blt.n	800c36a <_printf_i+0x10e>
 800c35e:	6821      	ldr	r1, [r4, #0]
 800c360:	432e      	orrs	r6, r5
 800c362:	f021 0104 	bic.w	r1, r1, #4
 800c366:	6021      	str	r1, [r4, #0]
 800c368:	d04b      	beq.n	800c402 <_printf_i+0x1a6>
 800c36a:	4616      	mov	r6, r2
 800c36c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c370:	fb03 5711 	mls	r7, r3, r1, r5
 800c374:	5dc7      	ldrb	r7, [r0, r7]
 800c376:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c37a:	462f      	mov	r7, r5
 800c37c:	42bb      	cmp	r3, r7
 800c37e:	460d      	mov	r5, r1
 800c380:	d9f4      	bls.n	800c36c <_printf_i+0x110>
 800c382:	2b08      	cmp	r3, #8
 800c384:	d10b      	bne.n	800c39e <_printf_i+0x142>
 800c386:	6823      	ldr	r3, [r4, #0]
 800c388:	07df      	lsls	r7, r3, #31
 800c38a:	d508      	bpl.n	800c39e <_printf_i+0x142>
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	6861      	ldr	r1, [r4, #4]
 800c390:	4299      	cmp	r1, r3
 800c392:	bfde      	ittt	le
 800c394:	2330      	movle	r3, #48	@ 0x30
 800c396:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c39a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c39e:	1b92      	subs	r2, r2, r6
 800c3a0:	6122      	str	r2, [r4, #16]
 800c3a2:	f8cd a000 	str.w	sl, [sp]
 800c3a6:	464b      	mov	r3, r9
 800c3a8:	aa03      	add	r2, sp, #12
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	f7ff fee7 	bl	800c180 <_printf_common>
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	d14a      	bne.n	800c44c <_printf_i+0x1f0>
 800c3b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3ba:	b004      	add	sp, #16
 800c3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	f043 0320 	orr.w	r3, r3, #32
 800c3c6:	6023      	str	r3, [r4, #0]
 800c3c8:	4832      	ldr	r0, [pc, #200]	@ (800c494 <_printf_i+0x238>)
 800c3ca:	2778      	movs	r7, #120	@ 0x78
 800c3cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	6831      	ldr	r1, [r6, #0]
 800c3d4:	061f      	lsls	r7, r3, #24
 800c3d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c3da:	d402      	bmi.n	800c3e2 <_printf_i+0x186>
 800c3dc:	065f      	lsls	r7, r3, #25
 800c3de:	bf48      	it	mi
 800c3e0:	b2ad      	uxthmi	r5, r5
 800c3e2:	6031      	str	r1, [r6, #0]
 800c3e4:	07d9      	lsls	r1, r3, #31
 800c3e6:	bf44      	itt	mi
 800c3e8:	f043 0320 	orrmi.w	r3, r3, #32
 800c3ec:	6023      	strmi	r3, [r4, #0]
 800c3ee:	b11d      	cbz	r5, 800c3f8 <_printf_i+0x19c>
 800c3f0:	2310      	movs	r3, #16
 800c3f2:	e7ad      	b.n	800c350 <_printf_i+0xf4>
 800c3f4:	4826      	ldr	r0, [pc, #152]	@ (800c490 <_printf_i+0x234>)
 800c3f6:	e7e9      	b.n	800c3cc <_printf_i+0x170>
 800c3f8:	6823      	ldr	r3, [r4, #0]
 800c3fa:	f023 0320 	bic.w	r3, r3, #32
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	e7f6      	b.n	800c3f0 <_printf_i+0x194>
 800c402:	4616      	mov	r6, r2
 800c404:	e7bd      	b.n	800c382 <_printf_i+0x126>
 800c406:	6833      	ldr	r3, [r6, #0]
 800c408:	6825      	ldr	r5, [r4, #0]
 800c40a:	6961      	ldr	r1, [r4, #20]
 800c40c:	1d18      	adds	r0, r3, #4
 800c40e:	6030      	str	r0, [r6, #0]
 800c410:	062e      	lsls	r6, r5, #24
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	d501      	bpl.n	800c41a <_printf_i+0x1be>
 800c416:	6019      	str	r1, [r3, #0]
 800c418:	e002      	b.n	800c420 <_printf_i+0x1c4>
 800c41a:	0668      	lsls	r0, r5, #25
 800c41c:	d5fb      	bpl.n	800c416 <_printf_i+0x1ba>
 800c41e:	8019      	strh	r1, [r3, #0]
 800c420:	2300      	movs	r3, #0
 800c422:	6123      	str	r3, [r4, #16]
 800c424:	4616      	mov	r6, r2
 800c426:	e7bc      	b.n	800c3a2 <_printf_i+0x146>
 800c428:	6833      	ldr	r3, [r6, #0]
 800c42a:	1d1a      	adds	r2, r3, #4
 800c42c:	6032      	str	r2, [r6, #0]
 800c42e:	681e      	ldr	r6, [r3, #0]
 800c430:	6862      	ldr	r2, [r4, #4]
 800c432:	2100      	movs	r1, #0
 800c434:	4630      	mov	r0, r6
 800c436:	f7f3 fea3 	bl	8000180 <memchr>
 800c43a:	b108      	cbz	r0, 800c440 <_printf_i+0x1e4>
 800c43c:	1b80      	subs	r0, r0, r6
 800c43e:	6060      	str	r0, [r4, #4]
 800c440:	6863      	ldr	r3, [r4, #4]
 800c442:	6123      	str	r3, [r4, #16]
 800c444:	2300      	movs	r3, #0
 800c446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c44a:	e7aa      	b.n	800c3a2 <_printf_i+0x146>
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	4632      	mov	r2, r6
 800c450:	4649      	mov	r1, r9
 800c452:	4640      	mov	r0, r8
 800c454:	47d0      	blx	sl
 800c456:	3001      	adds	r0, #1
 800c458:	d0ad      	beq.n	800c3b6 <_printf_i+0x15a>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	079b      	lsls	r3, r3, #30
 800c45e:	d413      	bmi.n	800c488 <_printf_i+0x22c>
 800c460:	68e0      	ldr	r0, [r4, #12]
 800c462:	9b03      	ldr	r3, [sp, #12]
 800c464:	4298      	cmp	r0, r3
 800c466:	bfb8      	it	lt
 800c468:	4618      	movlt	r0, r3
 800c46a:	e7a6      	b.n	800c3ba <_printf_i+0x15e>
 800c46c:	2301      	movs	r3, #1
 800c46e:	4632      	mov	r2, r6
 800c470:	4649      	mov	r1, r9
 800c472:	4640      	mov	r0, r8
 800c474:	47d0      	blx	sl
 800c476:	3001      	adds	r0, #1
 800c478:	d09d      	beq.n	800c3b6 <_printf_i+0x15a>
 800c47a:	3501      	adds	r5, #1
 800c47c:	68e3      	ldr	r3, [r4, #12]
 800c47e:	9903      	ldr	r1, [sp, #12]
 800c480:	1a5b      	subs	r3, r3, r1
 800c482:	42ab      	cmp	r3, r5
 800c484:	dcf2      	bgt.n	800c46c <_printf_i+0x210>
 800c486:	e7eb      	b.n	800c460 <_printf_i+0x204>
 800c488:	2500      	movs	r5, #0
 800c48a:	f104 0619 	add.w	r6, r4, #25
 800c48e:	e7f5      	b.n	800c47c <_printf_i+0x220>
 800c490:	08010ddf 	.word	0x08010ddf
 800c494:	08010df0 	.word	0x08010df0

0800c498 <std>:
 800c498:	2300      	movs	r3, #0
 800c49a:	b510      	push	{r4, lr}
 800c49c:	4604      	mov	r4, r0
 800c49e:	e9c0 3300 	strd	r3, r3, [r0]
 800c4a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4a6:	6083      	str	r3, [r0, #8]
 800c4a8:	8181      	strh	r1, [r0, #12]
 800c4aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c4ac:	81c2      	strh	r2, [r0, #14]
 800c4ae:	6183      	str	r3, [r0, #24]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	2208      	movs	r2, #8
 800c4b4:	305c      	adds	r0, #92	@ 0x5c
 800c4b6:	f000 fa59 	bl	800c96c <memset>
 800c4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f0 <std+0x58>)
 800c4bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800c4be:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f4 <std+0x5c>)
 800c4c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f8 <std+0x60>)
 800c4c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c4fc <std+0x64>)
 800c4c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c500 <std+0x68>)
 800c4cc:	6224      	str	r4, [r4, #32]
 800c4ce:	429c      	cmp	r4, r3
 800c4d0:	d006      	beq.n	800c4e0 <std+0x48>
 800c4d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c4d6:	4294      	cmp	r4, r2
 800c4d8:	d002      	beq.n	800c4e0 <std+0x48>
 800c4da:	33d0      	adds	r3, #208	@ 0xd0
 800c4dc:	429c      	cmp	r4, r3
 800c4de:	d105      	bne.n	800c4ec <std+0x54>
 800c4e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e8:	f000 bb08 	b.w	800cafc <__retarget_lock_init_recursive>
 800c4ec:	bd10      	pop	{r4, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0800c7bd 	.word	0x0800c7bd
 800c4f4:	0800c7df 	.word	0x0800c7df
 800c4f8:	0800c817 	.word	0x0800c817
 800c4fc:	0800c83b 	.word	0x0800c83b
 800c500:	20005d20 	.word	0x20005d20

0800c504 <stdio_exit_handler>:
 800c504:	4a02      	ldr	r2, [pc, #8]	@ (800c510 <stdio_exit_handler+0xc>)
 800c506:	4903      	ldr	r1, [pc, #12]	@ (800c514 <stdio_exit_handler+0x10>)
 800c508:	4803      	ldr	r0, [pc, #12]	@ (800c518 <stdio_exit_handler+0x14>)
 800c50a:	f000 b869 	b.w	800c5e0 <_fwalk_sglue>
 800c50e:	bf00      	nop
 800c510:	200000f8 	.word	0x200000f8
 800c514:	0800e6f1 	.word	0x0800e6f1
 800c518:	20000108 	.word	0x20000108

0800c51c <cleanup_stdio>:
 800c51c:	6841      	ldr	r1, [r0, #4]
 800c51e:	4b0c      	ldr	r3, [pc, #48]	@ (800c550 <cleanup_stdio+0x34>)
 800c520:	4299      	cmp	r1, r3
 800c522:	b510      	push	{r4, lr}
 800c524:	4604      	mov	r4, r0
 800c526:	d001      	beq.n	800c52c <cleanup_stdio+0x10>
 800c528:	f002 f8e2 	bl	800e6f0 <_fflush_r>
 800c52c:	68a1      	ldr	r1, [r4, #8]
 800c52e:	4b09      	ldr	r3, [pc, #36]	@ (800c554 <cleanup_stdio+0x38>)
 800c530:	4299      	cmp	r1, r3
 800c532:	d002      	beq.n	800c53a <cleanup_stdio+0x1e>
 800c534:	4620      	mov	r0, r4
 800c536:	f002 f8db 	bl	800e6f0 <_fflush_r>
 800c53a:	68e1      	ldr	r1, [r4, #12]
 800c53c:	4b06      	ldr	r3, [pc, #24]	@ (800c558 <cleanup_stdio+0x3c>)
 800c53e:	4299      	cmp	r1, r3
 800c540:	d004      	beq.n	800c54c <cleanup_stdio+0x30>
 800c542:	4620      	mov	r0, r4
 800c544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c548:	f002 b8d2 	b.w	800e6f0 <_fflush_r>
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	bf00      	nop
 800c550:	20005d20 	.word	0x20005d20
 800c554:	20005d88 	.word	0x20005d88
 800c558:	20005df0 	.word	0x20005df0

0800c55c <global_stdio_init.part.0>:
 800c55c:	b510      	push	{r4, lr}
 800c55e:	4b0b      	ldr	r3, [pc, #44]	@ (800c58c <global_stdio_init.part.0+0x30>)
 800c560:	4c0b      	ldr	r4, [pc, #44]	@ (800c590 <global_stdio_init.part.0+0x34>)
 800c562:	4a0c      	ldr	r2, [pc, #48]	@ (800c594 <global_stdio_init.part.0+0x38>)
 800c564:	601a      	str	r2, [r3, #0]
 800c566:	4620      	mov	r0, r4
 800c568:	2200      	movs	r2, #0
 800c56a:	2104      	movs	r1, #4
 800c56c:	f7ff ff94 	bl	800c498 <std>
 800c570:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c574:	2201      	movs	r2, #1
 800c576:	2109      	movs	r1, #9
 800c578:	f7ff ff8e 	bl	800c498 <std>
 800c57c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c580:	2202      	movs	r2, #2
 800c582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c586:	2112      	movs	r1, #18
 800c588:	f7ff bf86 	b.w	800c498 <std>
 800c58c:	20005e58 	.word	0x20005e58
 800c590:	20005d20 	.word	0x20005d20
 800c594:	0800c505 	.word	0x0800c505

0800c598 <__sfp_lock_acquire>:
 800c598:	4801      	ldr	r0, [pc, #4]	@ (800c5a0 <__sfp_lock_acquire+0x8>)
 800c59a:	f000 bab0 	b.w	800cafe <__retarget_lock_acquire_recursive>
 800c59e:	bf00      	nop
 800c5a0:	20005e61 	.word	0x20005e61

0800c5a4 <__sfp_lock_release>:
 800c5a4:	4801      	ldr	r0, [pc, #4]	@ (800c5ac <__sfp_lock_release+0x8>)
 800c5a6:	f000 baab 	b.w	800cb00 <__retarget_lock_release_recursive>
 800c5aa:	bf00      	nop
 800c5ac:	20005e61 	.word	0x20005e61

0800c5b0 <__sinit>:
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	f7ff fff0 	bl	800c598 <__sfp_lock_acquire>
 800c5b8:	6a23      	ldr	r3, [r4, #32]
 800c5ba:	b11b      	cbz	r3, 800c5c4 <__sinit+0x14>
 800c5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5c0:	f7ff bff0 	b.w	800c5a4 <__sfp_lock_release>
 800c5c4:	4b04      	ldr	r3, [pc, #16]	@ (800c5d8 <__sinit+0x28>)
 800c5c6:	6223      	str	r3, [r4, #32]
 800c5c8:	4b04      	ldr	r3, [pc, #16]	@ (800c5dc <__sinit+0x2c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1f5      	bne.n	800c5bc <__sinit+0xc>
 800c5d0:	f7ff ffc4 	bl	800c55c <global_stdio_init.part.0>
 800c5d4:	e7f2      	b.n	800c5bc <__sinit+0xc>
 800c5d6:	bf00      	nop
 800c5d8:	0800c51d 	.word	0x0800c51d
 800c5dc:	20005e58 	.word	0x20005e58

0800c5e0 <_fwalk_sglue>:
 800c5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e4:	4607      	mov	r7, r0
 800c5e6:	4688      	mov	r8, r1
 800c5e8:	4614      	mov	r4, r2
 800c5ea:	2600      	movs	r6, #0
 800c5ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5f0:	f1b9 0901 	subs.w	r9, r9, #1
 800c5f4:	d505      	bpl.n	800c602 <_fwalk_sglue+0x22>
 800c5f6:	6824      	ldr	r4, [r4, #0]
 800c5f8:	2c00      	cmp	r4, #0
 800c5fa:	d1f7      	bne.n	800c5ec <_fwalk_sglue+0xc>
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c602:	89ab      	ldrh	r3, [r5, #12]
 800c604:	2b01      	cmp	r3, #1
 800c606:	d907      	bls.n	800c618 <_fwalk_sglue+0x38>
 800c608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c60c:	3301      	adds	r3, #1
 800c60e:	d003      	beq.n	800c618 <_fwalk_sglue+0x38>
 800c610:	4629      	mov	r1, r5
 800c612:	4638      	mov	r0, r7
 800c614:	47c0      	blx	r8
 800c616:	4306      	orrs	r6, r0
 800c618:	3568      	adds	r5, #104	@ 0x68
 800c61a:	e7e9      	b.n	800c5f0 <_fwalk_sglue+0x10>

0800c61c <iprintf>:
 800c61c:	b40f      	push	{r0, r1, r2, r3}
 800c61e:	b507      	push	{r0, r1, r2, lr}
 800c620:	4906      	ldr	r1, [pc, #24]	@ (800c63c <iprintf+0x20>)
 800c622:	ab04      	add	r3, sp, #16
 800c624:	6808      	ldr	r0, [r1, #0]
 800c626:	f853 2b04 	ldr.w	r2, [r3], #4
 800c62a:	6881      	ldr	r1, [r0, #8]
 800c62c:	9301      	str	r3, [sp, #4]
 800c62e:	f001 fec7 	bl	800e3c0 <_vfiprintf_r>
 800c632:	b003      	add	sp, #12
 800c634:	f85d eb04 	ldr.w	lr, [sp], #4
 800c638:	b004      	add	sp, #16
 800c63a:	4770      	bx	lr
 800c63c:	20000104 	.word	0x20000104

0800c640 <putchar>:
 800c640:	4b02      	ldr	r3, [pc, #8]	@ (800c64c <putchar+0xc>)
 800c642:	4601      	mov	r1, r0
 800c644:	6818      	ldr	r0, [r3, #0]
 800c646:	6882      	ldr	r2, [r0, #8]
 800c648:	f002 b8dc 	b.w	800e804 <_putc_r>
 800c64c:	20000104 	.word	0x20000104

0800c650 <_puts_r>:
 800c650:	6a03      	ldr	r3, [r0, #32]
 800c652:	b570      	push	{r4, r5, r6, lr}
 800c654:	6884      	ldr	r4, [r0, #8]
 800c656:	4605      	mov	r5, r0
 800c658:	460e      	mov	r6, r1
 800c65a:	b90b      	cbnz	r3, 800c660 <_puts_r+0x10>
 800c65c:	f7ff ffa8 	bl	800c5b0 <__sinit>
 800c660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c662:	07db      	lsls	r3, r3, #31
 800c664:	d405      	bmi.n	800c672 <_puts_r+0x22>
 800c666:	89a3      	ldrh	r3, [r4, #12]
 800c668:	0598      	lsls	r0, r3, #22
 800c66a:	d402      	bmi.n	800c672 <_puts_r+0x22>
 800c66c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c66e:	f000 fa46 	bl	800cafe <__retarget_lock_acquire_recursive>
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	0719      	lsls	r1, r3, #28
 800c676:	d502      	bpl.n	800c67e <_puts_r+0x2e>
 800c678:	6923      	ldr	r3, [r4, #16]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d135      	bne.n	800c6ea <_puts_r+0x9a>
 800c67e:	4621      	mov	r1, r4
 800c680:	4628      	mov	r0, r5
 800c682:	f000 f91d 	bl	800c8c0 <__swsetup_r>
 800c686:	b380      	cbz	r0, 800c6ea <_puts_r+0x9a>
 800c688:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c68c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c68e:	07da      	lsls	r2, r3, #31
 800c690:	d405      	bmi.n	800c69e <_puts_r+0x4e>
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	059b      	lsls	r3, r3, #22
 800c696:	d402      	bmi.n	800c69e <_puts_r+0x4e>
 800c698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c69a:	f000 fa31 	bl	800cb00 <__retarget_lock_release_recursive>
 800c69e:	4628      	mov	r0, r5
 800c6a0:	bd70      	pop	{r4, r5, r6, pc}
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	da04      	bge.n	800c6b0 <_puts_r+0x60>
 800c6a6:	69a2      	ldr	r2, [r4, #24]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	dc17      	bgt.n	800c6dc <_puts_r+0x8c>
 800c6ac:	290a      	cmp	r1, #10
 800c6ae:	d015      	beq.n	800c6dc <_puts_r+0x8c>
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	6022      	str	r2, [r4, #0]
 800c6b6:	7019      	strb	r1, [r3, #0]
 800c6b8:	68a3      	ldr	r3, [r4, #8]
 800c6ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	60a3      	str	r3, [r4, #8]
 800c6c2:	2900      	cmp	r1, #0
 800c6c4:	d1ed      	bne.n	800c6a2 <_puts_r+0x52>
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	da11      	bge.n	800c6ee <_puts_r+0x9e>
 800c6ca:	4622      	mov	r2, r4
 800c6cc:	210a      	movs	r1, #10
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	f000 f8b7 	bl	800c842 <__swbuf_r>
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	d0d7      	beq.n	800c688 <_puts_r+0x38>
 800c6d8:	250a      	movs	r5, #10
 800c6da:	e7d7      	b.n	800c68c <_puts_r+0x3c>
 800c6dc:	4622      	mov	r2, r4
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f000 f8af 	bl	800c842 <__swbuf_r>
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d1e7      	bne.n	800c6b8 <_puts_r+0x68>
 800c6e8:	e7ce      	b.n	800c688 <_puts_r+0x38>
 800c6ea:	3e01      	subs	r6, #1
 800c6ec:	e7e4      	b.n	800c6b8 <_puts_r+0x68>
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	1c5a      	adds	r2, r3, #1
 800c6f2:	6022      	str	r2, [r4, #0]
 800c6f4:	220a      	movs	r2, #10
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	e7ee      	b.n	800c6d8 <_puts_r+0x88>
	...

0800c6fc <puts>:
 800c6fc:	4b02      	ldr	r3, [pc, #8]	@ (800c708 <puts+0xc>)
 800c6fe:	4601      	mov	r1, r0
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	f7ff bfa5 	b.w	800c650 <_puts_r>
 800c706:	bf00      	nop
 800c708:	20000104 	.word	0x20000104

0800c70c <sniprintf>:
 800c70c:	b40c      	push	{r2, r3}
 800c70e:	b530      	push	{r4, r5, lr}
 800c710:	4b18      	ldr	r3, [pc, #96]	@ (800c774 <sniprintf+0x68>)
 800c712:	1e0c      	subs	r4, r1, #0
 800c714:	681d      	ldr	r5, [r3, #0]
 800c716:	b09d      	sub	sp, #116	@ 0x74
 800c718:	da08      	bge.n	800c72c <sniprintf+0x20>
 800c71a:	238b      	movs	r3, #139	@ 0x8b
 800c71c:	602b      	str	r3, [r5, #0]
 800c71e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c722:	b01d      	add	sp, #116	@ 0x74
 800c724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c728:	b002      	add	sp, #8
 800c72a:	4770      	bx	lr
 800c72c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c730:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c734:	f04f 0300 	mov.w	r3, #0
 800c738:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c73a:	bf14      	ite	ne
 800c73c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c740:	4623      	moveq	r3, r4
 800c742:	9304      	str	r3, [sp, #16]
 800c744:	9307      	str	r3, [sp, #28]
 800c746:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c74a:	9002      	str	r0, [sp, #8]
 800c74c:	9006      	str	r0, [sp, #24]
 800c74e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c752:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c754:	ab21      	add	r3, sp, #132	@ 0x84
 800c756:	a902      	add	r1, sp, #8
 800c758:	4628      	mov	r0, r5
 800c75a:	9301      	str	r3, [sp, #4]
 800c75c:	f001 fd0c 	bl	800e178 <_svfiprintf_r>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	bfbc      	itt	lt
 800c764:	238b      	movlt	r3, #139	@ 0x8b
 800c766:	602b      	strlt	r3, [r5, #0]
 800c768:	2c00      	cmp	r4, #0
 800c76a:	d0da      	beq.n	800c722 <sniprintf+0x16>
 800c76c:	9b02      	ldr	r3, [sp, #8]
 800c76e:	2200      	movs	r2, #0
 800c770:	701a      	strb	r2, [r3, #0]
 800c772:	e7d6      	b.n	800c722 <sniprintf+0x16>
 800c774:	20000104 	.word	0x20000104

0800c778 <siprintf>:
 800c778:	b40e      	push	{r1, r2, r3}
 800c77a:	b510      	push	{r4, lr}
 800c77c:	b09d      	sub	sp, #116	@ 0x74
 800c77e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c780:	9002      	str	r0, [sp, #8]
 800c782:	9006      	str	r0, [sp, #24]
 800c784:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c788:	480a      	ldr	r0, [pc, #40]	@ (800c7b4 <siprintf+0x3c>)
 800c78a:	9107      	str	r1, [sp, #28]
 800c78c:	9104      	str	r1, [sp, #16]
 800c78e:	490a      	ldr	r1, [pc, #40]	@ (800c7b8 <siprintf+0x40>)
 800c790:	f853 2b04 	ldr.w	r2, [r3], #4
 800c794:	9105      	str	r1, [sp, #20]
 800c796:	2400      	movs	r4, #0
 800c798:	a902      	add	r1, sp, #8
 800c79a:	6800      	ldr	r0, [r0, #0]
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c7a0:	f001 fcea 	bl	800e178 <_svfiprintf_r>
 800c7a4:	9b02      	ldr	r3, [sp, #8]
 800c7a6:	701c      	strb	r4, [r3, #0]
 800c7a8:	b01d      	add	sp, #116	@ 0x74
 800c7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7ae:	b003      	add	sp, #12
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	20000104 	.word	0x20000104
 800c7b8:	ffff0208 	.word	0xffff0208

0800c7bc <__sread>:
 800c7bc:	b510      	push	{r4, lr}
 800c7be:	460c      	mov	r4, r1
 800c7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c4:	f000 f94c 	bl	800ca60 <_read_r>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	bfab      	itete	ge
 800c7cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c7d0:	181b      	addge	r3, r3, r0
 800c7d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7d6:	bfac      	ite	ge
 800c7d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7da:	81a3      	strhlt	r3, [r4, #12]
 800c7dc:	bd10      	pop	{r4, pc}

0800c7de <__swrite>:
 800c7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e2:	461f      	mov	r7, r3
 800c7e4:	898b      	ldrh	r3, [r1, #12]
 800c7e6:	05db      	lsls	r3, r3, #23
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	4616      	mov	r6, r2
 800c7ee:	d505      	bpl.n	800c7fc <__swrite+0x1e>
 800c7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f4:	2302      	movs	r3, #2
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f000 f920 	bl	800ca3c <_lseek_r>
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c806:	81a3      	strh	r3, [r4, #12]
 800c808:	4632      	mov	r2, r6
 800c80a:	463b      	mov	r3, r7
 800c80c:	4628      	mov	r0, r5
 800c80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c812:	f000 b937 	b.w	800ca84 <_write_r>

0800c816 <__sseek>:
 800c816:	b510      	push	{r4, lr}
 800c818:	460c      	mov	r4, r1
 800c81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c81e:	f000 f90d 	bl	800ca3c <_lseek_r>
 800c822:	1c43      	adds	r3, r0, #1
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	bf15      	itete	ne
 800c828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c82a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c82e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c832:	81a3      	strheq	r3, [r4, #12]
 800c834:	bf18      	it	ne
 800c836:	81a3      	strhne	r3, [r4, #12]
 800c838:	bd10      	pop	{r4, pc}

0800c83a <__sclose>:
 800c83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c83e:	f000 b8ed 	b.w	800ca1c <_close_r>

0800c842 <__swbuf_r>:
 800c842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c844:	460e      	mov	r6, r1
 800c846:	4614      	mov	r4, r2
 800c848:	4605      	mov	r5, r0
 800c84a:	b118      	cbz	r0, 800c854 <__swbuf_r+0x12>
 800c84c:	6a03      	ldr	r3, [r0, #32]
 800c84e:	b90b      	cbnz	r3, 800c854 <__swbuf_r+0x12>
 800c850:	f7ff feae 	bl	800c5b0 <__sinit>
 800c854:	69a3      	ldr	r3, [r4, #24]
 800c856:	60a3      	str	r3, [r4, #8]
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	071a      	lsls	r2, r3, #28
 800c85c:	d501      	bpl.n	800c862 <__swbuf_r+0x20>
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	b943      	cbnz	r3, 800c874 <__swbuf_r+0x32>
 800c862:	4621      	mov	r1, r4
 800c864:	4628      	mov	r0, r5
 800c866:	f000 f82b 	bl	800c8c0 <__swsetup_r>
 800c86a:	b118      	cbz	r0, 800c874 <__swbuf_r+0x32>
 800c86c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c870:	4638      	mov	r0, r7
 800c872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c874:	6823      	ldr	r3, [r4, #0]
 800c876:	6922      	ldr	r2, [r4, #16]
 800c878:	1a98      	subs	r0, r3, r2
 800c87a:	6963      	ldr	r3, [r4, #20]
 800c87c:	b2f6      	uxtb	r6, r6
 800c87e:	4283      	cmp	r3, r0
 800c880:	4637      	mov	r7, r6
 800c882:	dc05      	bgt.n	800c890 <__swbuf_r+0x4e>
 800c884:	4621      	mov	r1, r4
 800c886:	4628      	mov	r0, r5
 800c888:	f001 ff32 	bl	800e6f0 <_fflush_r>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d1ed      	bne.n	800c86c <__swbuf_r+0x2a>
 800c890:	68a3      	ldr	r3, [r4, #8]
 800c892:	3b01      	subs	r3, #1
 800c894:	60a3      	str	r3, [r4, #8]
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	1c5a      	adds	r2, r3, #1
 800c89a:	6022      	str	r2, [r4, #0]
 800c89c:	701e      	strb	r6, [r3, #0]
 800c89e:	6962      	ldr	r2, [r4, #20]
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d004      	beq.n	800c8b0 <__swbuf_r+0x6e>
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	07db      	lsls	r3, r3, #31
 800c8aa:	d5e1      	bpl.n	800c870 <__swbuf_r+0x2e>
 800c8ac:	2e0a      	cmp	r6, #10
 800c8ae:	d1df      	bne.n	800c870 <__swbuf_r+0x2e>
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f001 ff1c 	bl	800e6f0 <_fflush_r>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d0d9      	beq.n	800c870 <__swbuf_r+0x2e>
 800c8bc:	e7d6      	b.n	800c86c <__swbuf_r+0x2a>
	...

0800c8c0 <__swsetup_r>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	4b29      	ldr	r3, [pc, #164]	@ (800c968 <__swsetup_r+0xa8>)
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	6818      	ldr	r0, [r3, #0]
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	b118      	cbz	r0, 800c8d4 <__swsetup_r+0x14>
 800c8cc:	6a03      	ldr	r3, [r0, #32]
 800c8ce:	b90b      	cbnz	r3, 800c8d4 <__swsetup_r+0x14>
 800c8d0:	f7ff fe6e 	bl	800c5b0 <__sinit>
 800c8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8d8:	0719      	lsls	r1, r3, #28
 800c8da:	d422      	bmi.n	800c922 <__swsetup_r+0x62>
 800c8dc:	06da      	lsls	r2, r3, #27
 800c8de:	d407      	bmi.n	800c8f0 <__swsetup_r+0x30>
 800c8e0:	2209      	movs	r2, #9
 800c8e2:	602a      	str	r2, [r5, #0]
 800c8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8e8:	81a3      	strh	r3, [r4, #12]
 800c8ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8ee:	e033      	b.n	800c958 <__swsetup_r+0x98>
 800c8f0:	0758      	lsls	r0, r3, #29
 800c8f2:	d512      	bpl.n	800c91a <__swsetup_r+0x5a>
 800c8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8f6:	b141      	cbz	r1, 800c90a <__swsetup_r+0x4a>
 800c8f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8fc:	4299      	cmp	r1, r3
 800c8fe:	d002      	beq.n	800c906 <__swsetup_r+0x46>
 800c900:	4628      	mov	r0, r5
 800c902:	f000 ff65 	bl	800d7d0 <_free_r>
 800c906:	2300      	movs	r3, #0
 800c908:	6363      	str	r3, [r4, #52]	@ 0x34
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	2300      	movs	r3, #0
 800c914:	6063      	str	r3, [r4, #4]
 800c916:	6923      	ldr	r3, [r4, #16]
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	f043 0308 	orr.w	r3, r3, #8
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	b94b      	cbnz	r3, 800c93a <__swsetup_r+0x7a>
 800c926:	89a3      	ldrh	r3, [r4, #12]
 800c928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c930:	d003      	beq.n	800c93a <__swsetup_r+0x7a>
 800c932:	4621      	mov	r1, r4
 800c934:	4628      	mov	r0, r5
 800c936:	f001 ff29 	bl	800e78c <__smakebuf_r>
 800c93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c93e:	f013 0201 	ands.w	r2, r3, #1
 800c942:	d00a      	beq.n	800c95a <__swsetup_r+0x9a>
 800c944:	2200      	movs	r2, #0
 800c946:	60a2      	str	r2, [r4, #8]
 800c948:	6962      	ldr	r2, [r4, #20]
 800c94a:	4252      	negs	r2, r2
 800c94c:	61a2      	str	r2, [r4, #24]
 800c94e:	6922      	ldr	r2, [r4, #16]
 800c950:	b942      	cbnz	r2, 800c964 <__swsetup_r+0xa4>
 800c952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c956:	d1c5      	bne.n	800c8e4 <__swsetup_r+0x24>
 800c958:	bd38      	pop	{r3, r4, r5, pc}
 800c95a:	0799      	lsls	r1, r3, #30
 800c95c:	bf58      	it	pl
 800c95e:	6962      	ldrpl	r2, [r4, #20]
 800c960:	60a2      	str	r2, [r4, #8]
 800c962:	e7f4      	b.n	800c94e <__swsetup_r+0x8e>
 800c964:	2000      	movs	r0, #0
 800c966:	e7f7      	b.n	800c958 <__swsetup_r+0x98>
 800c968:	20000104 	.word	0x20000104

0800c96c <memset>:
 800c96c:	4402      	add	r2, r0
 800c96e:	4603      	mov	r3, r0
 800c970:	4293      	cmp	r3, r2
 800c972:	d100      	bne.n	800c976 <memset+0xa>
 800c974:	4770      	bx	lr
 800c976:	f803 1b01 	strb.w	r1, [r3], #1
 800c97a:	e7f9      	b.n	800c970 <memset+0x4>

0800c97c <strchr>:
 800c97c:	b2c9      	uxtb	r1, r1
 800c97e:	4603      	mov	r3, r0
 800c980:	4618      	mov	r0, r3
 800c982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c986:	b112      	cbz	r2, 800c98e <strchr+0x12>
 800c988:	428a      	cmp	r2, r1
 800c98a:	d1f9      	bne.n	800c980 <strchr+0x4>
 800c98c:	4770      	bx	lr
 800c98e:	2900      	cmp	r1, #0
 800c990:	bf18      	it	ne
 800c992:	2000      	movne	r0, #0
 800c994:	4770      	bx	lr

0800c996 <strncpy>:
 800c996:	b510      	push	{r4, lr}
 800c998:	3901      	subs	r1, #1
 800c99a:	4603      	mov	r3, r0
 800c99c:	b132      	cbz	r2, 800c9ac <strncpy+0x16>
 800c99e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c9a2:	f803 4b01 	strb.w	r4, [r3], #1
 800c9a6:	3a01      	subs	r2, #1
 800c9a8:	2c00      	cmp	r4, #0
 800c9aa:	d1f7      	bne.n	800c99c <strncpy+0x6>
 800c9ac:	441a      	add	r2, r3
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d100      	bne.n	800c9b6 <strncpy+0x20>
 800c9b4:	bd10      	pop	{r4, pc}
 800c9b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9ba:	e7f9      	b.n	800c9b0 <strncpy+0x1a>

0800c9bc <strrchr>:
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	d10e      	bne.n	800c9e4 <strrchr+0x28>
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9cc:	f7ff bfd6 	b.w	800c97c <strchr>
 800c9d0:	1c43      	adds	r3, r0, #1
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7ff ffd0 	bl	800c97c <strchr>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d1f7      	bne.n	800c9d0 <strrchr+0x14>
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}
 800c9e4:	2500      	movs	r5, #0
 800c9e6:	e7f5      	b.n	800c9d4 <strrchr+0x18>

0800c9e8 <strstr>:
 800c9e8:	780a      	ldrb	r2, [r1, #0]
 800c9ea:	b570      	push	{r4, r5, r6, lr}
 800c9ec:	b96a      	cbnz	r2, 800ca0a <strstr+0x22>
 800c9ee:	bd70      	pop	{r4, r5, r6, pc}
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d109      	bne.n	800ca08 <strstr+0x20>
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0f6      	beq.n	800c9ee <strstr+0x6>
 800ca00:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ca04:	429e      	cmp	r6, r3
 800ca06:	d0f7      	beq.n	800c9f8 <strstr+0x10>
 800ca08:	3001      	adds	r0, #1
 800ca0a:	7803      	ldrb	r3, [r0, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1ef      	bne.n	800c9f0 <strstr+0x8>
 800ca10:	4618      	mov	r0, r3
 800ca12:	e7ec      	b.n	800c9ee <strstr+0x6>

0800ca14 <_localeconv_r>:
 800ca14:	4800      	ldr	r0, [pc, #0]	@ (800ca18 <_localeconv_r+0x4>)
 800ca16:	4770      	bx	lr
 800ca18:	20000244 	.word	0x20000244

0800ca1c <_close_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d06      	ldr	r5, [pc, #24]	@ (800ca38 <_close_r+0x1c>)
 800ca20:	2300      	movs	r3, #0
 800ca22:	4604      	mov	r4, r0
 800ca24:	4608      	mov	r0, r1
 800ca26:	602b      	str	r3, [r5, #0]
 800ca28:	f7f6 fbfc 	bl	8003224 <_close>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_close_r+0x1a>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_close_r+0x1a>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	20005e5c 	.word	0x20005e5c

0800ca3c <_lseek_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	@ (800ca5c <_lseek_r+0x20>)
 800ca40:	4604      	mov	r4, r0
 800ca42:	4608      	mov	r0, r1
 800ca44:	4611      	mov	r1, r2
 800ca46:	2200      	movs	r2, #0
 800ca48:	602a      	str	r2, [r5, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f7f6 fbf4 	bl	8003238 <_lseek>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_lseek_r+0x1e>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_lseek_r+0x1e>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20005e5c 	.word	0x20005e5c

0800ca60 <_read_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d07      	ldr	r5, [pc, #28]	@ (800ca80 <_read_r+0x20>)
 800ca64:	4604      	mov	r4, r0
 800ca66:	4608      	mov	r0, r1
 800ca68:	4611      	mov	r1, r2
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	602a      	str	r2, [r5, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f7f6 fbba 	bl	80031e8 <_read>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	d102      	bne.n	800ca7e <_read_r+0x1e>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	b103      	cbz	r3, 800ca7e <_read_r+0x1e>
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	bd38      	pop	{r3, r4, r5, pc}
 800ca80:	20005e5c 	.word	0x20005e5c

0800ca84 <_write_r>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4d07      	ldr	r5, [pc, #28]	@ (800caa4 <_write_r+0x20>)
 800ca88:	4604      	mov	r4, r0
 800ca8a:	4608      	mov	r0, r1
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	2200      	movs	r2, #0
 800ca90:	602a      	str	r2, [r5, #0]
 800ca92:	461a      	mov	r2, r3
 800ca94:	f7f6 fbb8 	bl	8003208 <_write>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_write_r+0x1e>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_write_r+0x1e>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	20005e5c 	.word	0x20005e5c

0800caa8 <__errno>:
 800caa8:	4b01      	ldr	r3, [pc, #4]	@ (800cab0 <__errno+0x8>)
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	20000104 	.word	0x20000104

0800cab4 <__libc_init_array>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	4d0d      	ldr	r5, [pc, #52]	@ (800caec <__libc_init_array+0x38>)
 800cab8:	4c0d      	ldr	r4, [pc, #52]	@ (800caf0 <__libc_init_array+0x3c>)
 800caba:	1b64      	subs	r4, r4, r5
 800cabc:	10a4      	asrs	r4, r4, #2
 800cabe:	2600      	movs	r6, #0
 800cac0:	42a6      	cmp	r6, r4
 800cac2:	d109      	bne.n	800cad8 <__libc_init_array+0x24>
 800cac4:	4d0b      	ldr	r5, [pc, #44]	@ (800caf4 <__libc_init_array+0x40>)
 800cac6:	4c0c      	ldr	r4, [pc, #48]	@ (800caf8 <__libc_init_array+0x44>)
 800cac8:	f002 f802 	bl	800ead0 <_init>
 800cacc:	1b64      	subs	r4, r4, r5
 800cace:	10a4      	asrs	r4, r4, #2
 800cad0:	2600      	movs	r6, #0
 800cad2:	42a6      	cmp	r6, r4
 800cad4:	d105      	bne.n	800cae2 <__libc_init_array+0x2e>
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
 800cad8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cadc:	4798      	blx	r3
 800cade:	3601      	adds	r6, #1
 800cae0:	e7ee      	b.n	800cac0 <__libc_init_array+0xc>
 800cae2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cae6:	4798      	blx	r3
 800cae8:	3601      	adds	r6, #1
 800caea:	e7f2      	b.n	800cad2 <__libc_init_array+0x1e>
 800caec:	08011048 	.word	0x08011048
 800caf0:	08011048 	.word	0x08011048
 800caf4:	08011048 	.word	0x08011048
 800caf8:	0801104c 	.word	0x0801104c

0800cafc <__retarget_lock_init_recursive>:
 800cafc:	4770      	bx	lr

0800cafe <__retarget_lock_acquire_recursive>:
 800cafe:	4770      	bx	lr

0800cb00 <__retarget_lock_release_recursive>:
 800cb00:	4770      	bx	lr

0800cb02 <memcpy>:
 800cb02:	440a      	add	r2, r1
 800cb04:	4291      	cmp	r1, r2
 800cb06:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cb0a:	d100      	bne.n	800cb0e <memcpy+0xc>
 800cb0c:	4770      	bx	lr
 800cb0e:	b510      	push	{r4, lr}
 800cb10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb18:	4291      	cmp	r1, r2
 800cb1a:	d1f9      	bne.n	800cb10 <memcpy+0xe>
 800cb1c:	bd10      	pop	{r4, pc}

0800cb1e <quorem>:
 800cb1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb22:	6903      	ldr	r3, [r0, #16]
 800cb24:	690c      	ldr	r4, [r1, #16]
 800cb26:	42a3      	cmp	r3, r4
 800cb28:	4607      	mov	r7, r0
 800cb2a:	db7e      	blt.n	800cc2a <quorem+0x10c>
 800cb2c:	3c01      	subs	r4, #1
 800cb2e:	f101 0814 	add.w	r8, r1, #20
 800cb32:	00a3      	lsls	r3, r4, #2
 800cb34:	f100 0514 	add.w	r5, r0, #20
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb3e:	9301      	str	r3, [sp, #4]
 800cb40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb50:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb54:	d32e      	bcc.n	800cbb4 <quorem+0x96>
 800cb56:	f04f 0a00 	mov.w	sl, #0
 800cb5a:	46c4      	mov	ip, r8
 800cb5c:	46ae      	mov	lr, r5
 800cb5e:	46d3      	mov	fp, sl
 800cb60:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb64:	b298      	uxth	r0, r3
 800cb66:	fb06 a000 	mla	r0, r6, r0, sl
 800cb6a:	0c02      	lsrs	r2, r0, #16
 800cb6c:	0c1b      	lsrs	r3, r3, #16
 800cb6e:	fb06 2303 	mla	r3, r6, r3, r2
 800cb72:	f8de 2000 	ldr.w	r2, [lr]
 800cb76:	b280      	uxth	r0, r0
 800cb78:	b292      	uxth	r2, r2
 800cb7a:	1a12      	subs	r2, r2, r0
 800cb7c:	445a      	add	r2, fp
 800cb7e:	f8de 0000 	ldr.w	r0, [lr]
 800cb82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cb8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cb90:	b292      	uxth	r2, r2
 800cb92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cb96:	45e1      	cmp	r9, ip
 800cb98:	f84e 2b04 	str.w	r2, [lr], #4
 800cb9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cba0:	d2de      	bcs.n	800cb60 <quorem+0x42>
 800cba2:	9b00      	ldr	r3, [sp, #0]
 800cba4:	58eb      	ldr	r3, [r5, r3]
 800cba6:	b92b      	cbnz	r3, 800cbb4 <quorem+0x96>
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	3b04      	subs	r3, #4
 800cbac:	429d      	cmp	r5, r3
 800cbae:	461a      	mov	r2, r3
 800cbb0:	d32f      	bcc.n	800cc12 <quorem+0xf4>
 800cbb2:	613c      	str	r4, [r7, #16]
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	f001 f97d 	bl	800deb4 <__mcmp>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	db25      	blt.n	800cc0a <quorem+0xec>
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbc6:	f8d1 c000 	ldr.w	ip, [r1]
 800cbca:	fa1f fe82 	uxth.w	lr, r2
 800cbce:	fa1f f38c 	uxth.w	r3, ip
 800cbd2:	eba3 030e 	sub.w	r3, r3, lr
 800cbd6:	4403      	add	r3, r0
 800cbd8:	0c12      	lsrs	r2, r2, #16
 800cbda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cbde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbe8:	45c1      	cmp	r9, r8
 800cbea:	f841 3b04 	str.w	r3, [r1], #4
 800cbee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cbf2:	d2e6      	bcs.n	800cbc2 <quorem+0xa4>
 800cbf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbfc:	b922      	cbnz	r2, 800cc08 <quorem+0xea>
 800cbfe:	3b04      	subs	r3, #4
 800cc00:	429d      	cmp	r5, r3
 800cc02:	461a      	mov	r2, r3
 800cc04:	d30b      	bcc.n	800cc1e <quorem+0x100>
 800cc06:	613c      	str	r4, [r7, #16]
 800cc08:	3601      	adds	r6, #1
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	b003      	add	sp, #12
 800cc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc12:	6812      	ldr	r2, [r2, #0]
 800cc14:	3b04      	subs	r3, #4
 800cc16:	2a00      	cmp	r2, #0
 800cc18:	d1cb      	bne.n	800cbb2 <quorem+0x94>
 800cc1a:	3c01      	subs	r4, #1
 800cc1c:	e7c6      	b.n	800cbac <quorem+0x8e>
 800cc1e:	6812      	ldr	r2, [r2, #0]
 800cc20:	3b04      	subs	r3, #4
 800cc22:	2a00      	cmp	r2, #0
 800cc24:	d1ef      	bne.n	800cc06 <quorem+0xe8>
 800cc26:	3c01      	subs	r4, #1
 800cc28:	e7ea      	b.n	800cc00 <quorem+0xe2>
 800cc2a:	2000      	movs	r0, #0
 800cc2c:	e7ee      	b.n	800cc0c <quorem+0xee>
	...

0800cc30 <_dtoa_r>:
 800cc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc34:	69c7      	ldr	r7, [r0, #28]
 800cc36:	b097      	sub	sp, #92	@ 0x5c
 800cc38:	4614      	mov	r4, r2
 800cc3a:	461d      	mov	r5, r3
 800cc3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cc40:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800cc42:	4681      	mov	r9, r0
 800cc44:	b97f      	cbnz	r7, 800cc66 <_dtoa_r+0x36>
 800cc46:	2010      	movs	r0, #16
 800cc48:	f000 fe0c 	bl	800d864 <malloc>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	f8c9 001c 	str.w	r0, [r9, #28]
 800cc52:	b920      	cbnz	r0, 800cc5e <_dtoa_r+0x2e>
 800cc54:	4baa      	ldr	r3, [pc, #680]	@ (800cf00 <_dtoa_r+0x2d0>)
 800cc56:	21ef      	movs	r1, #239	@ 0xef
 800cc58:	48aa      	ldr	r0, [pc, #680]	@ (800cf04 <_dtoa_r+0x2d4>)
 800cc5a:	f001 fe53 	bl	800e904 <__assert_func>
 800cc5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cc62:	6007      	str	r7, [r0, #0]
 800cc64:	60c7      	str	r7, [r0, #12]
 800cc66:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cc6a:	6819      	ldr	r1, [r3, #0]
 800cc6c:	b159      	cbz	r1, 800cc86 <_dtoa_r+0x56>
 800cc6e:	685a      	ldr	r2, [r3, #4]
 800cc70:	604a      	str	r2, [r1, #4]
 800cc72:	2301      	movs	r3, #1
 800cc74:	4093      	lsls	r3, r2
 800cc76:	608b      	str	r3, [r1, #8]
 800cc78:	4648      	mov	r0, r9
 800cc7a:	f000 fee9 	bl	800da50 <_Bfree>
 800cc7e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cc82:	2200      	movs	r2, #0
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	1e2b      	subs	r3, r5, #0
 800cc88:	bfb9      	ittee	lt
 800cc8a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cc8e:	9307      	strlt	r3, [sp, #28]
 800cc90:	2300      	movge	r3, #0
 800cc92:	6033      	strge	r3, [r6, #0]
 800cc94:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800cc98:	4b9b      	ldr	r3, [pc, #620]	@ (800cf08 <_dtoa_r+0x2d8>)
 800cc9a:	bfbc      	itt	lt
 800cc9c:	2201      	movlt	r2, #1
 800cc9e:	6032      	strlt	r2, [r6, #0]
 800cca0:	ea33 0308 	bics.w	r3, r3, r8
 800cca4:	d112      	bne.n	800cccc <_dtoa_r+0x9c>
 800cca6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cca8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ccb2:	4323      	orrs	r3, r4
 800ccb4:	f000 855b 	beq.w	800d76e <_dtoa_r+0xb3e>
 800ccb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ccba:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800cf0c <_dtoa_r+0x2dc>
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f000 855d 	beq.w	800d77e <_dtoa_r+0xb4e>
 800ccc4:	f10a 0303 	add.w	r3, sl, #3
 800ccc8:	f000 bd57 	b.w	800d77a <_dtoa_r+0xb4a>
 800cccc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ccd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccd8:	2200      	movs	r2, #0
 800ccda:	2300      	movs	r3, #0
 800ccdc:	f7f3 fecc 	bl	8000a78 <__aeabi_dcmpeq>
 800cce0:	4607      	mov	r7, r0
 800cce2:	b158      	cbz	r0, 800ccfc <_dtoa_r+0xcc>
 800cce4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cce6:	2301      	movs	r3, #1
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ccec:	b113      	cbz	r3, 800ccf4 <_dtoa_r+0xc4>
 800ccee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ccf0:	4b87      	ldr	r3, [pc, #540]	@ (800cf10 <_dtoa_r+0x2e0>)
 800ccf2:	6013      	str	r3, [r2, #0]
 800ccf4:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800cf14 <_dtoa_r+0x2e4>
 800ccf8:	f000 bd41 	b.w	800d77e <_dtoa_r+0xb4e>
 800ccfc:	ab14      	add	r3, sp, #80	@ 0x50
 800ccfe:	9301      	str	r3, [sp, #4]
 800cd00:	ab15      	add	r3, sp, #84	@ 0x54
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	4648      	mov	r0, r9
 800cd06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cd0a:	f001 f981 	bl	800e010 <__d2b>
 800cd0e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800cd12:	9003      	str	r0, [sp, #12]
 800cd14:	2e00      	cmp	r6, #0
 800cd16:	d077      	beq.n	800ce08 <_dtoa_r+0x1d8>
 800cd18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd1a:	9712      	str	r7, [sp, #72]	@ 0x48
 800cd1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cd2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cd30:	4619      	mov	r1, r3
 800cd32:	2200      	movs	r2, #0
 800cd34:	4b78      	ldr	r3, [pc, #480]	@ (800cf18 <_dtoa_r+0x2e8>)
 800cd36:	f7f3 fa7f 	bl	8000238 <__aeabi_dsub>
 800cd3a:	a36b      	add	r3, pc, #428	@ (adr r3, 800cee8 <_dtoa_r+0x2b8>)
 800cd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd40:	f7f3 fc32 	bl	80005a8 <__aeabi_dmul>
 800cd44:	a36a      	add	r3, pc, #424	@ (adr r3, 800cef0 <_dtoa_r+0x2c0>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	f7f3 fa77 	bl	800023c <__adddf3>
 800cd4e:	4604      	mov	r4, r0
 800cd50:	4630      	mov	r0, r6
 800cd52:	460d      	mov	r5, r1
 800cd54:	f7f3 fbbe 	bl	80004d4 <__aeabi_i2d>
 800cd58:	a367      	add	r3, pc, #412	@ (adr r3, 800cef8 <_dtoa_r+0x2c8>)
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5e:	f7f3 fc23 	bl	80005a8 <__aeabi_dmul>
 800cd62:	4602      	mov	r2, r0
 800cd64:	460b      	mov	r3, r1
 800cd66:	4620      	mov	r0, r4
 800cd68:	4629      	mov	r1, r5
 800cd6a:	f7f3 fa67 	bl	800023c <__adddf3>
 800cd6e:	4604      	mov	r4, r0
 800cd70:	460d      	mov	r5, r1
 800cd72:	f7f3 fec9 	bl	8000b08 <__aeabi_d2iz>
 800cd76:	2200      	movs	r2, #0
 800cd78:	4607      	mov	r7, r0
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	4629      	mov	r1, r5
 800cd80:	f7f3 fe84 	bl	8000a8c <__aeabi_dcmplt>
 800cd84:	b140      	cbz	r0, 800cd98 <_dtoa_r+0x168>
 800cd86:	4638      	mov	r0, r7
 800cd88:	f7f3 fba4 	bl	80004d4 <__aeabi_i2d>
 800cd8c:	4622      	mov	r2, r4
 800cd8e:	462b      	mov	r3, r5
 800cd90:	f7f3 fe72 	bl	8000a78 <__aeabi_dcmpeq>
 800cd94:	b900      	cbnz	r0, 800cd98 <_dtoa_r+0x168>
 800cd96:	3f01      	subs	r7, #1
 800cd98:	2f16      	cmp	r7, #22
 800cd9a:	d853      	bhi.n	800ce44 <_dtoa_r+0x214>
 800cd9c:	4b5f      	ldr	r3, [pc, #380]	@ (800cf1c <_dtoa_r+0x2ec>)
 800cd9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdaa:	f7f3 fe6f 	bl	8000a8c <__aeabi_dcmplt>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d04a      	beq.n	800ce48 <_dtoa_r+0x218>
 800cdb2:	3f01      	subs	r7, #1
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cdb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cdba:	1b9b      	subs	r3, r3, r6
 800cdbc:	1e5a      	subs	r2, r3, #1
 800cdbe:	bf45      	ittet	mi
 800cdc0:	f1c3 0301 	rsbmi	r3, r3, #1
 800cdc4:	9304      	strmi	r3, [sp, #16]
 800cdc6:	2300      	movpl	r3, #0
 800cdc8:	2300      	movmi	r3, #0
 800cdca:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdcc:	bf54      	ite	pl
 800cdce:	9304      	strpl	r3, [sp, #16]
 800cdd0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800cdd2:	2f00      	cmp	r7, #0
 800cdd4:	db3a      	blt.n	800ce4c <_dtoa_r+0x21c>
 800cdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd8:	970e      	str	r7, [sp, #56]	@ 0x38
 800cdda:	443b      	add	r3, r7
 800cddc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdde:	2300      	movs	r3, #0
 800cde0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cde2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cde4:	2b09      	cmp	r3, #9
 800cde6:	d864      	bhi.n	800ceb2 <_dtoa_r+0x282>
 800cde8:	2b05      	cmp	r3, #5
 800cdea:	bfc4      	itt	gt
 800cdec:	3b04      	subgt	r3, #4
 800cdee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800cdf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cdf2:	f1a3 0302 	sub.w	r3, r3, #2
 800cdf6:	bfcc      	ite	gt
 800cdf8:	2400      	movgt	r4, #0
 800cdfa:	2401      	movle	r4, #1
 800cdfc:	2b03      	cmp	r3, #3
 800cdfe:	d864      	bhi.n	800ceca <_dtoa_r+0x29a>
 800ce00:	e8df f003 	tbb	[pc, r3]
 800ce04:	2c385553 	.word	0x2c385553
 800ce08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ce0c:	441e      	add	r6, r3
 800ce0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ce12:	2b20      	cmp	r3, #32
 800ce14:	bfc1      	itttt	gt
 800ce16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce1a:	fa08 f803 	lslgt.w	r8, r8, r3
 800ce1e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ce22:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ce26:	bfd6      	itet	le
 800ce28:	f1c3 0320 	rsble	r3, r3, #32
 800ce2c:	ea48 0003 	orrgt.w	r0, r8, r3
 800ce30:	fa04 f003 	lslle.w	r0, r4, r3
 800ce34:	f7f3 fb3e 	bl	80004b4 <__aeabi_ui2d>
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ce3e:	3e01      	subs	r6, #1
 800ce40:	9212      	str	r2, [sp, #72]	@ 0x48
 800ce42:	e775      	b.n	800cd30 <_dtoa_r+0x100>
 800ce44:	2301      	movs	r3, #1
 800ce46:	e7b6      	b.n	800cdb6 <_dtoa_r+0x186>
 800ce48:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ce4a:	e7b5      	b.n	800cdb8 <_dtoa_r+0x188>
 800ce4c:	9b04      	ldr	r3, [sp, #16]
 800ce4e:	1bdb      	subs	r3, r3, r7
 800ce50:	9304      	str	r3, [sp, #16]
 800ce52:	427b      	negs	r3, r7
 800ce54:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce56:	2300      	movs	r3, #0
 800ce58:	930e      	str	r3, [sp, #56]	@ 0x38
 800ce5a:	e7c2      	b.n	800cde2 <_dtoa_r+0x1b2>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce62:	eb07 0b03 	add.w	fp, r7, r3
 800ce66:	f10b 0301 	add.w	r3, fp, #1
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	9308      	str	r3, [sp, #32]
 800ce6e:	bfb8      	it	lt
 800ce70:	2301      	movlt	r3, #1
 800ce72:	e006      	b.n	800ce82 <_dtoa_r+0x252>
 800ce74:	2301      	movs	r3, #1
 800ce76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	dd28      	ble.n	800ced0 <_dtoa_r+0x2a0>
 800ce7e:	469b      	mov	fp, r3
 800ce80:	9308      	str	r3, [sp, #32]
 800ce82:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ce86:	2100      	movs	r1, #0
 800ce88:	2204      	movs	r2, #4
 800ce8a:	f102 0514 	add.w	r5, r2, #20
 800ce8e:	429d      	cmp	r5, r3
 800ce90:	d926      	bls.n	800cee0 <_dtoa_r+0x2b0>
 800ce92:	6041      	str	r1, [r0, #4]
 800ce94:	4648      	mov	r0, r9
 800ce96:	f000 fd9b 	bl	800d9d0 <_Balloc>
 800ce9a:	4682      	mov	sl, r0
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d141      	bne.n	800cf24 <_dtoa_r+0x2f4>
 800cea0:	4b1f      	ldr	r3, [pc, #124]	@ (800cf20 <_dtoa_r+0x2f0>)
 800cea2:	4602      	mov	r2, r0
 800cea4:	f240 11af 	movw	r1, #431	@ 0x1af
 800cea8:	e6d6      	b.n	800cc58 <_dtoa_r+0x28>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e7e3      	b.n	800ce76 <_dtoa_r+0x246>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e7d5      	b.n	800ce5e <_dtoa_r+0x22e>
 800ceb2:	2401      	movs	r4, #1
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9320      	str	r3, [sp, #128]	@ 0x80
 800ceb8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ceba:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800cebe:	2200      	movs	r2, #0
 800cec0:	f8cd b020 	str.w	fp, [sp, #32]
 800cec4:	2312      	movs	r3, #18
 800cec6:	9221      	str	r2, [sp, #132]	@ 0x84
 800cec8:	e7db      	b.n	800ce82 <_dtoa_r+0x252>
 800ceca:	2301      	movs	r3, #1
 800cecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cece:	e7f4      	b.n	800ceba <_dtoa_r+0x28a>
 800ced0:	f04f 0b01 	mov.w	fp, #1
 800ced4:	f8cd b020 	str.w	fp, [sp, #32]
 800ced8:	465b      	mov	r3, fp
 800ceda:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800cede:	e7d0      	b.n	800ce82 <_dtoa_r+0x252>
 800cee0:	3101      	adds	r1, #1
 800cee2:	0052      	lsls	r2, r2, #1
 800cee4:	e7d1      	b.n	800ce8a <_dtoa_r+0x25a>
 800cee6:	bf00      	nop
 800cee8:	636f4361 	.word	0x636f4361
 800ceec:	3fd287a7 	.word	0x3fd287a7
 800cef0:	8b60c8b3 	.word	0x8b60c8b3
 800cef4:	3fc68a28 	.word	0x3fc68a28
 800cef8:	509f79fb 	.word	0x509f79fb
 800cefc:	3fd34413 	.word	0x3fd34413
 800cf00:	08010e0e 	.word	0x08010e0e
 800cf04:	08010e25 	.word	0x08010e25
 800cf08:	7ff00000 	.word	0x7ff00000
 800cf0c:	08010e0a 	.word	0x08010e0a
 800cf10:	08010dde 	.word	0x08010dde
 800cf14:	08010ddd 	.word	0x08010ddd
 800cf18:	3ff80000 	.word	0x3ff80000
 800cf1c:	08010f78 	.word	0x08010f78
 800cf20:	08010e7d 	.word	0x08010e7d
 800cf24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf28:	6018      	str	r0, [r3, #0]
 800cf2a:	9b08      	ldr	r3, [sp, #32]
 800cf2c:	2b0e      	cmp	r3, #14
 800cf2e:	f200 80a1 	bhi.w	800d074 <_dtoa_r+0x444>
 800cf32:	2c00      	cmp	r4, #0
 800cf34:	f000 809e 	beq.w	800d074 <_dtoa_r+0x444>
 800cf38:	2f00      	cmp	r7, #0
 800cf3a:	dd33      	ble.n	800cfa4 <_dtoa_r+0x374>
 800cf3c:	4b9c      	ldr	r3, [pc, #624]	@ (800d1b0 <_dtoa_r+0x580>)
 800cf3e:	f007 020f 	and.w	r2, r7, #15
 800cf42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf46:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cf4a:	05f8      	lsls	r0, r7, #23
 800cf4c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800cf50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cf54:	d516      	bpl.n	800cf84 <_dtoa_r+0x354>
 800cf56:	4b97      	ldr	r3, [pc, #604]	@ (800d1b4 <_dtoa_r+0x584>)
 800cf58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf60:	f7f3 fc4c 	bl	80007fc <__aeabi_ddiv>
 800cf64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf68:	f004 040f 	and.w	r4, r4, #15
 800cf6c:	2603      	movs	r6, #3
 800cf6e:	4d91      	ldr	r5, [pc, #580]	@ (800d1b4 <_dtoa_r+0x584>)
 800cf70:	b954      	cbnz	r4, 800cf88 <_dtoa_r+0x358>
 800cf72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf7a:	f7f3 fc3f 	bl	80007fc <__aeabi_ddiv>
 800cf7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf82:	e028      	b.n	800cfd6 <_dtoa_r+0x3a6>
 800cf84:	2602      	movs	r6, #2
 800cf86:	e7f2      	b.n	800cf6e <_dtoa_r+0x33e>
 800cf88:	07e1      	lsls	r1, r4, #31
 800cf8a:	d508      	bpl.n	800cf9e <_dtoa_r+0x36e>
 800cf8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf94:	f7f3 fb08 	bl	80005a8 <__aeabi_dmul>
 800cf98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf9c:	3601      	adds	r6, #1
 800cf9e:	1064      	asrs	r4, r4, #1
 800cfa0:	3508      	adds	r5, #8
 800cfa2:	e7e5      	b.n	800cf70 <_dtoa_r+0x340>
 800cfa4:	f000 80af 	beq.w	800d106 <_dtoa_r+0x4d6>
 800cfa8:	427c      	negs	r4, r7
 800cfaa:	4b81      	ldr	r3, [pc, #516]	@ (800d1b0 <_dtoa_r+0x580>)
 800cfac:	4d81      	ldr	r5, [pc, #516]	@ (800d1b4 <_dtoa_r+0x584>)
 800cfae:	f004 020f 	and.w	r2, r4, #15
 800cfb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfbe:	f7f3 faf3 	bl	80005a8 <__aeabi_dmul>
 800cfc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cfc6:	1124      	asrs	r4, r4, #4
 800cfc8:	2300      	movs	r3, #0
 800cfca:	2602      	movs	r6, #2
 800cfcc:	2c00      	cmp	r4, #0
 800cfce:	f040 808f 	bne.w	800d0f0 <_dtoa_r+0x4c0>
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1d3      	bne.n	800cf7e <_dtoa_r+0x34e>
 800cfd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfd8:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 8094 	beq.w	800d10a <_dtoa_r+0x4da>
 800cfe2:	4b75      	ldr	r3, [pc, #468]	@ (800d1b8 <_dtoa_r+0x588>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	4629      	mov	r1, r5
 800cfea:	f7f3 fd4f 	bl	8000a8c <__aeabi_dcmplt>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	f000 808b 	beq.w	800d10a <_dtoa_r+0x4da>
 800cff4:	9b08      	ldr	r3, [sp, #32]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f000 8087 	beq.w	800d10a <_dtoa_r+0x4da>
 800cffc:	f1bb 0f00 	cmp.w	fp, #0
 800d000:	dd34      	ble.n	800d06c <_dtoa_r+0x43c>
 800d002:	4620      	mov	r0, r4
 800d004:	4b6d      	ldr	r3, [pc, #436]	@ (800d1bc <_dtoa_r+0x58c>)
 800d006:	2200      	movs	r2, #0
 800d008:	4629      	mov	r1, r5
 800d00a:	f7f3 facd 	bl	80005a8 <__aeabi_dmul>
 800d00e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d012:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d016:	3601      	adds	r6, #1
 800d018:	465c      	mov	r4, fp
 800d01a:	4630      	mov	r0, r6
 800d01c:	f7f3 fa5a 	bl	80004d4 <__aeabi_i2d>
 800d020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d024:	f7f3 fac0 	bl	80005a8 <__aeabi_dmul>
 800d028:	4b65      	ldr	r3, [pc, #404]	@ (800d1c0 <_dtoa_r+0x590>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	f7f3 f906 	bl	800023c <__adddf3>
 800d030:	4605      	mov	r5, r0
 800d032:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d036:	2c00      	cmp	r4, #0
 800d038:	d16a      	bne.n	800d110 <_dtoa_r+0x4e0>
 800d03a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d03e:	4b61      	ldr	r3, [pc, #388]	@ (800d1c4 <_dtoa_r+0x594>)
 800d040:	2200      	movs	r2, #0
 800d042:	f7f3 f8f9 	bl	8000238 <__aeabi_dsub>
 800d046:	4602      	mov	r2, r0
 800d048:	460b      	mov	r3, r1
 800d04a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d04e:	462a      	mov	r2, r5
 800d050:	4633      	mov	r3, r6
 800d052:	f7f3 fd39 	bl	8000ac8 <__aeabi_dcmpgt>
 800d056:	2800      	cmp	r0, #0
 800d058:	f040 8298 	bne.w	800d58c <_dtoa_r+0x95c>
 800d05c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d060:	462a      	mov	r2, r5
 800d062:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d066:	f7f3 fd11 	bl	8000a8c <__aeabi_dcmplt>
 800d06a:	bb38      	cbnz	r0, 800d0bc <_dtoa_r+0x48c>
 800d06c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d070:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d074:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d076:	2b00      	cmp	r3, #0
 800d078:	f2c0 8157 	blt.w	800d32a <_dtoa_r+0x6fa>
 800d07c:	2f0e      	cmp	r7, #14
 800d07e:	f300 8154 	bgt.w	800d32a <_dtoa_r+0x6fa>
 800d082:	4b4b      	ldr	r3, [pc, #300]	@ (800d1b0 <_dtoa_r+0x580>)
 800d084:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d08c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d090:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d092:	2b00      	cmp	r3, #0
 800d094:	f280 80e5 	bge.w	800d262 <_dtoa_r+0x632>
 800d098:	9b08      	ldr	r3, [sp, #32]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f300 80e1 	bgt.w	800d262 <_dtoa_r+0x632>
 800d0a0:	d10c      	bne.n	800d0bc <_dtoa_r+0x48c>
 800d0a2:	4b48      	ldr	r3, [pc, #288]	@ (800d1c4 <_dtoa_r+0x594>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0aa:	f7f3 fa7d 	bl	80005a8 <__aeabi_dmul>
 800d0ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0b2:	f7f3 fcff 	bl	8000ab4 <__aeabi_dcmpge>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	f000 8266 	beq.w	800d588 <_dtoa_r+0x958>
 800d0bc:	2400      	movs	r4, #0
 800d0be:	4625      	mov	r5, r4
 800d0c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d0c2:	4656      	mov	r6, sl
 800d0c4:	ea6f 0803 	mvn.w	r8, r3
 800d0c8:	2700      	movs	r7, #0
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	4648      	mov	r0, r9
 800d0ce:	f000 fcbf 	bl	800da50 <_Bfree>
 800d0d2:	2d00      	cmp	r5, #0
 800d0d4:	f000 80bd 	beq.w	800d252 <_dtoa_r+0x622>
 800d0d8:	b12f      	cbz	r7, 800d0e6 <_dtoa_r+0x4b6>
 800d0da:	42af      	cmp	r7, r5
 800d0dc:	d003      	beq.n	800d0e6 <_dtoa_r+0x4b6>
 800d0de:	4639      	mov	r1, r7
 800d0e0:	4648      	mov	r0, r9
 800d0e2:	f000 fcb5 	bl	800da50 <_Bfree>
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	4648      	mov	r0, r9
 800d0ea:	f000 fcb1 	bl	800da50 <_Bfree>
 800d0ee:	e0b0      	b.n	800d252 <_dtoa_r+0x622>
 800d0f0:	07e2      	lsls	r2, r4, #31
 800d0f2:	d505      	bpl.n	800d100 <_dtoa_r+0x4d0>
 800d0f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d0f8:	f7f3 fa56 	bl	80005a8 <__aeabi_dmul>
 800d0fc:	3601      	adds	r6, #1
 800d0fe:	2301      	movs	r3, #1
 800d100:	1064      	asrs	r4, r4, #1
 800d102:	3508      	adds	r5, #8
 800d104:	e762      	b.n	800cfcc <_dtoa_r+0x39c>
 800d106:	2602      	movs	r6, #2
 800d108:	e765      	b.n	800cfd6 <_dtoa_r+0x3a6>
 800d10a:	9c08      	ldr	r4, [sp, #32]
 800d10c:	46b8      	mov	r8, r7
 800d10e:	e784      	b.n	800d01a <_dtoa_r+0x3ea>
 800d110:	4b27      	ldr	r3, [pc, #156]	@ (800d1b0 <_dtoa_r+0x580>)
 800d112:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d11c:	4454      	add	r4, sl
 800d11e:	2900      	cmp	r1, #0
 800d120:	d054      	beq.n	800d1cc <_dtoa_r+0x59c>
 800d122:	4929      	ldr	r1, [pc, #164]	@ (800d1c8 <_dtoa_r+0x598>)
 800d124:	2000      	movs	r0, #0
 800d126:	f7f3 fb69 	bl	80007fc <__aeabi_ddiv>
 800d12a:	4633      	mov	r3, r6
 800d12c:	462a      	mov	r2, r5
 800d12e:	f7f3 f883 	bl	8000238 <__aeabi_dsub>
 800d132:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d136:	4656      	mov	r6, sl
 800d138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d13c:	f7f3 fce4 	bl	8000b08 <__aeabi_d2iz>
 800d140:	4605      	mov	r5, r0
 800d142:	f7f3 f9c7 	bl	80004d4 <__aeabi_i2d>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d14e:	f7f3 f873 	bl	8000238 <__aeabi_dsub>
 800d152:	3530      	adds	r5, #48	@ 0x30
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d15c:	f806 5b01 	strb.w	r5, [r6], #1
 800d160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d164:	f7f3 fc92 	bl	8000a8c <__aeabi_dcmplt>
 800d168:	2800      	cmp	r0, #0
 800d16a:	d172      	bne.n	800d252 <_dtoa_r+0x622>
 800d16c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d170:	4911      	ldr	r1, [pc, #68]	@ (800d1b8 <_dtoa_r+0x588>)
 800d172:	2000      	movs	r0, #0
 800d174:	f7f3 f860 	bl	8000238 <__aeabi_dsub>
 800d178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d17c:	f7f3 fc86 	bl	8000a8c <__aeabi_dcmplt>
 800d180:	2800      	cmp	r0, #0
 800d182:	f040 80b4 	bne.w	800d2ee <_dtoa_r+0x6be>
 800d186:	42a6      	cmp	r6, r4
 800d188:	f43f af70 	beq.w	800d06c <_dtoa_r+0x43c>
 800d18c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d190:	4b0a      	ldr	r3, [pc, #40]	@ (800d1bc <_dtoa_r+0x58c>)
 800d192:	2200      	movs	r2, #0
 800d194:	f7f3 fa08 	bl	80005a8 <__aeabi_dmul>
 800d198:	4b08      	ldr	r3, [pc, #32]	@ (800d1bc <_dtoa_r+0x58c>)
 800d19a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d19e:	2200      	movs	r2, #0
 800d1a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1a4:	f7f3 fa00 	bl	80005a8 <__aeabi_dmul>
 800d1a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d1ac:	e7c4      	b.n	800d138 <_dtoa_r+0x508>
 800d1ae:	bf00      	nop
 800d1b0:	08010f78 	.word	0x08010f78
 800d1b4:	08010f50 	.word	0x08010f50
 800d1b8:	3ff00000 	.word	0x3ff00000
 800d1bc:	40240000 	.word	0x40240000
 800d1c0:	401c0000 	.word	0x401c0000
 800d1c4:	40140000 	.word	0x40140000
 800d1c8:	3fe00000 	.word	0x3fe00000
 800d1cc:	4631      	mov	r1, r6
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	f7f3 f9ea 	bl	80005a8 <__aeabi_dmul>
 800d1d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d1d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d1da:	4656      	mov	r6, sl
 800d1dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1e0:	f7f3 fc92 	bl	8000b08 <__aeabi_d2iz>
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	f7f3 f975 	bl	80004d4 <__aeabi_i2d>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1f2:	f7f3 f821 	bl	8000238 <__aeabi_dsub>
 800d1f6:	3530      	adds	r5, #48	@ 0x30
 800d1f8:	f806 5b01 	strb.w	r5, [r6], #1
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	42a6      	cmp	r6, r4
 800d202:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d206:	f04f 0200 	mov.w	r2, #0
 800d20a:	d124      	bne.n	800d256 <_dtoa_r+0x626>
 800d20c:	4baf      	ldr	r3, [pc, #700]	@ (800d4cc <_dtoa_r+0x89c>)
 800d20e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d212:	f7f3 f813 	bl	800023c <__adddf3>
 800d216:	4602      	mov	r2, r0
 800d218:	460b      	mov	r3, r1
 800d21a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d21e:	f7f3 fc53 	bl	8000ac8 <__aeabi_dcmpgt>
 800d222:	2800      	cmp	r0, #0
 800d224:	d163      	bne.n	800d2ee <_dtoa_r+0x6be>
 800d226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d22a:	49a8      	ldr	r1, [pc, #672]	@ (800d4cc <_dtoa_r+0x89c>)
 800d22c:	2000      	movs	r0, #0
 800d22e:	f7f3 f803 	bl	8000238 <__aeabi_dsub>
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
 800d236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d23a:	f7f3 fc27 	bl	8000a8c <__aeabi_dcmplt>
 800d23e:	2800      	cmp	r0, #0
 800d240:	f43f af14 	beq.w	800d06c <_dtoa_r+0x43c>
 800d244:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d246:	1e73      	subs	r3, r6, #1
 800d248:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d24a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d24e:	2b30      	cmp	r3, #48	@ 0x30
 800d250:	d0f8      	beq.n	800d244 <_dtoa_r+0x614>
 800d252:	4647      	mov	r7, r8
 800d254:	e03b      	b.n	800d2ce <_dtoa_r+0x69e>
 800d256:	4b9e      	ldr	r3, [pc, #632]	@ (800d4d0 <_dtoa_r+0x8a0>)
 800d258:	f7f3 f9a6 	bl	80005a8 <__aeabi_dmul>
 800d25c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d260:	e7bc      	b.n	800d1dc <_dtoa_r+0x5ac>
 800d262:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800d266:	4656      	mov	r6, sl
 800d268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d26c:	4620      	mov	r0, r4
 800d26e:	4629      	mov	r1, r5
 800d270:	f7f3 fac4 	bl	80007fc <__aeabi_ddiv>
 800d274:	f7f3 fc48 	bl	8000b08 <__aeabi_d2iz>
 800d278:	4680      	mov	r8, r0
 800d27a:	f7f3 f92b 	bl	80004d4 <__aeabi_i2d>
 800d27e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d282:	f7f3 f991 	bl	80005a8 <__aeabi_dmul>
 800d286:	4602      	mov	r2, r0
 800d288:	460b      	mov	r3, r1
 800d28a:	4620      	mov	r0, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d292:	f7f2 ffd1 	bl	8000238 <__aeabi_dsub>
 800d296:	f806 4b01 	strb.w	r4, [r6], #1
 800d29a:	9d08      	ldr	r5, [sp, #32]
 800d29c:	eba6 040a 	sub.w	r4, r6, sl
 800d2a0:	42a5      	cmp	r5, r4
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	d133      	bne.n	800d310 <_dtoa_r+0x6e0>
 800d2a8:	f7f2 ffc8 	bl	800023c <__adddf3>
 800d2ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	460d      	mov	r5, r1
 800d2b4:	f7f3 fc08 	bl	8000ac8 <__aeabi_dcmpgt>
 800d2b8:	b9c0      	cbnz	r0, 800d2ec <_dtoa_r+0x6bc>
 800d2ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	f7f3 fbd9 	bl	8000a78 <__aeabi_dcmpeq>
 800d2c6:	b110      	cbz	r0, 800d2ce <_dtoa_r+0x69e>
 800d2c8:	f018 0f01 	tst.w	r8, #1
 800d2cc:	d10e      	bne.n	800d2ec <_dtoa_r+0x6bc>
 800d2ce:	9903      	ldr	r1, [sp, #12]
 800d2d0:	4648      	mov	r0, r9
 800d2d2:	f000 fbbd 	bl	800da50 <_Bfree>
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	7033      	strb	r3, [r6, #0]
 800d2da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d2dc:	3701      	adds	r7, #1
 800d2de:	601f      	str	r7, [r3, #0]
 800d2e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 824b 	beq.w	800d77e <_dtoa_r+0xb4e>
 800d2e8:	601e      	str	r6, [r3, #0]
 800d2ea:	e248      	b.n	800d77e <_dtoa_r+0xb4e>
 800d2ec:	46b8      	mov	r8, r7
 800d2ee:	4633      	mov	r3, r6
 800d2f0:	461e      	mov	r6, r3
 800d2f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2f6:	2a39      	cmp	r2, #57	@ 0x39
 800d2f8:	d106      	bne.n	800d308 <_dtoa_r+0x6d8>
 800d2fa:	459a      	cmp	sl, r3
 800d2fc:	d1f8      	bne.n	800d2f0 <_dtoa_r+0x6c0>
 800d2fe:	2230      	movs	r2, #48	@ 0x30
 800d300:	f108 0801 	add.w	r8, r8, #1
 800d304:	f88a 2000 	strb.w	r2, [sl]
 800d308:	781a      	ldrb	r2, [r3, #0]
 800d30a:	3201      	adds	r2, #1
 800d30c:	701a      	strb	r2, [r3, #0]
 800d30e:	e7a0      	b.n	800d252 <_dtoa_r+0x622>
 800d310:	4b6f      	ldr	r3, [pc, #444]	@ (800d4d0 <_dtoa_r+0x8a0>)
 800d312:	2200      	movs	r2, #0
 800d314:	f7f3 f948 	bl	80005a8 <__aeabi_dmul>
 800d318:	2200      	movs	r2, #0
 800d31a:	2300      	movs	r3, #0
 800d31c:	4604      	mov	r4, r0
 800d31e:	460d      	mov	r5, r1
 800d320:	f7f3 fbaa 	bl	8000a78 <__aeabi_dcmpeq>
 800d324:	2800      	cmp	r0, #0
 800d326:	d09f      	beq.n	800d268 <_dtoa_r+0x638>
 800d328:	e7d1      	b.n	800d2ce <_dtoa_r+0x69e>
 800d32a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d32c:	2a00      	cmp	r2, #0
 800d32e:	f000 80ea 	beq.w	800d506 <_dtoa_r+0x8d6>
 800d332:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d334:	2a01      	cmp	r2, #1
 800d336:	f300 80cd 	bgt.w	800d4d4 <_dtoa_r+0x8a4>
 800d33a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d33c:	2a00      	cmp	r2, #0
 800d33e:	f000 80c1 	beq.w	800d4c4 <_dtoa_r+0x894>
 800d342:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d346:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d348:	9e04      	ldr	r6, [sp, #16]
 800d34a:	9a04      	ldr	r2, [sp, #16]
 800d34c:	441a      	add	r2, r3
 800d34e:	9204      	str	r2, [sp, #16]
 800d350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d352:	2101      	movs	r1, #1
 800d354:	441a      	add	r2, r3
 800d356:	4648      	mov	r0, r9
 800d358:	9209      	str	r2, [sp, #36]	@ 0x24
 800d35a:	f000 fc2d 	bl	800dbb8 <__i2b>
 800d35e:	4605      	mov	r5, r0
 800d360:	b166      	cbz	r6, 800d37c <_dtoa_r+0x74c>
 800d362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d364:	2b00      	cmp	r3, #0
 800d366:	dd09      	ble.n	800d37c <_dtoa_r+0x74c>
 800d368:	42b3      	cmp	r3, r6
 800d36a:	9a04      	ldr	r2, [sp, #16]
 800d36c:	bfa8      	it	ge
 800d36e:	4633      	movge	r3, r6
 800d370:	1ad2      	subs	r2, r2, r3
 800d372:	9204      	str	r2, [sp, #16]
 800d374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d376:	1af6      	subs	r6, r6, r3
 800d378:	1ad3      	subs	r3, r2, r3
 800d37a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d37c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d37e:	b30b      	cbz	r3, 800d3c4 <_dtoa_r+0x794>
 800d380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 80c6 	beq.w	800d514 <_dtoa_r+0x8e4>
 800d388:	2c00      	cmp	r4, #0
 800d38a:	f000 80c0 	beq.w	800d50e <_dtoa_r+0x8de>
 800d38e:	4629      	mov	r1, r5
 800d390:	4622      	mov	r2, r4
 800d392:	4648      	mov	r0, r9
 800d394:	f000 fcc8 	bl	800dd28 <__pow5mult>
 800d398:	9a03      	ldr	r2, [sp, #12]
 800d39a:	4601      	mov	r1, r0
 800d39c:	4605      	mov	r5, r0
 800d39e:	4648      	mov	r0, r9
 800d3a0:	f000 fc20 	bl	800dbe4 <__multiply>
 800d3a4:	9903      	ldr	r1, [sp, #12]
 800d3a6:	4680      	mov	r8, r0
 800d3a8:	4648      	mov	r0, r9
 800d3aa:	f000 fb51 	bl	800da50 <_Bfree>
 800d3ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3b0:	1b1b      	subs	r3, r3, r4
 800d3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3b4:	f000 80b1 	beq.w	800d51a <_dtoa_r+0x8ea>
 800d3b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3ba:	4641      	mov	r1, r8
 800d3bc:	4648      	mov	r0, r9
 800d3be:	f000 fcb3 	bl	800dd28 <__pow5mult>
 800d3c2:	9003      	str	r0, [sp, #12]
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	4648      	mov	r0, r9
 800d3c8:	f000 fbf6 	bl	800dbb8 <__i2b>
 800d3cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 81d8 	beq.w	800d786 <_dtoa_r+0xb56>
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4601      	mov	r1, r0
 800d3da:	4648      	mov	r0, r9
 800d3dc:	f000 fca4 	bl	800dd28 <__pow5mult>
 800d3e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	f300 809f 	bgt.w	800d528 <_dtoa_r+0x8f8>
 800d3ea:	9b06      	ldr	r3, [sp, #24]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 8097 	bne.w	800d520 <_dtoa_r+0x8f0>
 800d3f2:	9b07      	ldr	r3, [sp, #28]
 800d3f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f040 8093 	bne.w	800d524 <_dtoa_r+0x8f4>
 800d3fe:	9b07      	ldr	r3, [sp, #28]
 800d400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d404:	0d1b      	lsrs	r3, r3, #20
 800d406:	051b      	lsls	r3, r3, #20
 800d408:	b133      	cbz	r3, 800d418 <_dtoa_r+0x7e8>
 800d40a:	9b04      	ldr	r3, [sp, #16]
 800d40c:	3301      	adds	r3, #1
 800d40e:	9304      	str	r3, [sp, #16]
 800d410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d412:	3301      	adds	r3, #1
 800d414:	9309      	str	r3, [sp, #36]	@ 0x24
 800d416:	2301      	movs	r3, #1
 800d418:	930a      	str	r3, [sp, #40]	@ 0x28
 800d41a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 81b8 	beq.w	800d792 <_dtoa_r+0xb62>
 800d422:	6923      	ldr	r3, [r4, #16]
 800d424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d428:	6918      	ldr	r0, [r3, #16]
 800d42a:	f000 fb79 	bl	800db20 <__hi0bits>
 800d42e:	f1c0 0020 	rsb	r0, r0, #32
 800d432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d434:	4418      	add	r0, r3
 800d436:	f010 001f 	ands.w	r0, r0, #31
 800d43a:	f000 8082 	beq.w	800d542 <_dtoa_r+0x912>
 800d43e:	f1c0 0320 	rsb	r3, r0, #32
 800d442:	2b04      	cmp	r3, #4
 800d444:	dd73      	ble.n	800d52e <_dtoa_r+0x8fe>
 800d446:	9b04      	ldr	r3, [sp, #16]
 800d448:	f1c0 001c 	rsb	r0, r0, #28
 800d44c:	4403      	add	r3, r0
 800d44e:	9304      	str	r3, [sp, #16]
 800d450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d452:	4403      	add	r3, r0
 800d454:	4406      	add	r6, r0
 800d456:	9309      	str	r3, [sp, #36]	@ 0x24
 800d458:	9b04      	ldr	r3, [sp, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	dd05      	ble.n	800d46a <_dtoa_r+0x83a>
 800d45e:	9903      	ldr	r1, [sp, #12]
 800d460:	461a      	mov	r2, r3
 800d462:	4648      	mov	r0, r9
 800d464:	f000 fcba 	bl	800dddc <__lshift>
 800d468:	9003      	str	r0, [sp, #12]
 800d46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	dd05      	ble.n	800d47c <_dtoa_r+0x84c>
 800d470:	4621      	mov	r1, r4
 800d472:	461a      	mov	r2, r3
 800d474:	4648      	mov	r0, r9
 800d476:	f000 fcb1 	bl	800dddc <__lshift>
 800d47a:	4604      	mov	r4, r0
 800d47c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d061      	beq.n	800d546 <_dtoa_r+0x916>
 800d482:	9803      	ldr	r0, [sp, #12]
 800d484:	4621      	mov	r1, r4
 800d486:	f000 fd15 	bl	800deb4 <__mcmp>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	da5b      	bge.n	800d546 <_dtoa_r+0x916>
 800d48e:	2300      	movs	r3, #0
 800d490:	9903      	ldr	r1, [sp, #12]
 800d492:	220a      	movs	r2, #10
 800d494:	4648      	mov	r0, r9
 800d496:	f000 fafd 	bl	800da94 <__multadd>
 800d49a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d49c:	9003      	str	r0, [sp, #12]
 800d49e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f000 8177 	beq.w	800d796 <_dtoa_r+0xb66>
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	220a      	movs	r2, #10
 800d4ae:	4648      	mov	r0, r9
 800d4b0:	f000 faf0 	bl	800da94 <__multadd>
 800d4b4:	f1bb 0f00 	cmp.w	fp, #0
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	dc6f      	bgt.n	800d59c <_dtoa_r+0x96c>
 800d4bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	dc49      	bgt.n	800d556 <_dtoa_r+0x926>
 800d4c2:	e06b      	b.n	800d59c <_dtoa_r+0x96c>
 800d4c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d4c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d4ca:	e73c      	b.n	800d346 <_dtoa_r+0x716>
 800d4cc:	3fe00000 	.word	0x3fe00000
 800d4d0:	40240000 	.word	0x40240000
 800d4d4:	9b08      	ldr	r3, [sp, #32]
 800d4d6:	1e5c      	subs	r4, r3, #1
 800d4d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4da:	42a3      	cmp	r3, r4
 800d4dc:	db09      	blt.n	800d4f2 <_dtoa_r+0x8c2>
 800d4de:	1b1c      	subs	r4, r3, r4
 800d4e0:	9b08      	ldr	r3, [sp, #32]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f6bf af30 	bge.w	800d348 <_dtoa_r+0x718>
 800d4e8:	9b04      	ldr	r3, [sp, #16]
 800d4ea:	9a08      	ldr	r2, [sp, #32]
 800d4ec:	1a9e      	subs	r6, r3, r2
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	e72b      	b.n	800d34a <_dtoa_r+0x71a>
 800d4f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4f6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d4f8:	1ae3      	subs	r3, r4, r3
 800d4fa:	441a      	add	r2, r3
 800d4fc:	9e04      	ldr	r6, [sp, #16]
 800d4fe:	9b08      	ldr	r3, [sp, #32]
 800d500:	920e      	str	r2, [sp, #56]	@ 0x38
 800d502:	2400      	movs	r4, #0
 800d504:	e721      	b.n	800d34a <_dtoa_r+0x71a>
 800d506:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d508:	9e04      	ldr	r6, [sp, #16]
 800d50a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d50c:	e728      	b.n	800d360 <_dtoa_r+0x730>
 800d50e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d512:	e751      	b.n	800d3b8 <_dtoa_r+0x788>
 800d514:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d516:	9903      	ldr	r1, [sp, #12]
 800d518:	e750      	b.n	800d3bc <_dtoa_r+0x78c>
 800d51a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d51e:	e751      	b.n	800d3c4 <_dtoa_r+0x794>
 800d520:	2300      	movs	r3, #0
 800d522:	e779      	b.n	800d418 <_dtoa_r+0x7e8>
 800d524:	9b06      	ldr	r3, [sp, #24]
 800d526:	e777      	b.n	800d418 <_dtoa_r+0x7e8>
 800d528:	2300      	movs	r3, #0
 800d52a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d52c:	e779      	b.n	800d422 <_dtoa_r+0x7f2>
 800d52e:	d093      	beq.n	800d458 <_dtoa_r+0x828>
 800d530:	9a04      	ldr	r2, [sp, #16]
 800d532:	331c      	adds	r3, #28
 800d534:	441a      	add	r2, r3
 800d536:	9204      	str	r2, [sp, #16]
 800d538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d53a:	441a      	add	r2, r3
 800d53c:	441e      	add	r6, r3
 800d53e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d540:	e78a      	b.n	800d458 <_dtoa_r+0x828>
 800d542:	4603      	mov	r3, r0
 800d544:	e7f4      	b.n	800d530 <_dtoa_r+0x900>
 800d546:	9b08      	ldr	r3, [sp, #32]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	46b8      	mov	r8, r7
 800d54c:	dc20      	bgt.n	800d590 <_dtoa_r+0x960>
 800d54e:	469b      	mov	fp, r3
 800d550:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d552:	2b02      	cmp	r3, #2
 800d554:	dd1e      	ble.n	800d594 <_dtoa_r+0x964>
 800d556:	f1bb 0f00 	cmp.w	fp, #0
 800d55a:	f47f adb1 	bne.w	800d0c0 <_dtoa_r+0x490>
 800d55e:	4621      	mov	r1, r4
 800d560:	465b      	mov	r3, fp
 800d562:	2205      	movs	r2, #5
 800d564:	4648      	mov	r0, r9
 800d566:	f000 fa95 	bl	800da94 <__multadd>
 800d56a:	4601      	mov	r1, r0
 800d56c:	4604      	mov	r4, r0
 800d56e:	9803      	ldr	r0, [sp, #12]
 800d570:	f000 fca0 	bl	800deb4 <__mcmp>
 800d574:	2800      	cmp	r0, #0
 800d576:	f77f ada3 	ble.w	800d0c0 <_dtoa_r+0x490>
 800d57a:	4656      	mov	r6, sl
 800d57c:	2331      	movs	r3, #49	@ 0x31
 800d57e:	f806 3b01 	strb.w	r3, [r6], #1
 800d582:	f108 0801 	add.w	r8, r8, #1
 800d586:	e59f      	b.n	800d0c8 <_dtoa_r+0x498>
 800d588:	9c08      	ldr	r4, [sp, #32]
 800d58a:	46b8      	mov	r8, r7
 800d58c:	4625      	mov	r5, r4
 800d58e:	e7f4      	b.n	800d57a <_dtoa_r+0x94a>
 800d590:	f8dd b020 	ldr.w	fp, [sp, #32]
 800d594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 8101 	beq.w	800d79e <_dtoa_r+0xb6e>
 800d59c:	2e00      	cmp	r6, #0
 800d59e:	dd05      	ble.n	800d5ac <_dtoa_r+0x97c>
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	4632      	mov	r2, r6
 800d5a4:	4648      	mov	r0, r9
 800d5a6:	f000 fc19 	bl	800dddc <__lshift>
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d05c      	beq.n	800d66c <_dtoa_r+0xa3c>
 800d5b2:	6869      	ldr	r1, [r5, #4]
 800d5b4:	4648      	mov	r0, r9
 800d5b6:	f000 fa0b 	bl	800d9d0 <_Balloc>
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	b928      	cbnz	r0, 800d5ca <_dtoa_r+0x99a>
 800d5be:	4b82      	ldr	r3, [pc, #520]	@ (800d7c8 <_dtoa_r+0xb98>)
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d5c6:	f7ff bb47 	b.w	800cc58 <_dtoa_r+0x28>
 800d5ca:	692a      	ldr	r2, [r5, #16]
 800d5cc:	3202      	adds	r2, #2
 800d5ce:	0092      	lsls	r2, r2, #2
 800d5d0:	f105 010c 	add.w	r1, r5, #12
 800d5d4:	300c      	adds	r0, #12
 800d5d6:	f7ff fa94 	bl	800cb02 <memcpy>
 800d5da:	2201      	movs	r2, #1
 800d5dc:	4631      	mov	r1, r6
 800d5de:	4648      	mov	r0, r9
 800d5e0:	f000 fbfc 	bl	800dddc <__lshift>
 800d5e4:	f10a 0301 	add.w	r3, sl, #1
 800d5e8:	9304      	str	r3, [sp, #16]
 800d5ea:	eb0a 030b 	add.w	r3, sl, fp
 800d5ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5f0:	9b06      	ldr	r3, [sp, #24]
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	462f      	mov	r7, r5
 800d5f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5fa:	4605      	mov	r5, r0
 800d5fc:	9b04      	ldr	r3, [sp, #16]
 800d5fe:	9803      	ldr	r0, [sp, #12]
 800d600:	4621      	mov	r1, r4
 800d602:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800d606:	f7ff fa8a 	bl	800cb1e <quorem>
 800d60a:	4603      	mov	r3, r0
 800d60c:	3330      	adds	r3, #48	@ 0x30
 800d60e:	9006      	str	r0, [sp, #24]
 800d610:	4639      	mov	r1, r7
 800d612:	9803      	ldr	r0, [sp, #12]
 800d614:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d616:	f000 fc4d 	bl	800deb4 <__mcmp>
 800d61a:	462a      	mov	r2, r5
 800d61c:	9008      	str	r0, [sp, #32]
 800d61e:	4621      	mov	r1, r4
 800d620:	4648      	mov	r0, r9
 800d622:	f000 fc63 	bl	800deec <__mdiff>
 800d626:	68c2      	ldr	r2, [r0, #12]
 800d628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d62a:	4606      	mov	r6, r0
 800d62c:	bb02      	cbnz	r2, 800d670 <_dtoa_r+0xa40>
 800d62e:	4601      	mov	r1, r0
 800d630:	9803      	ldr	r0, [sp, #12]
 800d632:	f000 fc3f 	bl	800deb4 <__mcmp>
 800d636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d638:	4602      	mov	r2, r0
 800d63a:	4631      	mov	r1, r6
 800d63c:	4648      	mov	r0, r9
 800d63e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800d642:	f000 fa05 	bl	800da50 <_Bfree>
 800d646:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d648:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d64a:	9e04      	ldr	r6, [sp, #16]
 800d64c:	ea42 0103 	orr.w	r1, r2, r3
 800d650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d652:	4319      	orrs	r1, r3
 800d654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d656:	d10d      	bne.n	800d674 <_dtoa_r+0xa44>
 800d658:	2b39      	cmp	r3, #57	@ 0x39
 800d65a:	d027      	beq.n	800d6ac <_dtoa_r+0xa7c>
 800d65c:	9a08      	ldr	r2, [sp, #32]
 800d65e:	2a00      	cmp	r2, #0
 800d660:	dd01      	ble.n	800d666 <_dtoa_r+0xa36>
 800d662:	9b06      	ldr	r3, [sp, #24]
 800d664:	3331      	adds	r3, #49	@ 0x31
 800d666:	f88b 3000 	strb.w	r3, [fp]
 800d66a:	e52e      	b.n	800d0ca <_dtoa_r+0x49a>
 800d66c:	4628      	mov	r0, r5
 800d66e:	e7b9      	b.n	800d5e4 <_dtoa_r+0x9b4>
 800d670:	2201      	movs	r2, #1
 800d672:	e7e2      	b.n	800d63a <_dtoa_r+0xa0a>
 800d674:	9908      	ldr	r1, [sp, #32]
 800d676:	2900      	cmp	r1, #0
 800d678:	db04      	blt.n	800d684 <_dtoa_r+0xa54>
 800d67a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800d67c:	4301      	orrs	r1, r0
 800d67e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d680:	4301      	orrs	r1, r0
 800d682:	d120      	bne.n	800d6c6 <_dtoa_r+0xa96>
 800d684:	2a00      	cmp	r2, #0
 800d686:	ddee      	ble.n	800d666 <_dtoa_r+0xa36>
 800d688:	9903      	ldr	r1, [sp, #12]
 800d68a:	9304      	str	r3, [sp, #16]
 800d68c:	2201      	movs	r2, #1
 800d68e:	4648      	mov	r0, r9
 800d690:	f000 fba4 	bl	800dddc <__lshift>
 800d694:	4621      	mov	r1, r4
 800d696:	9003      	str	r0, [sp, #12]
 800d698:	f000 fc0c 	bl	800deb4 <__mcmp>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	9b04      	ldr	r3, [sp, #16]
 800d6a0:	dc02      	bgt.n	800d6a8 <_dtoa_r+0xa78>
 800d6a2:	d1e0      	bne.n	800d666 <_dtoa_r+0xa36>
 800d6a4:	07da      	lsls	r2, r3, #31
 800d6a6:	d5de      	bpl.n	800d666 <_dtoa_r+0xa36>
 800d6a8:	2b39      	cmp	r3, #57	@ 0x39
 800d6aa:	d1da      	bne.n	800d662 <_dtoa_r+0xa32>
 800d6ac:	2339      	movs	r3, #57	@ 0x39
 800d6ae:	f88b 3000 	strb.w	r3, [fp]
 800d6b2:	4633      	mov	r3, r6
 800d6b4:	461e      	mov	r6, r3
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6bc:	2a39      	cmp	r2, #57	@ 0x39
 800d6be:	d04e      	beq.n	800d75e <_dtoa_r+0xb2e>
 800d6c0:	3201      	adds	r2, #1
 800d6c2:	701a      	strb	r2, [r3, #0]
 800d6c4:	e501      	b.n	800d0ca <_dtoa_r+0x49a>
 800d6c6:	2a00      	cmp	r2, #0
 800d6c8:	dd03      	ble.n	800d6d2 <_dtoa_r+0xaa2>
 800d6ca:	2b39      	cmp	r3, #57	@ 0x39
 800d6cc:	d0ee      	beq.n	800d6ac <_dtoa_r+0xa7c>
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	e7c9      	b.n	800d666 <_dtoa_r+0xa36>
 800d6d2:	9a04      	ldr	r2, [sp, #16]
 800d6d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d6da:	428a      	cmp	r2, r1
 800d6dc:	d028      	beq.n	800d730 <_dtoa_r+0xb00>
 800d6de:	9903      	ldr	r1, [sp, #12]
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	220a      	movs	r2, #10
 800d6e4:	4648      	mov	r0, r9
 800d6e6:	f000 f9d5 	bl	800da94 <__multadd>
 800d6ea:	42af      	cmp	r7, r5
 800d6ec:	9003      	str	r0, [sp, #12]
 800d6ee:	f04f 0300 	mov.w	r3, #0
 800d6f2:	f04f 020a 	mov.w	r2, #10
 800d6f6:	4639      	mov	r1, r7
 800d6f8:	4648      	mov	r0, r9
 800d6fa:	d107      	bne.n	800d70c <_dtoa_r+0xadc>
 800d6fc:	f000 f9ca 	bl	800da94 <__multadd>
 800d700:	4607      	mov	r7, r0
 800d702:	4605      	mov	r5, r0
 800d704:	9b04      	ldr	r3, [sp, #16]
 800d706:	3301      	adds	r3, #1
 800d708:	9304      	str	r3, [sp, #16]
 800d70a:	e777      	b.n	800d5fc <_dtoa_r+0x9cc>
 800d70c:	f000 f9c2 	bl	800da94 <__multadd>
 800d710:	4629      	mov	r1, r5
 800d712:	4607      	mov	r7, r0
 800d714:	2300      	movs	r3, #0
 800d716:	220a      	movs	r2, #10
 800d718:	4648      	mov	r0, r9
 800d71a:	f000 f9bb 	bl	800da94 <__multadd>
 800d71e:	4605      	mov	r5, r0
 800d720:	e7f0      	b.n	800d704 <_dtoa_r+0xad4>
 800d722:	f1bb 0f00 	cmp.w	fp, #0
 800d726:	bfcc      	ite	gt
 800d728:	465e      	movgt	r6, fp
 800d72a:	2601      	movle	r6, #1
 800d72c:	4456      	add	r6, sl
 800d72e:	2700      	movs	r7, #0
 800d730:	9903      	ldr	r1, [sp, #12]
 800d732:	9304      	str	r3, [sp, #16]
 800d734:	2201      	movs	r2, #1
 800d736:	4648      	mov	r0, r9
 800d738:	f000 fb50 	bl	800dddc <__lshift>
 800d73c:	4621      	mov	r1, r4
 800d73e:	9003      	str	r0, [sp, #12]
 800d740:	f000 fbb8 	bl	800deb4 <__mcmp>
 800d744:	2800      	cmp	r0, #0
 800d746:	dcb4      	bgt.n	800d6b2 <_dtoa_r+0xa82>
 800d748:	d102      	bne.n	800d750 <_dtoa_r+0xb20>
 800d74a:	9b04      	ldr	r3, [sp, #16]
 800d74c:	07db      	lsls	r3, r3, #31
 800d74e:	d4b0      	bmi.n	800d6b2 <_dtoa_r+0xa82>
 800d750:	4633      	mov	r3, r6
 800d752:	461e      	mov	r6, r3
 800d754:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d758:	2a30      	cmp	r2, #48	@ 0x30
 800d75a:	d0fa      	beq.n	800d752 <_dtoa_r+0xb22>
 800d75c:	e4b5      	b.n	800d0ca <_dtoa_r+0x49a>
 800d75e:	459a      	cmp	sl, r3
 800d760:	d1a8      	bne.n	800d6b4 <_dtoa_r+0xa84>
 800d762:	2331      	movs	r3, #49	@ 0x31
 800d764:	f108 0801 	add.w	r8, r8, #1
 800d768:	f88a 3000 	strb.w	r3, [sl]
 800d76c:	e4ad      	b.n	800d0ca <_dtoa_r+0x49a>
 800d76e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d770:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d7cc <_dtoa_r+0xb9c>
 800d774:	b11b      	cbz	r3, 800d77e <_dtoa_r+0xb4e>
 800d776:	f10a 0308 	add.w	r3, sl, #8
 800d77a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d77c:	6013      	str	r3, [r2, #0]
 800d77e:	4650      	mov	r0, sl
 800d780:	b017      	add	sp, #92	@ 0x5c
 800d782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d786:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d788:	2b01      	cmp	r3, #1
 800d78a:	f77f ae2e 	ble.w	800d3ea <_dtoa_r+0x7ba>
 800d78e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d790:	930a      	str	r3, [sp, #40]	@ 0x28
 800d792:	2001      	movs	r0, #1
 800d794:	e64d      	b.n	800d432 <_dtoa_r+0x802>
 800d796:	f1bb 0f00 	cmp.w	fp, #0
 800d79a:	f77f aed9 	ble.w	800d550 <_dtoa_r+0x920>
 800d79e:	4656      	mov	r6, sl
 800d7a0:	9803      	ldr	r0, [sp, #12]
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	f7ff f9bb 	bl	800cb1e <quorem>
 800d7a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d7ac:	f806 3b01 	strb.w	r3, [r6], #1
 800d7b0:	eba6 020a 	sub.w	r2, r6, sl
 800d7b4:	4593      	cmp	fp, r2
 800d7b6:	ddb4      	ble.n	800d722 <_dtoa_r+0xaf2>
 800d7b8:	9903      	ldr	r1, [sp, #12]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	220a      	movs	r2, #10
 800d7be:	4648      	mov	r0, r9
 800d7c0:	f000 f968 	bl	800da94 <__multadd>
 800d7c4:	9003      	str	r0, [sp, #12]
 800d7c6:	e7eb      	b.n	800d7a0 <_dtoa_r+0xb70>
 800d7c8:	08010e7d 	.word	0x08010e7d
 800d7cc:	08010e01 	.word	0x08010e01

0800d7d0 <_free_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	2900      	cmp	r1, #0
 800d7d6:	d041      	beq.n	800d85c <_free_r+0x8c>
 800d7d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7dc:	1f0c      	subs	r4, r1, #4
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	bfb8      	it	lt
 800d7e2:	18e4      	addlt	r4, r4, r3
 800d7e4:	f000 f8e8 	bl	800d9b8 <__malloc_lock>
 800d7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d860 <_free_r+0x90>)
 800d7ea:	6813      	ldr	r3, [r2, #0]
 800d7ec:	b933      	cbnz	r3, 800d7fc <_free_r+0x2c>
 800d7ee:	6063      	str	r3, [r4, #4]
 800d7f0:	6014      	str	r4, [r2, #0]
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7f8:	f000 b8e4 	b.w	800d9c4 <__malloc_unlock>
 800d7fc:	42a3      	cmp	r3, r4
 800d7fe:	d908      	bls.n	800d812 <_free_r+0x42>
 800d800:	6820      	ldr	r0, [r4, #0]
 800d802:	1821      	adds	r1, r4, r0
 800d804:	428b      	cmp	r3, r1
 800d806:	bf01      	itttt	eq
 800d808:	6819      	ldreq	r1, [r3, #0]
 800d80a:	685b      	ldreq	r3, [r3, #4]
 800d80c:	1809      	addeq	r1, r1, r0
 800d80e:	6021      	streq	r1, [r4, #0]
 800d810:	e7ed      	b.n	800d7ee <_free_r+0x1e>
 800d812:	461a      	mov	r2, r3
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	b10b      	cbz	r3, 800d81c <_free_r+0x4c>
 800d818:	42a3      	cmp	r3, r4
 800d81a:	d9fa      	bls.n	800d812 <_free_r+0x42>
 800d81c:	6811      	ldr	r1, [r2, #0]
 800d81e:	1850      	adds	r0, r2, r1
 800d820:	42a0      	cmp	r0, r4
 800d822:	d10b      	bne.n	800d83c <_free_r+0x6c>
 800d824:	6820      	ldr	r0, [r4, #0]
 800d826:	4401      	add	r1, r0
 800d828:	1850      	adds	r0, r2, r1
 800d82a:	4283      	cmp	r3, r0
 800d82c:	6011      	str	r1, [r2, #0]
 800d82e:	d1e0      	bne.n	800d7f2 <_free_r+0x22>
 800d830:	6818      	ldr	r0, [r3, #0]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	6053      	str	r3, [r2, #4]
 800d836:	4408      	add	r0, r1
 800d838:	6010      	str	r0, [r2, #0]
 800d83a:	e7da      	b.n	800d7f2 <_free_r+0x22>
 800d83c:	d902      	bls.n	800d844 <_free_r+0x74>
 800d83e:	230c      	movs	r3, #12
 800d840:	602b      	str	r3, [r5, #0]
 800d842:	e7d6      	b.n	800d7f2 <_free_r+0x22>
 800d844:	6820      	ldr	r0, [r4, #0]
 800d846:	1821      	adds	r1, r4, r0
 800d848:	428b      	cmp	r3, r1
 800d84a:	bf04      	itt	eq
 800d84c:	6819      	ldreq	r1, [r3, #0]
 800d84e:	685b      	ldreq	r3, [r3, #4]
 800d850:	6063      	str	r3, [r4, #4]
 800d852:	bf04      	itt	eq
 800d854:	1809      	addeq	r1, r1, r0
 800d856:	6021      	streq	r1, [r4, #0]
 800d858:	6054      	str	r4, [r2, #4]
 800d85a:	e7ca      	b.n	800d7f2 <_free_r+0x22>
 800d85c:	bd38      	pop	{r3, r4, r5, pc}
 800d85e:	bf00      	nop
 800d860:	20005e68 	.word	0x20005e68

0800d864 <malloc>:
 800d864:	4b02      	ldr	r3, [pc, #8]	@ (800d870 <malloc+0xc>)
 800d866:	4601      	mov	r1, r0
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	f000 b825 	b.w	800d8b8 <_malloc_r>
 800d86e:	bf00      	nop
 800d870:	20000104 	.word	0x20000104

0800d874 <sbrk_aligned>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	4e0f      	ldr	r6, [pc, #60]	@ (800d8b4 <sbrk_aligned+0x40>)
 800d878:	460c      	mov	r4, r1
 800d87a:	6831      	ldr	r1, [r6, #0]
 800d87c:	4605      	mov	r5, r0
 800d87e:	b911      	cbnz	r1, 800d886 <sbrk_aligned+0x12>
 800d880:	f001 f830 	bl	800e8e4 <_sbrk_r>
 800d884:	6030      	str	r0, [r6, #0]
 800d886:	4621      	mov	r1, r4
 800d888:	4628      	mov	r0, r5
 800d88a:	f001 f82b 	bl	800e8e4 <_sbrk_r>
 800d88e:	1c43      	adds	r3, r0, #1
 800d890:	d103      	bne.n	800d89a <sbrk_aligned+0x26>
 800d892:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d896:	4620      	mov	r0, r4
 800d898:	bd70      	pop	{r4, r5, r6, pc}
 800d89a:	1cc4      	adds	r4, r0, #3
 800d89c:	f024 0403 	bic.w	r4, r4, #3
 800d8a0:	42a0      	cmp	r0, r4
 800d8a2:	d0f8      	beq.n	800d896 <sbrk_aligned+0x22>
 800d8a4:	1a21      	subs	r1, r4, r0
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	f001 f81c 	bl	800e8e4 <_sbrk_r>
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d1f2      	bne.n	800d896 <sbrk_aligned+0x22>
 800d8b0:	e7ef      	b.n	800d892 <sbrk_aligned+0x1e>
 800d8b2:	bf00      	nop
 800d8b4:	20005e64 	.word	0x20005e64

0800d8b8 <_malloc_r>:
 800d8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8bc:	1ccd      	adds	r5, r1, #3
 800d8be:	f025 0503 	bic.w	r5, r5, #3
 800d8c2:	3508      	adds	r5, #8
 800d8c4:	2d0c      	cmp	r5, #12
 800d8c6:	bf38      	it	cc
 800d8c8:	250c      	movcc	r5, #12
 800d8ca:	2d00      	cmp	r5, #0
 800d8cc:	4606      	mov	r6, r0
 800d8ce:	db01      	blt.n	800d8d4 <_malloc_r+0x1c>
 800d8d0:	42a9      	cmp	r1, r5
 800d8d2:	d904      	bls.n	800d8de <_malloc_r+0x26>
 800d8d4:	230c      	movs	r3, #12
 800d8d6:	6033      	str	r3, [r6, #0]
 800d8d8:	2000      	movs	r0, #0
 800d8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9b4 <_malloc_r+0xfc>
 800d8e2:	f000 f869 	bl	800d9b8 <__malloc_lock>
 800d8e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8ea:	461c      	mov	r4, r3
 800d8ec:	bb44      	cbnz	r4, 800d940 <_malloc_r+0x88>
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f7ff ffbf 	bl	800d874 <sbrk_aligned>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	d158      	bne.n	800d9ae <_malloc_r+0xf6>
 800d8fc:	f8d8 4000 	ldr.w	r4, [r8]
 800d900:	4627      	mov	r7, r4
 800d902:	2f00      	cmp	r7, #0
 800d904:	d143      	bne.n	800d98e <_malloc_r+0xd6>
 800d906:	2c00      	cmp	r4, #0
 800d908:	d04b      	beq.n	800d9a2 <_malloc_r+0xea>
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	4639      	mov	r1, r7
 800d90e:	4630      	mov	r0, r6
 800d910:	eb04 0903 	add.w	r9, r4, r3
 800d914:	f000 ffe6 	bl	800e8e4 <_sbrk_r>
 800d918:	4581      	cmp	r9, r0
 800d91a:	d142      	bne.n	800d9a2 <_malloc_r+0xea>
 800d91c:	6821      	ldr	r1, [r4, #0]
 800d91e:	1a6d      	subs	r5, r5, r1
 800d920:	4629      	mov	r1, r5
 800d922:	4630      	mov	r0, r6
 800d924:	f7ff ffa6 	bl	800d874 <sbrk_aligned>
 800d928:	3001      	adds	r0, #1
 800d92a:	d03a      	beq.n	800d9a2 <_malloc_r+0xea>
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	442b      	add	r3, r5
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	f8d8 3000 	ldr.w	r3, [r8]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	bb62      	cbnz	r2, 800d994 <_malloc_r+0xdc>
 800d93a:	f8c8 7000 	str.w	r7, [r8]
 800d93e:	e00f      	b.n	800d960 <_malloc_r+0xa8>
 800d940:	6822      	ldr	r2, [r4, #0]
 800d942:	1b52      	subs	r2, r2, r5
 800d944:	d420      	bmi.n	800d988 <_malloc_r+0xd0>
 800d946:	2a0b      	cmp	r2, #11
 800d948:	d917      	bls.n	800d97a <_malloc_r+0xc2>
 800d94a:	1961      	adds	r1, r4, r5
 800d94c:	42a3      	cmp	r3, r4
 800d94e:	6025      	str	r5, [r4, #0]
 800d950:	bf18      	it	ne
 800d952:	6059      	strne	r1, [r3, #4]
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	bf08      	it	eq
 800d958:	f8c8 1000 	streq.w	r1, [r8]
 800d95c:	5162      	str	r2, [r4, r5]
 800d95e:	604b      	str	r3, [r1, #4]
 800d960:	4630      	mov	r0, r6
 800d962:	f000 f82f 	bl	800d9c4 <__malloc_unlock>
 800d966:	f104 000b 	add.w	r0, r4, #11
 800d96a:	1d23      	adds	r3, r4, #4
 800d96c:	f020 0007 	bic.w	r0, r0, #7
 800d970:	1ac2      	subs	r2, r0, r3
 800d972:	bf1c      	itt	ne
 800d974:	1a1b      	subne	r3, r3, r0
 800d976:	50a3      	strne	r3, [r4, r2]
 800d978:	e7af      	b.n	800d8da <_malloc_r+0x22>
 800d97a:	6862      	ldr	r2, [r4, #4]
 800d97c:	42a3      	cmp	r3, r4
 800d97e:	bf0c      	ite	eq
 800d980:	f8c8 2000 	streq.w	r2, [r8]
 800d984:	605a      	strne	r2, [r3, #4]
 800d986:	e7eb      	b.n	800d960 <_malloc_r+0xa8>
 800d988:	4623      	mov	r3, r4
 800d98a:	6864      	ldr	r4, [r4, #4]
 800d98c:	e7ae      	b.n	800d8ec <_malloc_r+0x34>
 800d98e:	463c      	mov	r4, r7
 800d990:	687f      	ldr	r7, [r7, #4]
 800d992:	e7b6      	b.n	800d902 <_malloc_r+0x4a>
 800d994:	461a      	mov	r2, r3
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	42a3      	cmp	r3, r4
 800d99a:	d1fb      	bne.n	800d994 <_malloc_r+0xdc>
 800d99c:	2300      	movs	r3, #0
 800d99e:	6053      	str	r3, [r2, #4]
 800d9a0:	e7de      	b.n	800d960 <_malloc_r+0xa8>
 800d9a2:	230c      	movs	r3, #12
 800d9a4:	6033      	str	r3, [r6, #0]
 800d9a6:	4630      	mov	r0, r6
 800d9a8:	f000 f80c 	bl	800d9c4 <__malloc_unlock>
 800d9ac:	e794      	b.n	800d8d8 <_malloc_r+0x20>
 800d9ae:	6005      	str	r5, [r0, #0]
 800d9b0:	e7d6      	b.n	800d960 <_malloc_r+0xa8>
 800d9b2:	bf00      	nop
 800d9b4:	20005e68 	.word	0x20005e68

0800d9b8 <__malloc_lock>:
 800d9b8:	4801      	ldr	r0, [pc, #4]	@ (800d9c0 <__malloc_lock+0x8>)
 800d9ba:	f7ff b8a0 	b.w	800cafe <__retarget_lock_acquire_recursive>
 800d9be:	bf00      	nop
 800d9c0:	20005e60 	.word	0x20005e60

0800d9c4 <__malloc_unlock>:
 800d9c4:	4801      	ldr	r0, [pc, #4]	@ (800d9cc <__malloc_unlock+0x8>)
 800d9c6:	f7ff b89b 	b.w	800cb00 <__retarget_lock_release_recursive>
 800d9ca:	bf00      	nop
 800d9cc:	20005e60 	.word	0x20005e60

0800d9d0 <_Balloc>:
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	69c6      	ldr	r6, [r0, #28]
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	460d      	mov	r5, r1
 800d9d8:	b976      	cbnz	r6, 800d9f8 <_Balloc+0x28>
 800d9da:	2010      	movs	r0, #16
 800d9dc:	f7ff ff42 	bl	800d864 <malloc>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	61e0      	str	r0, [r4, #28]
 800d9e4:	b920      	cbnz	r0, 800d9f0 <_Balloc+0x20>
 800d9e6:	4b18      	ldr	r3, [pc, #96]	@ (800da48 <_Balloc+0x78>)
 800d9e8:	4818      	ldr	r0, [pc, #96]	@ (800da4c <_Balloc+0x7c>)
 800d9ea:	216b      	movs	r1, #107	@ 0x6b
 800d9ec:	f000 ff8a 	bl	800e904 <__assert_func>
 800d9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9f4:	6006      	str	r6, [r0, #0]
 800d9f6:	60c6      	str	r6, [r0, #12]
 800d9f8:	69e6      	ldr	r6, [r4, #28]
 800d9fa:	68f3      	ldr	r3, [r6, #12]
 800d9fc:	b183      	cbz	r3, 800da20 <_Balloc+0x50>
 800d9fe:	69e3      	ldr	r3, [r4, #28]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da06:	b9b8      	cbnz	r0, 800da38 <_Balloc+0x68>
 800da08:	2101      	movs	r1, #1
 800da0a:	fa01 f605 	lsl.w	r6, r1, r5
 800da0e:	1d72      	adds	r2, r6, #5
 800da10:	0092      	lsls	r2, r2, #2
 800da12:	4620      	mov	r0, r4
 800da14:	f000 ff94 	bl	800e940 <_calloc_r>
 800da18:	b160      	cbz	r0, 800da34 <_Balloc+0x64>
 800da1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da1e:	e00e      	b.n	800da3e <_Balloc+0x6e>
 800da20:	2221      	movs	r2, #33	@ 0x21
 800da22:	2104      	movs	r1, #4
 800da24:	4620      	mov	r0, r4
 800da26:	f000 ff8b 	bl	800e940 <_calloc_r>
 800da2a:	69e3      	ldr	r3, [r4, #28]
 800da2c:	60f0      	str	r0, [r6, #12]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1e4      	bne.n	800d9fe <_Balloc+0x2e>
 800da34:	2000      	movs	r0, #0
 800da36:	bd70      	pop	{r4, r5, r6, pc}
 800da38:	6802      	ldr	r2, [r0, #0]
 800da3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da3e:	2300      	movs	r3, #0
 800da40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da44:	e7f7      	b.n	800da36 <_Balloc+0x66>
 800da46:	bf00      	nop
 800da48:	08010e0e 	.word	0x08010e0e
 800da4c:	08010e8e 	.word	0x08010e8e

0800da50 <_Bfree>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	69c6      	ldr	r6, [r0, #28]
 800da54:	4605      	mov	r5, r0
 800da56:	460c      	mov	r4, r1
 800da58:	b976      	cbnz	r6, 800da78 <_Bfree+0x28>
 800da5a:	2010      	movs	r0, #16
 800da5c:	f7ff ff02 	bl	800d864 <malloc>
 800da60:	4602      	mov	r2, r0
 800da62:	61e8      	str	r0, [r5, #28]
 800da64:	b920      	cbnz	r0, 800da70 <_Bfree+0x20>
 800da66:	4b09      	ldr	r3, [pc, #36]	@ (800da8c <_Bfree+0x3c>)
 800da68:	4809      	ldr	r0, [pc, #36]	@ (800da90 <_Bfree+0x40>)
 800da6a:	218f      	movs	r1, #143	@ 0x8f
 800da6c:	f000 ff4a 	bl	800e904 <__assert_func>
 800da70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da74:	6006      	str	r6, [r0, #0]
 800da76:	60c6      	str	r6, [r0, #12]
 800da78:	b13c      	cbz	r4, 800da8a <_Bfree+0x3a>
 800da7a:	69eb      	ldr	r3, [r5, #28]
 800da7c:	6862      	ldr	r2, [r4, #4]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da84:	6021      	str	r1, [r4, #0]
 800da86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da8a:	bd70      	pop	{r4, r5, r6, pc}
 800da8c:	08010e0e 	.word	0x08010e0e
 800da90:	08010e8e 	.word	0x08010e8e

0800da94 <__multadd>:
 800da94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da98:	690d      	ldr	r5, [r1, #16]
 800da9a:	4607      	mov	r7, r0
 800da9c:	460c      	mov	r4, r1
 800da9e:	461e      	mov	r6, r3
 800daa0:	f101 0c14 	add.w	ip, r1, #20
 800daa4:	2000      	movs	r0, #0
 800daa6:	f8dc 3000 	ldr.w	r3, [ip]
 800daaa:	b299      	uxth	r1, r3
 800daac:	fb02 6101 	mla	r1, r2, r1, r6
 800dab0:	0c1e      	lsrs	r6, r3, #16
 800dab2:	0c0b      	lsrs	r3, r1, #16
 800dab4:	fb02 3306 	mla	r3, r2, r6, r3
 800dab8:	b289      	uxth	r1, r1
 800daba:	3001      	adds	r0, #1
 800dabc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dac0:	4285      	cmp	r5, r0
 800dac2:	f84c 1b04 	str.w	r1, [ip], #4
 800dac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800daca:	dcec      	bgt.n	800daa6 <__multadd+0x12>
 800dacc:	b30e      	cbz	r6, 800db12 <__multadd+0x7e>
 800dace:	68a3      	ldr	r3, [r4, #8]
 800dad0:	42ab      	cmp	r3, r5
 800dad2:	dc19      	bgt.n	800db08 <__multadd+0x74>
 800dad4:	6861      	ldr	r1, [r4, #4]
 800dad6:	4638      	mov	r0, r7
 800dad8:	3101      	adds	r1, #1
 800dada:	f7ff ff79 	bl	800d9d0 <_Balloc>
 800dade:	4680      	mov	r8, r0
 800dae0:	b928      	cbnz	r0, 800daee <__multadd+0x5a>
 800dae2:	4602      	mov	r2, r0
 800dae4:	4b0c      	ldr	r3, [pc, #48]	@ (800db18 <__multadd+0x84>)
 800dae6:	480d      	ldr	r0, [pc, #52]	@ (800db1c <__multadd+0x88>)
 800dae8:	21ba      	movs	r1, #186	@ 0xba
 800daea:	f000 ff0b 	bl	800e904 <__assert_func>
 800daee:	6922      	ldr	r2, [r4, #16]
 800daf0:	3202      	adds	r2, #2
 800daf2:	f104 010c 	add.w	r1, r4, #12
 800daf6:	0092      	lsls	r2, r2, #2
 800daf8:	300c      	adds	r0, #12
 800dafa:	f7ff f802 	bl	800cb02 <memcpy>
 800dafe:	4621      	mov	r1, r4
 800db00:	4638      	mov	r0, r7
 800db02:	f7ff ffa5 	bl	800da50 <_Bfree>
 800db06:	4644      	mov	r4, r8
 800db08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db0c:	3501      	adds	r5, #1
 800db0e:	615e      	str	r6, [r3, #20]
 800db10:	6125      	str	r5, [r4, #16]
 800db12:	4620      	mov	r0, r4
 800db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db18:	08010e7d 	.word	0x08010e7d
 800db1c:	08010e8e 	.word	0x08010e8e

0800db20 <__hi0bits>:
 800db20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db24:	4603      	mov	r3, r0
 800db26:	bf36      	itet	cc
 800db28:	0403      	lslcc	r3, r0, #16
 800db2a:	2000      	movcs	r0, #0
 800db2c:	2010      	movcc	r0, #16
 800db2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db32:	bf3c      	itt	cc
 800db34:	021b      	lslcc	r3, r3, #8
 800db36:	3008      	addcc	r0, #8
 800db38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db3c:	bf3c      	itt	cc
 800db3e:	011b      	lslcc	r3, r3, #4
 800db40:	3004      	addcc	r0, #4
 800db42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db46:	bf3c      	itt	cc
 800db48:	009b      	lslcc	r3, r3, #2
 800db4a:	3002      	addcc	r0, #2
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	db05      	blt.n	800db5c <__hi0bits+0x3c>
 800db50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db54:	f100 0001 	add.w	r0, r0, #1
 800db58:	bf08      	it	eq
 800db5a:	2020      	moveq	r0, #32
 800db5c:	4770      	bx	lr

0800db5e <__lo0bits>:
 800db5e:	6803      	ldr	r3, [r0, #0]
 800db60:	4602      	mov	r2, r0
 800db62:	f013 0007 	ands.w	r0, r3, #7
 800db66:	d00b      	beq.n	800db80 <__lo0bits+0x22>
 800db68:	07d9      	lsls	r1, r3, #31
 800db6a:	d421      	bmi.n	800dbb0 <__lo0bits+0x52>
 800db6c:	0798      	lsls	r0, r3, #30
 800db6e:	bf49      	itett	mi
 800db70:	085b      	lsrmi	r3, r3, #1
 800db72:	089b      	lsrpl	r3, r3, #2
 800db74:	2001      	movmi	r0, #1
 800db76:	6013      	strmi	r3, [r2, #0]
 800db78:	bf5c      	itt	pl
 800db7a:	6013      	strpl	r3, [r2, #0]
 800db7c:	2002      	movpl	r0, #2
 800db7e:	4770      	bx	lr
 800db80:	b299      	uxth	r1, r3
 800db82:	b909      	cbnz	r1, 800db88 <__lo0bits+0x2a>
 800db84:	0c1b      	lsrs	r3, r3, #16
 800db86:	2010      	movs	r0, #16
 800db88:	b2d9      	uxtb	r1, r3
 800db8a:	b909      	cbnz	r1, 800db90 <__lo0bits+0x32>
 800db8c:	3008      	adds	r0, #8
 800db8e:	0a1b      	lsrs	r3, r3, #8
 800db90:	0719      	lsls	r1, r3, #28
 800db92:	bf04      	itt	eq
 800db94:	091b      	lsreq	r3, r3, #4
 800db96:	3004      	addeq	r0, #4
 800db98:	0799      	lsls	r1, r3, #30
 800db9a:	bf04      	itt	eq
 800db9c:	089b      	lsreq	r3, r3, #2
 800db9e:	3002      	addeq	r0, #2
 800dba0:	07d9      	lsls	r1, r3, #31
 800dba2:	d403      	bmi.n	800dbac <__lo0bits+0x4e>
 800dba4:	085b      	lsrs	r3, r3, #1
 800dba6:	f100 0001 	add.w	r0, r0, #1
 800dbaa:	d003      	beq.n	800dbb4 <__lo0bits+0x56>
 800dbac:	6013      	str	r3, [r2, #0]
 800dbae:	4770      	bx	lr
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	4770      	bx	lr
 800dbb4:	2020      	movs	r0, #32
 800dbb6:	4770      	bx	lr

0800dbb8 <__i2b>:
 800dbb8:	b510      	push	{r4, lr}
 800dbba:	460c      	mov	r4, r1
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	f7ff ff07 	bl	800d9d0 <_Balloc>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	b928      	cbnz	r0, 800dbd2 <__i2b+0x1a>
 800dbc6:	4b05      	ldr	r3, [pc, #20]	@ (800dbdc <__i2b+0x24>)
 800dbc8:	4805      	ldr	r0, [pc, #20]	@ (800dbe0 <__i2b+0x28>)
 800dbca:	f240 1145 	movw	r1, #325	@ 0x145
 800dbce:	f000 fe99 	bl	800e904 <__assert_func>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	6144      	str	r4, [r0, #20]
 800dbd6:	6103      	str	r3, [r0, #16]
 800dbd8:	bd10      	pop	{r4, pc}
 800dbda:	bf00      	nop
 800dbdc:	08010e7d 	.word	0x08010e7d
 800dbe0:	08010e8e 	.word	0x08010e8e

0800dbe4 <__multiply>:
 800dbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe8:	4617      	mov	r7, r2
 800dbea:	690a      	ldr	r2, [r1, #16]
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	bfa8      	it	ge
 800dbf2:	463b      	movge	r3, r7
 800dbf4:	4689      	mov	r9, r1
 800dbf6:	bfa4      	itt	ge
 800dbf8:	460f      	movge	r7, r1
 800dbfa:	4699      	movge	r9, r3
 800dbfc:	693d      	ldr	r5, [r7, #16]
 800dbfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	6879      	ldr	r1, [r7, #4]
 800dc06:	eb05 060a 	add.w	r6, r5, sl
 800dc0a:	42b3      	cmp	r3, r6
 800dc0c:	b085      	sub	sp, #20
 800dc0e:	bfb8      	it	lt
 800dc10:	3101      	addlt	r1, #1
 800dc12:	f7ff fedd 	bl	800d9d0 <_Balloc>
 800dc16:	b930      	cbnz	r0, 800dc26 <__multiply+0x42>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	4b41      	ldr	r3, [pc, #260]	@ (800dd20 <__multiply+0x13c>)
 800dc1c:	4841      	ldr	r0, [pc, #260]	@ (800dd24 <__multiply+0x140>)
 800dc1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc22:	f000 fe6f 	bl	800e904 <__assert_func>
 800dc26:	f100 0414 	add.w	r4, r0, #20
 800dc2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dc2e:	4623      	mov	r3, r4
 800dc30:	2200      	movs	r2, #0
 800dc32:	4573      	cmp	r3, lr
 800dc34:	d320      	bcc.n	800dc78 <__multiply+0x94>
 800dc36:	f107 0814 	add.w	r8, r7, #20
 800dc3a:	f109 0114 	add.w	r1, r9, #20
 800dc3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dc42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dc46:	9302      	str	r3, [sp, #8]
 800dc48:	1beb      	subs	r3, r5, r7
 800dc4a:	3b15      	subs	r3, #21
 800dc4c:	f023 0303 	bic.w	r3, r3, #3
 800dc50:	3304      	adds	r3, #4
 800dc52:	3715      	adds	r7, #21
 800dc54:	42bd      	cmp	r5, r7
 800dc56:	bf38      	it	cc
 800dc58:	2304      	movcc	r3, #4
 800dc5a:	9301      	str	r3, [sp, #4]
 800dc5c:	9b02      	ldr	r3, [sp, #8]
 800dc5e:	9103      	str	r1, [sp, #12]
 800dc60:	428b      	cmp	r3, r1
 800dc62:	d80c      	bhi.n	800dc7e <__multiply+0x9a>
 800dc64:	2e00      	cmp	r6, #0
 800dc66:	dd03      	ble.n	800dc70 <__multiply+0x8c>
 800dc68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d055      	beq.n	800dd1c <__multiply+0x138>
 800dc70:	6106      	str	r6, [r0, #16]
 800dc72:	b005      	add	sp, #20
 800dc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc78:	f843 2b04 	str.w	r2, [r3], #4
 800dc7c:	e7d9      	b.n	800dc32 <__multiply+0x4e>
 800dc7e:	f8b1 a000 	ldrh.w	sl, [r1]
 800dc82:	f1ba 0f00 	cmp.w	sl, #0
 800dc86:	d01f      	beq.n	800dcc8 <__multiply+0xe4>
 800dc88:	46c4      	mov	ip, r8
 800dc8a:	46a1      	mov	r9, r4
 800dc8c:	2700      	movs	r7, #0
 800dc8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dc92:	f8d9 3000 	ldr.w	r3, [r9]
 800dc96:	fa1f fb82 	uxth.w	fp, r2
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800dca0:	443b      	add	r3, r7
 800dca2:	f8d9 7000 	ldr.w	r7, [r9]
 800dca6:	0c12      	lsrs	r2, r2, #16
 800dca8:	0c3f      	lsrs	r7, r7, #16
 800dcaa:	fb0a 7202 	mla	r2, sl, r2, r7
 800dcae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcb8:	4565      	cmp	r5, ip
 800dcba:	f849 3b04 	str.w	r3, [r9], #4
 800dcbe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dcc2:	d8e4      	bhi.n	800dc8e <__multiply+0xaa>
 800dcc4:	9b01      	ldr	r3, [sp, #4]
 800dcc6:	50e7      	str	r7, [r4, r3]
 800dcc8:	9b03      	ldr	r3, [sp, #12]
 800dcca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dcce:	3104      	adds	r1, #4
 800dcd0:	f1b9 0f00 	cmp.w	r9, #0
 800dcd4:	d020      	beq.n	800dd18 <__multiply+0x134>
 800dcd6:	6823      	ldr	r3, [r4, #0]
 800dcd8:	4647      	mov	r7, r8
 800dcda:	46a4      	mov	ip, r4
 800dcdc:	f04f 0a00 	mov.w	sl, #0
 800dce0:	f8b7 b000 	ldrh.w	fp, [r7]
 800dce4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dce8:	fb09 220b 	mla	r2, r9, fp, r2
 800dcec:	4452      	add	r2, sl
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcf4:	f84c 3b04 	str.w	r3, [ip], #4
 800dcf8:	f857 3b04 	ldr.w	r3, [r7], #4
 800dcfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd00:	f8bc 3000 	ldrh.w	r3, [ip]
 800dd04:	fb09 330a 	mla	r3, r9, sl, r3
 800dd08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dd0c:	42bd      	cmp	r5, r7
 800dd0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd12:	d8e5      	bhi.n	800dce0 <__multiply+0xfc>
 800dd14:	9a01      	ldr	r2, [sp, #4]
 800dd16:	50a3      	str	r3, [r4, r2]
 800dd18:	3404      	adds	r4, #4
 800dd1a:	e79f      	b.n	800dc5c <__multiply+0x78>
 800dd1c:	3e01      	subs	r6, #1
 800dd1e:	e7a1      	b.n	800dc64 <__multiply+0x80>
 800dd20:	08010e7d 	.word	0x08010e7d
 800dd24:	08010e8e 	.word	0x08010e8e

0800dd28 <__pow5mult>:
 800dd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd2c:	4615      	mov	r5, r2
 800dd2e:	f012 0203 	ands.w	r2, r2, #3
 800dd32:	4607      	mov	r7, r0
 800dd34:	460e      	mov	r6, r1
 800dd36:	d007      	beq.n	800dd48 <__pow5mult+0x20>
 800dd38:	4c25      	ldr	r4, [pc, #148]	@ (800ddd0 <__pow5mult+0xa8>)
 800dd3a:	3a01      	subs	r2, #1
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd42:	f7ff fea7 	bl	800da94 <__multadd>
 800dd46:	4606      	mov	r6, r0
 800dd48:	10ad      	asrs	r5, r5, #2
 800dd4a:	d03d      	beq.n	800ddc8 <__pow5mult+0xa0>
 800dd4c:	69fc      	ldr	r4, [r7, #28]
 800dd4e:	b97c      	cbnz	r4, 800dd70 <__pow5mult+0x48>
 800dd50:	2010      	movs	r0, #16
 800dd52:	f7ff fd87 	bl	800d864 <malloc>
 800dd56:	4602      	mov	r2, r0
 800dd58:	61f8      	str	r0, [r7, #28]
 800dd5a:	b928      	cbnz	r0, 800dd68 <__pow5mult+0x40>
 800dd5c:	4b1d      	ldr	r3, [pc, #116]	@ (800ddd4 <__pow5mult+0xac>)
 800dd5e:	481e      	ldr	r0, [pc, #120]	@ (800ddd8 <__pow5mult+0xb0>)
 800dd60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dd64:	f000 fdce 	bl	800e904 <__assert_func>
 800dd68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd6c:	6004      	str	r4, [r0, #0]
 800dd6e:	60c4      	str	r4, [r0, #12]
 800dd70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dd74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd78:	b94c      	cbnz	r4, 800dd8e <__pow5mult+0x66>
 800dd7a:	f240 2171 	movw	r1, #625	@ 0x271
 800dd7e:	4638      	mov	r0, r7
 800dd80:	f7ff ff1a 	bl	800dbb8 <__i2b>
 800dd84:	2300      	movs	r3, #0
 800dd86:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	6003      	str	r3, [r0, #0]
 800dd8e:	f04f 0900 	mov.w	r9, #0
 800dd92:	07eb      	lsls	r3, r5, #31
 800dd94:	d50a      	bpl.n	800ddac <__pow5mult+0x84>
 800dd96:	4631      	mov	r1, r6
 800dd98:	4622      	mov	r2, r4
 800dd9a:	4638      	mov	r0, r7
 800dd9c:	f7ff ff22 	bl	800dbe4 <__multiply>
 800dda0:	4631      	mov	r1, r6
 800dda2:	4680      	mov	r8, r0
 800dda4:	4638      	mov	r0, r7
 800dda6:	f7ff fe53 	bl	800da50 <_Bfree>
 800ddaa:	4646      	mov	r6, r8
 800ddac:	106d      	asrs	r5, r5, #1
 800ddae:	d00b      	beq.n	800ddc8 <__pow5mult+0xa0>
 800ddb0:	6820      	ldr	r0, [r4, #0]
 800ddb2:	b938      	cbnz	r0, 800ddc4 <__pow5mult+0x9c>
 800ddb4:	4622      	mov	r2, r4
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	4638      	mov	r0, r7
 800ddba:	f7ff ff13 	bl	800dbe4 <__multiply>
 800ddbe:	6020      	str	r0, [r4, #0]
 800ddc0:	f8c0 9000 	str.w	r9, [r0]
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	e7e4      	b.n	800dd92 <__pow5mult+0x6a>
 800ddc8:	4630      	mov	r0, r6
 800ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddce:	bf00      	nop
 800ddd0:	08010f40 	.word	0x08010f40
 800ddd4:	08010e0e 	.word	0x08010e0e
 800ddd8:	08010e8e 	.word	0x08010e8e

0800dddc <__lshift>:
 800dddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dde0:	460c      	mov	r4, r1
 800dde2:	6849      	ldr	r1, [r1, #4]
 800dde4:	6923      	ldr	r3, [r4, #16]
 800dde6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ddea:	68a3      	ldr	r3, [r4, #8]
 800ddec:	4607      	mov	r7, r0
 800ddee:	4691      	mov	r9, r2
 800ddf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ddf4:	f108 0601 	add.w	r6, r8, #1
 800ddf8:	42b3      	cmp	r3, r6
 800ddfa:	db0b      	blt.n	800de14 <__lshift+0x38>
 800ddfc:	4638      	mov	r0, r7
 800ddfe:	f7ff fde7 	bl	800d9d0 <_Balloc>
 800de02:	4605      	mov	r5, r0
 800de04:	b948      	cbnz	r0, 800de1a <__lshift+0x3e>
 800de06:	4602      	mov	r2, r0
 800de08:	4b28      	ldr	r3, [pc, #160]	@ (800deac <__lshift+0xd0>)
 800de0a:	4829      	ldr	r0, [pc, #164]	@ (800deb0 <__lshift+0xd4>)
 800de0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de10:	f000 fd78 	bl	800e904 <__assert_func>
 800de14:	3101      	adds	r1, #1
 800de16:	005b      	lsls	r3, r3, #1
 800de18:	e7ee      	b.n	800ddf8 <__lshift+0x1c>
 800de1a:	2300      	movs	r3, #0
 800de1c:	f100 0114 	add.w	r1, r0, #20
 800de20:	f100 0210 	add.w	r2, r0, #16
 800de24:	4618      	mov	r0, r3
 800de26:	4553      	cmp	r3, sl
 800de28:	db33      	blt.n	800de92 <__lshift+0xb6>
 800de2a:	6920      	ldr	r0, [r4, #16]
 800de2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de30:	f104 0314 	add.w	r3, r4, #20
 800de34:	f019 091f 	ands.w	r9, r9, #31
 800de38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de40:	d02b      	beq.n	800de9a <__lshift+0xbe>
 800de42:	f1c9 0e20 	rsb	lr, r9, #32
 800de46:	468a      	mov	sl, r1
 800de48:	2200      	movs	r2, #0
 800de4a:	6818      	ldr	r0, [r3, #0]
 800de4c:	fa00 f009 	lsl.w	r0, r0, r9
 800de50:	4310      	orrs	r0, r2
 800de52:	f84a 0b04 	str.w	r0, [sl], #4
 800de56:	f853 2b04 	ldr.w	r2, [r3], #4
 800de5a:	459c      	cmp	ip, r3
 800de5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800de60:	d8f3      	bhi.n	800de4a <__lshift+0x6e>
 800de62:	ebac 0304 	sub.w	r3, ip, r4
 800de66:	3b15      	subs	r3, #21
 800de68:	f023 0303 	bic.w	r3, r3, #3
 800de6c:	3304      	adds	r3, #4
 800de6e:	f104 0015 	add.w	r0, r4, #21
 800de72:	4560      	cmp	r0, ip
 800de74:	bf88      	it	hi
 800de76:	2304      	movhi	r3, #4
 800de78:	50ca      	str	r2, [r1, r3]
 800de7a:	b10a      	cbz	r2, 800de80 <__lshift+0xa4>
 800de7c:	f108 0602 	add.w	r6, r8, #2
 800de80:	3e01      	subs	r6, #1
 800de82:	4638      	mov	r0, r7
 800de84:	612e      	str	r6, [r5, #16]
 800de86:	4621      	mov	r1, r4
 800de88:	f7ff fde2 	bl	800da50 <_Bfree>
 800de8c:	4628      	mov	r0, r5
 800de8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de92:	f842 0f04 	str.w	r0, [r2, #4]!
 800de96:	3301      	adds	r3, #1
 800de98:	e7c5      	b.n	800de26 <__lshift+0x4a>
 800de9a:	3904      	subs	r1, #4
 800de9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dea0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dea4:	459c      	cmp	ip, r3
 800dea6:	d8f9      	bhi.n	800de9c <__lshift+0xc0>
 800dea8:	e7ea      	b.n	800de80 <__lshift+0xa4>
 800deaa:	bf00      	nop
 800deac:	08010e7d 	.word	0x08010e7d
 800deb0:	08010e8e 	.word	0x08010e8e

0800deb4 <__mcmp>:
 800deb4:	690a      	ldr	r2, [r1, #16]
 800deb6:	4603      	mov	r3, r0
 800deb8:	6900      	ldr	r0, [r0, #16]
 800deba:	1a80      	subs	r0, r0, r2
 800debc:	b530      	push	{r4, r5, lr}
 800debe:	d10e      	bne.n	800dede <__mcmp+0x2a>
 800dec0:	3314      	adds	r3, #20
 800dec2:	3114      	adds	r1, #20
 800dec4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dec8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800decc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ded0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ded4:	4295      	cmp	r5, r2
 800ded6:	d003      	beq.n	800dee0 <__mcmp+0x2c>
 800ded8:	d205      	bcs.n	800dee6 <__mcmp+0x32>
 800deda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dede:	bd30      	pop	{r4, r5, pc}
 800dee0:	42a3      	cmp	r3, r4
 800dee2:	d3f3      	bcc.n	800decc <__mcmp+0x18>
 800dee4:	e7fb      	b.n	800dede <__mcmp+0x2a>
 800dee6:	2001      	movs	r0, #1
 800dee8:	e7f9      	b.n	800dede <__mcmp+0x2a>
	...

0800deec <__mdiff>:
 800deec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def0:	4689      	mov	r9, r1
 800def2:	4606      	mov	r6, r0
 800def4:	4611      	mov	r1, r2
 800def6:	4648      	mov	r0, r9
 800def8:	4614      	mov	r4, r2
 800defa:	f7ff ffdb 	bl	800deb4 <__mcmp>
 800defe:	1e05      	subs	r5, r0, #0
 800df00:	d112      	bne.n	800df28 <__mdiff+0x3c>
 800df02:	4629      	mov	r1, r5
 800df04:	4630      	mov	r0, r6
 800df06:	f7ff fd63 	bl	800d9d0 <_Balloc>
 800df0a:	4602      	mov	r2, r0
 800df0c:	b928      	cbnz	r0, 800df1a <__mdiff+0x2e>
 800df0e:	4b3e      	ldr	r3, [pc, #248]	@ (800e008 <__mdiff+0x11c>)
 800df10:	f240 2137 	movw	r1, #567	@ 0x237
 800df14:	483d      	ldr	r0, [pc, #244]	@ (800e00c <__mdiff+0x120>)
 800df16:	f000 fcf5 	bl	800e904 <__assert_func>
 800df1a:	2301      	movs	r3, #1
 800df1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df20:	4610      	mov	r0, r2
 800df22:	b003      	add	sp, #12
 800df24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df28:	bfbc      	itt	lt
 800df2a:	464b      	movlt	r3, r9
 800df2c:	46a1      	movlt	r9, r4
 800df2e:	4630      	mov	r0, r6
 800df30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df34:	bfba      	itte	lt
 800df36:	461c      	movlt	r4, r3
 800df38:	2501      	movlt	r5, #1
 800df3a:	2500      	movge	r5, #0
 800df3c:	f7ff fd48 	bl	800d9d0 <_Balloc>
 800df40:	4602      	mov	r2, r0
 800df42:	b918      	cbnz	r0, 800df4c <__mdiff+0x60>
 800df44:	4b30      	ldr	r3, [pc, #192]	@ (800e008 <__mdiff+0x11c>)
 800df46:	f240 2145 	movw	r1, #581	@ 0x245
 800df4a:	e7e3      	b.n	800df14 <__mdiff+0x28>
 800df4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df50:	6926      	ldr	r6, [r4, #16]
 800df52:	60c5      	str	r5, [r0, #12]
 800df54:	f109 0310 	add.w	r3, r9, #16
 800df58:	f109 0514 	add.w	r5, r9, #20
 800df5c:	f104 0e14 	add.w	lr, r4, #20
 800df60:	f100 0b14 	add.w	fp, r0, #20
 800df64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800df68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800df6c:	9301      	str	r3, [sp, #4]
 800df6e:	46d9      	mov	r9, fp
 800df70:	f04f 0c00 	mov.w	ip, #0
 800df74:	9b01      	ldr	r3, [sp, #4]
 800df76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800df7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800df7e:	9301      	str	r3, [sp, #4]
 800df80:	b281      	uxth	r1, r0
 800df82:	fa1f f38a 	uxth.w	r3, sl
 800df86:	1a5b      	subs	r3, r3, r1
 800df88:	0c00      	lsrs	r0, r0, #16
 800df8a:	4463      	add	r3, ip
 800df8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800df90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800df94:	b29b      	uxth	r3, r3
 800df96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800df9a:	4576      	cmp	r6, lr
 800df9c:	f849 3b04 	str.w	r3, [r9], #4
 800dfa0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfa4:	d8e6      	bhi.n	800df74 <__mdiff+0x88>
 800dfa6:	1b33      	subs	r3, r6, r4
 800dfa8:	3b15      	subs	r3, #21
 800dfaa:	f023 0303 	bic.w	r3, r3, #3
 800dfae:	3415      	adds	r4, #21
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	42a6      	cmp	r6, r4
 800dfb4:	bf38      	it	cc
 800dfb6:	2304      	movcc	r3, #4
 800dfb8:	441d      	add	r5, r3
 800dfba:	445b      	add	r3, fp
 800dfbc:	461e      	mov	r6, r3
 800dfbe:	462c      	mov	r4, r5
 800dfc0:	4544      	cmp	r4, r8
 800dfc2:	d30e      	bcc.n	800dfe2 <__mdiff+0xf6>
 800dfc4:	f108 0103 	add.w	r1, r8, #3
 800dfc8:	1b49      	subs	r1, r1, r5
 800dfca:	f021 0103 	bic.w	r1, r1, #3
 800dfce:	3d03      	subs	r5, #3
 800dfd0:	45a8      	cmp	r8, r5
 800dfd2:	bf38      	it	cc
 800dfd4:	2100      	movcc	r1, #0
 800dfd6:	440b      	add	r3, r1
 800dfd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dfdc:	b191      	cbz	r1, 800e004 <__mdiff+0x118>
 800dfde:	6117      	str	r7, [r2, #16]
 800dfe0:	e79e      	b.n	800df20 <__mdiff+0x34>
 800dfe2:	f854 1b04 	ldr.w	r1, [r4], #4
 800dfe6:	46e6      	mov	lr, ip
 800dfe8:	0c08      	lsrs	r0, r1, #16
 800dfea:	fa1c fc81 	uxtah	ip, ip, r1
 800dfee:	4471      	add	r1, lr
 800dff0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dff4:	b289      	uxth	r1, r1
 800dff6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dffa:	f846 1b04 	str.w	r1, [r6], #4
 800dffe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e002:	e7dd      	b.n	800dfc0 <__mdiff+0xd4>
 800e004:	3f01      	subs	r7, #1
 800e006:	e7e7      	b.n	800dfd8 <__mdiff+0xec>
 800e008:	08010e7d 	.word	0x08010e7d
 800e00c:	08010e8e 	.word	0x08010e8e

0800e010 <__d2b>:
 800e010:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800e014:	2101      	movs	r1, #1
 800e016:	9e08      	ldr	r6, [sp, #32]
 800e018:	4690      	mov	r8, r2
 800e01a:	4699      	mov	r9, r3
 800e01c:	f7ff fcd8 	bl	800d9d0 <_Balloc>
 800e020:	4604      	mov	r4, r0
 800e022:	b930      	cbnz	r0, 800e032 <__d2b+0x22>
 800e024:	4602      	mov	r2, r0
 800e026:	4b24      	ldr	r3, [pc, #144]	@ (800e0b8 <__d2b+0xa8>)
 800e028:	4824      	ldr	r0, [pc, #144]	@ (800e0bc <__d2b+0xac>)
 800e02a:	f240 310f 	movw	r1, #783	@ 0x30f
 800e02e:	f000 fc69 	bl	800e904 <__assert_func>
 800e032:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e036:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e03a:	b10d      	cbz	r5, 800e040 <__d2b+0x30>
 800e03c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e040:	9301      	str	r3, [sp, #4]
 800e042:	f1b8 0300 	subs.w	r3, r8, #0
 800e046:	d024      	beq.n	800e092 <__d2b+0x82>
 800e048:	4668      	mov	r0, sp
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	f7ff fd87 	bl	800db5e <__lo0bits>
 800e050:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e054:	b1d8      	cbz	r0, 800e08e <__d2b+0x7e>
 800e056:	f1c0 0320 	rsb	r3, r0, #32
 800e05a:	fa02 f303 	lsl.w	r3, r2, r3
 800e05e:	430b      	orrs	r3, r1
 800e060:	40c2      	lsrs	r2, r0
 800e062:	6163      	str	r3, [r4, #20]
 800e064:	9201      	str	r2, [sp, #4]
 800e066:	9b01      	ldr	r3, [sp, #4]
 800e068:	61a3      	str	r3, [r4, #24]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	bf0c      	ite	eq
 800e06e:	2201      	moveq	r2, #1
 800e070:	2202      	movne	r2, #2
 800e072:	6122      	str	r2, [r4, #16]
 800e074:	b1ad      	cbz	r5, 800e0a2 <__d2b+0x92>
 800e076:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e07a:	4405      	add	r5, r0
 800e07c:	6035      	str	r5, [r6, #0]
 800e07e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e084:	6018      	str	r0, [r3, #0]
 800e086:	4620      	mov	r0, r4
 800e088:	b002      	add	sp, #8
 800e08a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e08e:	6161      	str	r1, [r4, #20]
 800e090:	e7e9      	b.n	800e066 <__d2b+0x56>
 800e092:	a801      	add	r0, sp, #4
 800e094:	f7ff fd63 	bl	800db5e <__lo0bits>
 800e098:	9b01      	ldr	r3, [sp, #4]
 800e09a:	6163      	str	r3, [r4, #20]
 800e09c:	3020      	adds	r0, #32
 800e09e:	2201      	movs	r2, #1
 800e0a0:	e7e7      	b.n	800e072 <__d2b+0x62>
 800e0a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e0aa:	6030      	str	r0, [r6, #0]
 800e0ac:	6918      	ldr	r0, [r3, #16]
 800e0ae:	f7ff fd37 	bl	800db20 <__hi0bits>
 800e0b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0b6:	e7e4      	b.n	800e082 <__d2b+0x72>
 800e0b8:	08010e7d 	.word	0x08010e7d
 800e0bc:	08010e8e 	.word	0x08010e8e

0800e0c0 <__ssputs_r>:
 800e0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c4:	688e      	ldr	r6, [r1, #8]
 800e0c6:	461f      	mov	r7, r3
 800e0c8:	42be      	cmp	r6, r7
 800e0ca:	680b      	ldr	r3, [r1, #0]
 800e0cc:	4682      	mov	sl, r0
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	4690      	mov	r8, r2
 800e0d2:	d82d      	bhi.n	800e130 <__ssputs_r+0x70>
 800e0d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0dc:	d026      	beq.n	800e12c <__ssputs_r+0x6c>
 800e0de:	6965      	ldr	r5, [r4, #20]
 800e0e0:	6909      	ldr	r1, [r1, #16]
 800e0e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0e6:	eba3 0901 	sub.w	r9, r3, r1
 800e0ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0ee:	1c7b      	adds	r3, r7, #1
 800e0f0:	444b      	add	r3, r9
 800e0f2:	106d      	asrs	r5, r5, #1
 800e0f4:	429d      	cmp	r5, r3
 800e0f6:	bf38      	it	cc
 800e0f8:	461d      	movcc	r5, r3
 800e0fa:	0553      	lsls	r3, r2, #21
 800e0fc:	d527      	bpl.n	800e14e <__ssputs_r+0x8e>
 800e0fe:	4629      	mov	r1, r5
 800e100:	f7ff fbda 	bl	800d8b8 <_malloc_r>
 800e104:	4606      	mov	r6, r0
 800e106:	b360      	cbz	r0, 800e162 <__ssputs_r+0xa2>
 800e108:	6921      	ldr	r1, [r4, #16]
 800e10a:	464a      	mov	r2, r9
 800e10c:	f7fe fcf9 	bl	800cb02 <memcpy>
 800e110:	89a3      	ldrh	r3, [r4, #12]
 800e112:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e11a:	81a3      	strh	r3, [r4, #12]
 800e11c:	6126      	str	r6, [r4, #16]
 800e11e:	6165      	str	r5, [r4, #20]
 800e120:	444e      	add	r6, r9
 800e122:	eba5 0509 	sub.w	r5, r5, r9
 800e126:	6026      	str	r6, [r4, #0]
 800e128:	60a5      	str	r5, [r4, #8]
 800e12a:	463e      	mov	r6, r7
 800e12c:	42be      	cmp	r6, r7
 800e12e:	d900      	bls.n	800e132 <__ssputs_r+0x72>
 800e130:	463e      	mov	r6, r7
 800e132:	6820      	ldr	r0, [r4, #0]
 800e134:	4632      	mov	r2, r6
 800e136:	4641      	mov	r1, r8
 800e138:	f000 fb98 	bl	800e86c <memmove>
 800e13c:	68a3      	ldr	r3, [r4, #8]
 800e13e:	1b9b      	subs	r3, r3, r6
 800e140:	60a3      	str	r3, [r4, #8]
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	4433      	add	r3, r6
 800e146:	6023      	str	r3, [r4, #0]
 800e148:	2000      	movs	r0, #0
 800e14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e14e:	462a      	mov	r2, r5
 800e150:	f000 fc1c 	bl	800e98c <_realloc_r>
 800e154:	4606      	mov	r6, r0
 800e156:	2800      	cmp	r0, #0
 800e158:	d1e0      	bne.n	800e11c <__ssputs_r+0x5c>
 800e15a:	6921      	ldr	r1, [r4, #16]
 800e15c:	4650      	mov	r0, sl
 800e15e:	f7ff fb37 	bl	800d7d0 <_free_r>
 800e162:	230c      	movs	r3, #12
 800e164:	f8ca 3000 	str.w	r3, [sl]
 800e168:	89a3      	ldrh	r3, [r4, #12]
 800e16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e16e:	81a3      	strh	r3, [r4, #12]
 800e170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e174:	e7e9      	b.n	800e14a <__ssputs_r+0x8a>
	...

0800e178 <_svfiprintf_r>:
 800e178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17c:	4698      	mov	r8, r3
 800e17e:	898b      	ldrh	r3, [r1, #12]
 800e180:	061b      	lsls	r3, r3, #24
 800e182:	b09d      	sub	sp, #116	@ 0x74
 800e184:	4607      	mov	r7, r0
 800e186:	460d      	mov	r5, r1
 800e188:	4614      	mov	r4, r2
 800e18a:	d510      	bpl.n	800e1ae <_svfiprintf_r+0x36>
 800e18c:	690b      	ldr	r3, [r1, #16]
 800e18e:	b973      	cbnz	r3, 800e1ae <_svfiprintf_r+0x36>
 800e190:	2140      	movs	r1, #64	@ 0x40
 800e192:	f7ff fb91 	bl	800d8b8 <_malloc_r>
 800e196:	6028      	str	r0, [r5, #0]
 800e198:	6128      	str	r0, [r5, #16]
 800e19a:	b930      	cbnz	r0, 800e1aa <_svfiprintf_r+0x32>
 800e19c:	230c      	movs	r3, #12
 800e19e:	603b      	str	r3, [r7, #0]
 800e1a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1a4:	b01d      	add	sp, #116	@ 0x74
 800e1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1aa:	2340      	movs	r3, #64	@ 0x40
 800e1ac:	616b      	str	r3, [r5, #20]
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1b2:	2320      	movs	r3, #32
 800e1b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1bc:	2330      	movs	r3, #48	@ 0x30
 800e1be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e35c <_svfiprintf_r+0x1e4>
 800e1c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1c6:	f04f 0901 	mov.w	r9, #1
 800e1ca:	4623      	mov	r3, r4
 800e1cc:	469a      	mov	sl, r3
 800e1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1d2:	b10a      	cbz	r2, 800e1d8 <_svfiprintf_r+0x60>
 800e1d4:	2a25      	cmp	r2, #37	@ 0x25
 800e1d6:	d1f9      	bne.n	800e1cc <_svfiprintf_r+0x54>
 800e1d8:	ebba 0b04 	subs.w	fp, sl, r4
 800e1dc:	d00b      	beq.n	800e1f6 <_svfiprintf_r+0x7e>
 800e1de:	465b      	mov	r3, fp
 800e1e0:	4622      	mov	r2, r4
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	4638      	mov	r0, r7
 800e1e6:	f7ff ff6b 	bl	800e0c0 <__ssputs_r>
 800e1ea:	3001      	adds	r0, #1
 800e1ec:	f000 80a7 	beq.w	800e33e <_svfiprintf_r+0x1c6>
 800e1f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1f2:	445a      	add	r2, fp
 800e1f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	f000 809f 	beq.w	800e33e <_svfiprintf_r+0x1c6>
 800e200:	2300      	movs	r3, #0
 800e202:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e20a:	f10a 0a01 	add.w	sl, sl, #1
 800e20e:	9304      	str	r3, [sp, #16]
 800e210:	9307      	str	r3, [sp, #28]
 800e212:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e216:	931a      	str	r3, [sp, #104]	@ 0x68
 800e218:	4654      	mov	r4, sl
 800e21a:	2205      	movs	r2, #5
 800e21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e220:	484e      	ldr	r0, [pc, #312]	@ (800e35c <_svfiprintf_r+0x1e4>)
 800e222:	f7f1 ffad 	bl	8000180 <memchr>
 800e226:	9a04      	ldr	r2, [sp, #16]
 800e228:	b9d8      	cbnz	r0, 800e262 <_svfiprintf_r+0xea>
 800e22a:	06d0      	lsls	r0, r2, #27
 800e22c:	bf44      	itt	mi
 800e22e:	2320      	movmi	r3, #32
 800e230:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e234:	0711      	lsls	r1, r2, #28
 800e236:	bf44      	itt	mi
 800e238:	232b      	movmi	r3, #43	@ 0x2b
 800e23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e23e:	f89a 3000 	ldrb.w	r3, [sl]
 800e242:	2b2a      	cmp	r3, #42	@ 0x2a
 800e244:	d015      	beq.n	800e272 <_svfiprintf_r+0xfa>
 800e246:	9a07      	ldr	r2, [sp, #28]
 800e248:	4654      	mov	r4, sl
 800e24a:	2000      	movs	r0, #0
 800e24c:	f04f 0c0a 	mov.w	ip, #10
 800e250:	4621      	mov	r1, r4
 800e252:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e256:	3b30      	subs	r3, #48	@ 0x30
 800e258:	2b09      	cmp	r3, #9
 800e25a:	d94b      	bls.n	800e2f4 <_svfiprintf_r+0x17c>
 800e25c:	b1b0      	cbz	r0, 800e28c <_svfiprintf_r+0x114>
 800e25e:	9207      	str	r2, [sp, #28]
 800e260:	e014      	b.n	800e28c <_svfiprintf_r+0x114>
 800e262:	eba0 0308 	sub.w	r3, r0, r8
 800e266:	fa09 f303 	lsl.w	r3, r9, r3
 800e26a:	4313      	orrs	r3, r2
 800e26c:	9304      	str	r3, [sp, #16]
 800e26e:	46a2      	mov	sl, r4
 800e270:	e7d2      	b.n	800e218 <_svfiprintf_r+0xa0>
 800e272:	9b03      	ldr	r3, [sp, #12]
 800e274:	1d19      	adds	r1, r3, #4
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	9103      	str	r1, [sp, #12]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	bfbb      	ittet	lt
 800e27e:	425b      	neglt	r3, r3
 800e280:	f042 0202 	orrlt.w	r2, r2, #2
 800e284:	9307      	strge	r3, [sp, #28]
 800e286:	9307      	strlt	r3, [sp, #28]
 800e288:	bfb8      	it	lt
 800e28a:	9204      	strlt	r2, [sp, #16]
 800e28c:	7823      	ldrb	r3, [r4, #0]
 800e28e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e290:	d10a      	bne.n	800e2a8 <_svfiprintf_r+0x130>
 800e292:	7863      	ldrb	r3, [r4, #1]
 800e294:	2b2a      	cmp	r3, #42	@ 0x2a
 800e296:	d132      	bne.n	800e2fe <_svfiprintf_r+0x186>
 800e298:	9b03      	ldr	r3, [sp, #12]
 800e29a:	1d1a      	adds	r2, r3, #4
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	9203      	str	r2, [sp, #12]
 800e2a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2a4:	3402      	adds	r4, #2
 800e2a6:	9305      	str	r3, [sp, #20]
 800e2a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e360 <_svfiprintf_r+0x1e8>
 800e2ac:	7821      	ldrb	r1, [r4, #0]
 800e2ae:	2203      	movs	r2, #3
 800e2b0:	4650      	mov	r0, sl
 800e2b2:	f7f1 ff65 	bl	8000180 <memchr>
 800e2b6:	b138      	cbz	r0, 800e2c8 <_svfiprintf_r+0x150>
 800e2b8:	9b04      	ldr	r3, [sp, #16]
 800e2ba:	eba0 000a 	sub.w	r0, r0, sl
 800e2be:	2240      	movs	r2, #64	@ 0x40
 800e2c0:	4082      	lsls	r2, r0
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	3401      	adds	r4, #1
 800e2c6:	9304      	str	r3, [sp, #16]
 800e2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2cc:	4825      	ldr	r0, [pc, #148]	@ (800e364 <_svfiprintf_r+0x1ec>)
 800e2ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2d2:	2206      	movs	r2, #6
 800e2d4:	f7f1 ff54 	bl	8000180 <memchr>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d036      	beq.n	800e34a <_svfiprintf_r+0x1d2>
 800e2dc:	4b22      	ldr	r3, [pc, #136]	@ (800e368 <_svfiprintf_r+0x1f0>)
 800e2de:	bb1b      	cbnz	r3, 800e328 <_svfiprintf_r+0x1b0>
 800e2e0:	9b03      	ldr	r3, [sp, #12]
 800e2e2:	3307      	adds	r3, #7
 800e2e4:	f023 0307 	bic.w	r3, r3, #7
 800e2e8:	3308      	adds	r3, #8
 800e2ea:	9303      	str	r3, [sp, #12]
 800e2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ee:	4433      	add	r3, r6
 800e2f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2f2:	e76a      	b.n	800e1ca <_svfiprintf_r+0x52>
 800e2f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2f8:	460c      	mov	r4, r1
 800e2fa:	2001      	movs	r0, #1
 800e2fc:	e7a8      	b.n	800e250 <_svfiprintf_r+0xd8>
 800e2fe:	2300      	movs	r3, #0
 800e300:	3401      	adds	r4, #1
 800e302:	9305      	str	r3, [sp, #20]
 800e304:	4619      	mov	r1, r3
 800e306:	f04f 0c0a 	mov.w	ip, #10
 800e30a:	4620      	mov	r0, r4
 800e30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e310:	3a30      	subs	r2, #48	@ 0x30
 800e312:	2a09      	cmp	r2, #9
 800e314:	d903      	bls.n	800e31e <_svfiprintf_r+0x1a6>
 800e316:	2b00      	cmp	r3, #0
 800e318:	d0c6      	beq.n	800e2a8 <_svfiprintf_r+0x130>
 800e31a:	9105      	str	r1, [sp, #20]
 800e31c:	e7c4      	b.n	800e2a8 <_svfiprintf_r+0x130>
 800e31e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e322:	4604      	mov	r4, r0
 800e324:	2301      	movs	r3, #1
 800e326:	e7f0      	b.n	800e30a <_svfiprintf_r+0x192>
 800e328:	ab03      	add	r3, sp, #12
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	462a      	mov	r2, r5
 800e32e:	4b0f      	ldr	r3, [pc, #60]	@ (800e36c <_svfiprintf_r+0x1f4>)
 800e330:	a904      	add	r1, sp, #16
 800e332:	4638      	mov	r0, r7
 800e334:	f7fd fcf8 	bl	800bd28 <_printf_float>
 800e338:	1c42      	adds	r2, r0, #1
 800e33a:	4606      	mov	r6, r0
 800e33c:	d1d6      	bne.n	800e2ec <_svfiprintf_r+0x174>
 800e33e:	89ab      	ldrh	r3, [r5, #12]
 800e340:	065b      	lsls	r3, r3, #25
 800e342:	f53f af2d 	bmi.w	800e1a0 <_svfiprintf_r+0x28>
 800e346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e348:	e72c      	b.n	800e1a4 <_svfiprintf_r+0x2c>
 800e34a:	ab03      	add	r3, sp, #12
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	462a      	mov	r2, r5
 800e350:	4b06      	ldr	r3, [pc, #24]	@ (800e36c <_svfiprintf_r+0x1f4>)
 800e352:	a904      	add	r1, sp, #16
 800e354:	4638      	mov	r0, r7
 800e356:	f7fd ff81 	bl	800c25c <_printf_i>
 800e35a:	e7ed      	b.n	800e338 <_svfiprintf_r+0x1c0>
 800e35c:	08010ee7 	.word	0x08010ee7
 800e360:	08010eed 	.word	0x08010eed
 800e364:	08010ef1 	.word	0x08010ef1
 800e368:	0800bd29 	.word	0x0800bd29
 800e36c:	0800e0c1 	.word	0x0800e0c1

0800e370 <__sfputc_r>:
 800e370:	6893      	ldr	r3, [r2, #8]
 800e372:	3b01      	subs	r3, #1
 800e374:	2b00      	cmp	r3, #0
 800e376:	b410      	push	{r4}
 800e378:	6093      	str	r3, [r2, #8]
 800e37a:	da07      	bge.n	800e38c <__sfputc_r+0x1c>
 800e37c:	6994      	ldr	r4, [r2, #24]
 800e37e:	42a3      	cmp	r3, r4
 800e380:	db01      	blt.n	800e386 <__sfputc_r+0x16>
 800e382:	290a      	cmp	r1, #10
 800e384:	d102      	bne.n	800e38c <__sfputc_r+0x1c>
 800e386:	bc10      	pop	{r4}
 800e388:	f7fe ba5b 	b.w	800c842 <__swbuf_r>
 800e38c:	6813      	ldr	r3, [r2, #0]
 800e38e:	1c58      	adds	r0, r3, #1
 800e390:	6010      	str	r0, [r2, #0]
 800e392:	7019      	strb	r1, [r3, #0]
 800e394:	4608      	mov	r0, r1
 800e396:	bc10      	pop	{r4}
 800e398:	4770      	bx	lr

0800e39a <__sfputs_r>:
 800e39a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39c:	4606      	mov	r6, r0
 800e39e:	460f      	mov	r7, r1
 800e3a0:	4614      	mov	r4, r2
 800e3a2:	18d5      	adds	r5, r2, r3
 800e3a4:	42ac      	cmp	r4, r5
 800e3a6:	d101      	bne.n	800e3ac <__sfputs_r+0x12>
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	e007      	b.n	800e3bc <__sfputs_r+0x22>
 800e3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b0:	463a      	mov	r2, r7
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7ff ffdc 	bl	800e370 <__sfputc_r>
 800e3b8:	1c43      	adds	r3, r0, #1
 800e3ba:	d1f3      	bne.n	800e3a4 <__sfputs_r+0xa>
 800e3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3c0 <_vfiprintf_r>:
 800e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c4:	460d      	mov	r5, r1
 800e3c6:	b09d      	sub	sp, #116	@ 0x74
 800e3c8:	4614      	mov	r4, r2
 800e3ca:	4698      	mov	r8, r3
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	b118      	cbz	r0, 800e3d8 <_vfiprintf_r+0x18>
 800e3d0:	6a03      	ldr	r3, [r0, #32]
 800e3d2:	b90b      	cbnz	r3, 800e3d8 <_vfiprintf_r+0x18>
 800e3d4:	f7fe f8ec 	bl	800c5b0 <__sinit>
 800e3d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3da:	07d9      	lsls	r1, r3, #31
 800e3dc:	d405      	bmi.n	800e3ea <_vfiprintf_r+0x2a>
 800e3de:	89ab      	ldrh	r3, [r5, #12]
 800e3e0:	059a      	lsls	r2, r3, #22
 800e3e2:	d402      	bmi.n	800e3ea <_vfiprintf_r+0x2a>
 800e3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3e6:	f7fe fb8a 	bl	800cafe <__retarget_lock_acquire_recursive>
 800e3ea:	89ab      	ldrh	r3, [r5, #12]
 800e3ec:	071b      	lsls	r3, r3, #28
 800e3ee:	d501      	bpl.n	800e3f4 <_vfiprintf_r+0x34>
 800e3f0:	692b      	ldr	r3, [r5, #16]
 800e3f2:	b99b      	cbnz	r3, 800e41c <_vfiprintf_r+0x5c>
 800e3f4:	4629      	mov	r1, r5
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	f7fe fa62 	bl	800c8c0 <__swsetup_r>
 800e3fc:	b170      	cbz	r0, 800e41c <_vfiprintf_r+0x5c>
 800e3fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e400:	07dc      	lsls	r4, r3, #31
 800e402:	d504      	bpl.n	800e40e <_vfiprintf_r+0x4e>
 800e404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e408:	b01d      	add	sp, #116	@ 0x74
 800e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40e:	89ab      	ldrh	r3, [r5, #12]
 800e410:	0598      	lsls	r0, r3, #22
 800e412:	d4f7      	bmi.n	800e404 <_vfiprintf_r+0x44>
 800e414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e416:	f7fe fb73 	bl	800cb00 <__retarget_lock_release_recursive>
 800e41a:	e7f3      	b.n	800e404 <_vfiprintf_r+0x44>
 800e41c:	2300      	movs	r3, #0
 800e41e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e420:	2320      	movs	r3, #32
 800e422:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e426:	f8cd 800c 	str.w	r8, [sp, #12]
 800e42a:	2330      	movs	r3, #48	@ 0x30
 800e42c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5dc <_vfiprintf_r+0x21c>
 800e430:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e434:	f04f 0901 	mov.w	r9, #1
 800e438:	4623      	mov	r3, r4
 800e43a:	469a      	mov	sl, r3
 800e43c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e440:	b10a      	cbz	r2, 800e446 <_vfiprintf_r+0x86>
 800e442:	2a25      	cmp	r2, #37	@ 0x25
 800e444:	d1f9      	bne.n	800e43a <_vfiprintf_r+0x7a>
 800e446:	ebba 0b04 	subs.w	fp, sl, r4
 800e44a:	d00b      	beq.n	800e464 <_vfiprintf_r+0xa4>
 800e44c:	465b      	mov	r3, fp
 800e44e:	4622      	mov	r2, r4
 800e450:	4629      	mov	r1, r5
 800e452:	4630      	mov	r0, r6
 800e454:	f7ff ffa1 	bl	800e39a <__sfputs_r>
 800e458:	3001      	adds	r0, #1
 800e45a:	f000 80a7 	beq.w	800e5ac <_vfiprintf_r+0x1ec>
 800e45e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e460:	445a      	add	r2, fp
 800e462:	9209      	str	r2, [sp, #36]	@ 0x24
 800e464:	f89a 3000 	ldrb.w	r3, [sl]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 809f 	beq.w	800e5ac <_vfiprintf_r+0x1ec>
 800e46e:	2300      	movs	r3, #0
 800e470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e478:	f10a 0a01 	add.w	sl, sl, #1
 800e47c:	9304      	str	r3, [sp, #16]
 800e47e:	9307      	str	r3, [sp, #28]
 800e480:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e484:	931a      	str	r3, [sp, #104]	@ 0x68
 800e486:	4654      	mov	r4, sl
 800e488:	2205      	movs	r2, #5
 800e48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e48e:	4853      	ldr	r0, [pc, #332]	@ (800e5dc <_vfiprintf_r+0x21c>)
 800e490:	f7f1 fe76 	bl	8000180 <memchr>
 800e494:	9a04      	ldr	r2, [sp, #16]
 800e496:	b9d8      	cbnz	r0, 800e4d0 <_vfiprintf_r+0x110>
 800e498:	06d1      	lsls	r1, r2, #27
 800e49a:	bf44      	itt	mi
 800e49c:	2320      	movmi	r3, #32
 800e49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4a2:	0713      	lsls	r3, r2, #28
 800e4a4:	bf44      	itt	mi
 800e4a6:	232b      	movmi	r3, #43	@ 0x2b
 800e4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4b2:	d015      	beq.n	800e4e0 <_vfiprintf_r+0x120>
 800e4b4:	9a07      	ldr	r2, [sp, #28]
 800e4b6:	4654      	mov	r4, sl
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	f04f 0c0a 	mov.w	ip, #10
 800e4be:	4621      	mov	r1, r4
 800e4c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4c4:	3b30      	subs	r3, #48	@ 0x30
 800e4c6:	2b09      	cmp	r3, #9
 800e4c8:	d94b      	bls.n	800e562 <_vfiprintf_r+0x1a2>
 800e4ca:	b1b0      	cbz	r0, 800e4fa <_vfiprintf_r+0x13a>
 800e4cc:	9207      	str	r2, [sp, #28]
 800e4ce:	e014      	b.n	800e4fa <_vfiprintf_r+0x13a>
 800e4d0:	eba0 0308 	sub.w	r3, r0, r8
 800e4d4:	fa09 f303 	lsl.w	r3, r9, r3
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	9304      	str	r3, [sp, #16]
 800e4dc:	46a2      	mov	sl, r4
 800e4de:	e7d2      	b.n	800e486 <_vfiprintf_r+0xc6>
 800e4e0:	9b03      	ldr	r3, [sp, #12]
 800e4e2:	1d19      	adds	r1, r3, #4
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	9103      	str	r1, [sp, #12]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	bfbb      	ittet	lt
 800e4ec:	425b      	neglt	r3, r3
 800e4ee:	f042 0202 	orrlt.w	r2, r2, #2
 800e4f2:	9307      	strge	r3, [sp, #28]
 800e4f4:	9307      	strlt	r3, [sp, #28]
 800e4f6:	bfb8      	it	lt
 800e4f8:	9204      	strlt	r2, [sp, #16]
 800e4fa:	7823      	ldrb	r3, [r4, #0]
 800e4fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4fe:	d10a      	bne.n	800e516 <_vfiprintf_r+0x156>
 800e500:	7863      	ldrb	r3, [r4, #1]
 800e502:	2b2a      	cmp	r3, #42	@ 0x2a
 800e504:	d132      	bne.n	800e56c <_vfiprintf_r+0x1ac>
 800e506:	9b03      	ldr	r3, [sp, #12]
 800e508:	1d1a      	adds	r2, r3, #4
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	9203      	str	r2, [sp, #12]
 800e50e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e512:	3402      	adds	r4, #2
 800e514:	9305      	str	r3, [sp, #20]
 800e516:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e5e0 <_vfiprintf_r+0x220>
 800e51a:	7821      	ldrb	r1, [r4, #0]
 800e51c:	2203      	movs	r2, #3
 800e51e:	4650      	mov	r0, sl
 800e520:	f7f1 fe2e 	bl	8000180 <memchr>
 800e524:	b138      	cbz	r0, 800e536 <_vfiprintf_r+0x176>
 800e526:	9b04      	ldr	r3, [sp, #16]
 800e528:	eba0 000a 	sub.w	r0, r0, sl
 800e52c:	2240      	movs	r2, #64	@ 0x40
 800e52e:	4082      	lsls	r2, r0
 800e530:	4313      	orrs	r3, r2
 800e532:	3401      	adds	r4, #1
 800e534:	9304      	str	r3, [sp, #16]
 800e536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53a:	482a      	ldr	r0, [pc, #168]	@ (800e5e4 <_vfiprintf_r+0x224>)
 800e53c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e540:	2206      	movs	r2, #6
 800e542:	f7f1 fe1d 	bl	8000180 <memchr>
 800e546:	2800      	cmp	r0, #0
 800e548:	d03f      	beq.n	800e5ca <_vfiprintf_r+0x20a>
 800e54a:	4b27      	ldr	r3, [pc, #156]	@ (800e5e8 <_vfiprintf_r+0x228>)
 800e54c:	bb1b      	cbnz	r3, 800e596 <_vfiprintf_r+0x1d6>
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	3307      	adds	r3, #7
 800e552:	f023 0307 	bic.w	r3, r3, #7
 800e556:	3308      	adds	r3, #8
 800e558:	9303      	str	r3, [sp, #12]
 800e55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e55c:	443b      	add	r3, r7
 800e55e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e560:	e76a      	b.n	800e438 <_vfiprintf_r+0x78>
 800e562:	fb0c 3202 	mla	r2, ip, r2, r3
 800e566:	460c      	mov	r4, r1
 800e568:	2001      	movs	r0, #1
 800e56a:	e7a8      	b.n	800e4be <_vfiprintf_r+0xfe>
 800e56c:	2300      	movs	r3, #0
 800e56e:	3401      	adds	r4, #1
 800e570:	9305      	str	r3, [sp, #20]
 800e572:	4619      	mov	r1, r3
 800e574:	f04f 0c0a 	mov.w	ip, #10
 800e578:	4620      	mov	r0, r4
 800e57a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e57e:	3a30      	subs	r2, #48	@ 0x30
 800e580:	2a09      	cmp	r2, #9
 800e582:	d903      	bls.n	800e58c <_vfiprintf_r+0x1cc>
 800e584:	2b00      	cmp	r3, #0
 800e586:	d0c6      	beq.n	800e516 <_vfiprintf_r+0x156>
 800e588:	9105      	str	r1, [sp, #20]
 800e58a:	e7c4      	b.n	800e516 <_vfiprintf_r+0x156>
 800e58c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e590:	4604      	mov	r4, r0
 800e592:	2301      	movs	r3, #1
 800e594:	e7f0      	b.n	800e578 <_vfiprintf_r+0x1b8>
 800e596:	ab03      	add	r3, sp, #12
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	462a      	mov	r2, r5
 800e59c:	4b13      	ldr	r3, [pc, #76]	@ (800e5ec <_vfiprintf_r+0x22c>)
 800e59e:	a904      	add	r1, sp, #16
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f7fd fbc1 	bl	800bd28 <_printf_float>
 800e5a6:	4607      	mov	r7, r0
 800e5a8:	1c78      	adds	r0, r7, #1
 800e5aa:	d1d6      	bne.n	800e55a <_vfiprintf_r+0x19a>
 800e5ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ae:	07d9      	lsls	r1, r3, #31
 800e5b0:	d405      	bmi.n	800e5be <_vfiprintf_r+0x1fe>
 800e5b2:	89ab      	ldrh	r3, [r5, #12]
 800e5b4:	059a      	lsls	r2, r3, #22
 800e5b6:	d402      	bmi.n	800e5be <_vfiprintf_r+0x1fe>
 800e5b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5ba:	f7fe faa1 	bl	800cb00 <__retarget_lock_release_recursive>
 800e5be:	89ab      	ldrh	r3, [r5, #12]
 800e5c0:	065b      	lsls	r3, r3, #25
 800e5c2:	f53f af1f 	bmi.w	800e404 <_vfiprintf_r+0x44>
 800e5c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5c8:	e71e      	b.n	800e408 <_vfiprintf_r+0x48>
 800e5ca:	ab03      	add	r3, sp, #12
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	462a      	mov	r2, r5
 800e5d0:	4b06      	ldr	r3, [pc, #24]	@ (800e5ec <_vfiprintf_r+0x22c>)
 800e5d2:	a904      	add	r1, sp, #16
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f7fd fe41 	bl	800c25c <_printf_i>
 800e5da:	e7e4      	b.n	800e5a6 <_vfiprintf_r+0x1e6>
 800e5dc:	08010ee7 	.word	0x08010ee7
 800e5e0:	08010eed 	.word	0x08010eed
 800e5e4:	08010ef1 	.word	0x08010ef1
 800e5e8:	0800bd29 	.word	0x0800bd29
 800e5ec:	0800e39b 	.word	0x0800e39b

0800e5f0 <__sflush_r>:
 800e5f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f6:	0716      	lsls	r6, r2, #28
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	d454      	bmi.n	800e6a8 <__sflush_r+0xb8>
 800e5fe:	684b      	ldr	r3, [r1, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	dc02      	bgt.n	800e60a <__sflush_r+0x1a>
 800e604:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e606:	2b00      	cmp	r3, #0
 800e608:	dd48      	ble.n	800e69c <__sflush_r+0xac>
 800e60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e60c:	2e00      	cmp	r6, #0
 800e60e:	d045      	beq.n	800e69c <__sflush_r+0xac>
 800e610:	2300      	movs	r3, #0
 800e612:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e616:	682f      	ldr	r7, [r5, #0]
 800e618:	6a21      	ldr	r1, [r4, #32]
 800e61a:	602b      	str	r3, [r5, #0]
 800e61c:	d030      	beq.n	800e680 <__sflush_r+0x90>
 800e61e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e620:	89a3      	ldrh	r3, [r4, #12]
 800e622:	0759      	lsls	r1, r3, #29
 800e624:	d505      	bpl.n	800e632 <__sflush_r+0x42>
 800e626:	6863      	ldr	r3, [r4, #4]
 800e628:	1ad2      	subs	r2, r2, r3
 800e62a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e62c:	b10b      	cbz	r3, 800e632 <__sflush_r+0x42>
 800e62e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e630:	1ad2      	subs	r2, r2, r3
 800e632:	2300      	movs	r3, #0
 800e634:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e636:	6a21      	ldr	r1, [r4, #32]
 800e638:	4628      	mov	r0, r5
 800e63a:	47b0      	blx	r6
 800e63c:	1c43      	adds	r3, r0, #1
 800e63e:	89a3      	ldrh	r3, [r4, #12]
 800e640:	d106      	bne.n	800e650 <__sflush_r+0x60>
 800e642:	6829      	ldr	r1, [r5, #0]
 800e644:	291d      	cmp	r1, #29
 800e646:	d82b      	bhi.n	800e6a0 <__sflush_r+0xb0>
 800e648:	4a28      	ldr	r2, [pc, #160]	@ (800e6ec <__sflush_r+0xfc>)
 800e64a:	40ca      	lsrs	r2, r1
 800e64c:	07d6      	lsls	r6, r2, #31
 800e64e:	d527      	bpl.n	800e6a0 <__sflush_r+0xb0>
 800e650:	2200      	movs	r2, #0
 800e652:	6062      	str	r2, [r4, #4]
 800e654:	04d9      	lsls	r1, r3, #19
 800e656:	6922      	ldr	r2, [r4, #16]
 800e658:	6022      	str	r2, [r4, #0]
 800e65a:	d504      	bpl.n	800e666 <__sflush_r+0x76>
 800e65c:	1c42      	adds	r2, r0, #1
 800e65e:	d101      	bne.n	800e664 <__sflush_r+0x74>
 800e660:	682b      	ldr	r3, [r5, #0]
 800e662:	b903      	cbnz	r3, 800e666 <__sflush_r+0x76>
 800e664:	6560      	str	r0, [r4, #84]	@ 0x54
 800e666:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e668:	602f      	str	r7, [r5, #0]
 800e66a:	b1b9      	cbz	r1, 800e69c <__sflush_r+0xac>
 800e66c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e670:	4299      	cmp	r1, r3
 800e672:	d002      	beq.n	800e67a <__sflush_r+0x8a>
 800e674:	4628      	mov	r0, r5
 800e676:	f7ff f8ab 	bl	800d7d0 <_free_r>
 800e67a:	2300      	movs	r3, #0
 800e67c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e67e:	e00d      	b.n	800e69c <__sflush_r+0xac>
 800e680:	2301      	movs	r3, #1
 800e682:	4628      	mov	r0, r5
 800e684:	47b0      	blx	r6
 800e686:	4602      	mov	r2, r0
 800e688:	1c50      	adds	r0, r2, #1
 800e68a:	d1c9      	bne.n	800e620 <__sflush_r+0x30>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d0c6      	beq.n	800e620 <__sflush_r+0x30>
 800e692:	2b1d      	cmp	r3, #29
 800e694:	d001      	beq.n	800e69a <__sflush_r+0xaa>
 800e696:	2b16      	cmp	r3, #22
 800e698:	d11d      	bne.n	800e6d6 <__sflush_r+0xe6>
 800e69a:	602f      	str	r7, [r5, #0]
 800e69c:	2000      	movs	r0, #0
 800e69e:	e021      	b.n	800e6e4 <__sflush_r+0xf4>
 800e6a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6a4:	b21b      	sxth	r3, r3
 800e6a6:	e01a      	b.n	800e6de <__sflush_r+0xee>
 800e6a8:	690f      	ldr	r7, [r1, #16]
 800e6aa:	2f00      	cmp	r7, #0
 800e6ac:	d0f6      	beq.n	800e69c <__sflush_r+0xac>
 800e6ae:	0793      	lsls	r3, r2, #30
 800e6b0:	680e      	ldr	r6, [r1, #0]
 800e6b2:	bf08      	it	eq
 800e6b4:	694b      	ldreq	r3, [r1, #20]
 800e6b6:	600f      	str	r7, [r1, #0]
 800e6b8:	bf18      	it	ne
 800e6ba:	2300      	movne	r3, #0
 800e6bc:	1bf6      	subs	r6, r6, r7
 800e6be:	608b      	str	r3, [r1, #8]
 800e6c0:	2e00      	cmp	r6, #0
 800e6c2:	ddeb      	ble.n	800e69c <__sflush_r+0xac>
 800e6c4:	6a21      	ldr	r1, [r4, #32]
 800e6c6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e6ca:	4633      	mov	r3, r6
 800e6cc:	463a      	mov	r2, r7
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	47e0      	blx	ip
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	dc07      	bgt.n	800e6e6 <__sflush_r+0xf6>
 800e6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6de:	81a3      	strh	r3, [r4, #12]
 800e6e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6e6:	4407      	add	r7, r0
 800e6e8:	1a36      	subs	r6, r6, r0
 800e6ea:	e7e9      	b.n	800e6c0 <__sflush_r+0xd0>
 800e6ec:	20400001 	.word	0x20400001

0800e6f0 <_fflush_r>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	690b      	ldr	r3, [r1, #16]
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	b913      	cbnz	r3, 800e700 <_fflush_r+0x10>
 800e6fa:	2500      	movs	r5, #0
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	bd38      	pop	{r3, r4, r5, pc}
 800e700:	b118      	cbz	r0, 800e70a <_fflush_r+0x1a>
 800e702:	6a03      	ldr	r3, [r0, #32]
 800e704:	b90b      	cbnz	r3, 800e70a <_fflush_r+0x1a>
 800e706:	f7fd ff53 	bl	800c5b0 <__sinit>
 800e70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d0f3      	beq.n	800e6fa <_fflush_r+0xa>
 800e712:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e714:	07d0      	lsls	r0, r2, #31
 800e716:	d404      	bmi.n	800e722 <_fflush_r+0x32>
 800e718:	0599      	lsls	r1, r3, #22
 800e71a:	d402      	bmi.n	800e722 <_fflush_r+0x32>
 800e71c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e71e:	f7fe f9ee 	bl	800cafe <__retarget_lock_acquire_recursive>
 800e722:	4628      	mov	r0, r5
 800e724:	4621      	mov	r1, r4
 800e726:	f7ff ff63 	bl	800e5f0 <__sflush_r>
 800e72a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e72c:	07da      	lsls	r2, r3, #31
 800e72e:	4605      	mov	r5, r0
 800e730:	d4e4      	bmi.n	800e6fc <_fflush_r+0xc>
 800e732:	89a3      	ldrh	r3, [r4, #12]
 800e734:	059b      	lsls	r3, r3, #22
 800e736:	d4e1      	bmi.n	800e6fc <_fflush_r+0xc>
 800e738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e73a:	f7fe f9e1 	bl	800cb00 <__retarget_lock_release_recursive>
 800e73e:	e7dd      	b.n	800e6fc <_fflush_r+0xc>

0800e740 <__swhatbuf_r>:
 800e740:	b570      	push	{r4, r5, r6, lr}
 800e742:	460c      	mov	r4, r1
 800e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e748:	2900      	cmp	r1, #0
 800e74a:	b096      	sub	sp, #88	@ 0x58
 800e74c:	4615      	mov	r5, r2
 800e74e:	461e      	mov	r6, r3
 800e750:	da0d      	bge.n	800e76e <__swhatbuf_r+0x2e>
 800e752:	89a3      	ldrh	r3, [r4, #12]
 800e754:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e758:	f04f 0100 	mov.w	r1, #0
 800e75c:	bf14      	ite	ne
 800e75e:	2340      	movne	r3, #64	@ 0x40
 800e760:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e764:	2000      	movs	r0, #0
 800e766:	6031      	str	r1, [r6, #0]
 800e768:	602b      	str	r3, [r5, #0]
 800e76a:	b016      	add	sp, #88	@ 0x58
 800e76c:	bd70      	pop	{r4, r5, r6, pc}
 800e76e:	466a      	mov	r2, sp
 800e770:	f000 f896 	bl	800e8a0 <_fstat_r>
 800e774:	2800      	cmp	r0, #0
 800e776:	dbec      	blt.n	800e752 <__swhatbuf_r+0x12>
 800e778:	9901      	ldr	r1, [sp, #4]
 800e77a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e77e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e782:	4259      	negs	r1, r3
 800e784:	4159      	adcs	r1, r3
 800e786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e78a:	e7eb      	b.n	800e764 <__swhatbuf_r+0x24>

0800e78c <__smakebuf_r>:
 800e78c:	898b      	ldrh	r3, [r1, #12]
 800e78e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e790:	079d      	lsls	r5, r3, #30
 800e792:	4606      	mov	r6, r0
 800e794:	460c      	mov	r4, r1
 800e796:	d507      	bpl.n	800e7a8 <__smakebuf_r+0x1c>
 800e798:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e79c:	6023      	str	r3, [r4, #0]
 800e79e:	6123      	str	r3, [r4, #16]
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	6163      	str	r3, [r4, #20]
 800e7a4:	b003      	add	sp, #12
 800e7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7a8:	ab01      	add	r3, sp, #4
 800e7aa:	466a      	mov	r2, sp
 800e7ac:	f7ff ffc8 	bl	800e740 <__swhatbuf_r>
 800e7b0:	9f00      	ldr	r7, [sp, #0]
 800e7b2:	4605      	mov	r5, r0
 800e7b4:	4639      	mov	r1, r7
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f7ff f87e 	bl	800d8b8 <_malloc_r>
 800e7bc:	b948      	cbnz	r0, 800e7d2 <__smakebuf_r+0x46>
 800e7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c2:	059a      	lsls	r2, r3, #22
 800e7c4:	d4ee      	bmi.n	800e7a4 <__smakebuf_r+0x18>
 800e7c6:	f023 0303 	bic.w	r3, r3, #3
 800e7ca:	f043 0302 	orr.w	r3, r3, #2
 800e7ce:	81a3      	strh	r3, [r4, #12]
 800e7d0:	e7e2      	b.n	800e798 <__smakebuf_r+0xc>
 800e7d2:	89a3      	ldrh	r3, [r4, #12]
 800e7d4:	6020      	str	r0, [r4, #0]
 800e7d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7da:	81a3      	strh	r3, [r4, #12]
 800e7dc:	9b01      	ldr	r3, [sp, #4]
 800e7de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e7e2:	b15b      	cbz	r3, 800e7fc <__smakebuf_r+0x70>
 800e7e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	f000 f86b 	bl	800e8c4 <_isatty_r>
 800e7ee:	b128      	cbz	r0, 800e7fc <__smakebuf_r+0x70>
 800e7f0:	89a3      	ldrh	r3, [r4, #12]
 800e7f2:	f023 0303 	bic.w	r3, r3, #3
 800e7f6:	f043 0301 	orr.w	r3, r3, #1
 800e7fa:	81a3      	strh	r3, [r4, #12]
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	431d      	orrs	r5, r3
 800e800:	81a5      	strh	r5, [r4, #12]
 800e802:	e7cf      	b.n	800e7a4 <__smakebuf_r+0x18>

0800e804 <_putc_r>:
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	460d      	mov	r5, r1
 800e808:	4614      	mov	r4, r2
 800e80a:	4606      	mov	r6, r0
 800e80c:	b118      	cbz	r0, 800e816 <_putc_r+0x12>
 800e80e:	6a03      	ldr	r3, [r0, #32]
 800e810:	b90b      	cbnz	r3, 800e816 <_putc_r+0x12>
 800e812:	f7fd fecd 	bl	800c5b0 <__sinit>
 800e816:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e818:	07d8      	lsls	r0, r3, #31
 800e81a:	d405      	bmi.n	800e828 <_putc_r+0x24>
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	0599      	lsls	r1, r3, #22
 800e820:	d402      	bmi.n	800e828 <_putc_r+0x24>
 800e822:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e824:	f7fe f96b 	bl	800cafe <__retarget_lock_acquire_recursive>
 800e828:	68a3      	ldr	r3, [r4, #8]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	60a3      	str	r3, [r4, #8]
 800e830:	da05      	bge.n	800e83e <_putc_r+0x3a>
 800e832:	69a2      	ldr	r2, [r4, #24]
 800e834:	4293      	cmp	r3, r2
 800e836:	db12      	blt.n	800e85e <_putc_r+0x5a>
 800e838:	b2eb      	uxtb	r3, r5
 800e83a:	2b0a      	cmp	r3, #10
 800e83c:	d00f      	beq.n	800e85e <_putc_r+0x5a>
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	1c5a      	adds	r2, r3, #1
 800e842:	6022      	str	r2, [r4, #0]
 800e844:	701d      	strb	r5, [r3, #0]
 800e846:	b2ed      	uxtb	r5, r5
 800e848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e84a:	07da      	lsls	r2, r3, #31
 800e84c:	d405      	bmi.n	800e85a <_putc_r+0x56>
 800e84e:	89a3      	ldrh	r3, [r4, #12]
 800e850:	059b      	lsls	r3, r3, #22
 800e852:	d402      	bmi.n	800e85a <_putc_r+0x56>
 800e854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e856:	f7fe f953 	bl	800cb00 <__retarget_lock_release_recursive>
 800e85a:	4628      	mov	r0, r5
 800e85c:	bd70      	pop	{r4, r5, r6, pc}
 800e85e:	4629      	mov	r1, r5
 800e860:	4622      	mov	r2, r4
 800e862:	4630      	mov	r0, r6
 800e864:	f7fd ffed 	bl	800c842 <__swbuf_r>
 800e868:	4605      	mov	r5, r0
 800e86a:	e7ed      	b.n	800e848 <_putc_r+0x44>

0800e86c <memmove>:
 800e86c:	4288      	cmp	r0, r1
 800e86e:	b510      	push	{r4, lr}
 800e870:	eb01 0402 	add.w	r4, r1, r2
 800e874:	d902      	bls.n	800e87c <memmove+0x10>
 800e876:	4284      	cmp	r4, r0
 800e878:	4623      	mov	r3, r4
 800e87a:	d807      	bhi.n	800e88c <memmove+0x20>
 800e87c:	1e43      	subs	r3, r0, #1
 800e87e:	42a1      	cmp	r1, r4
 800e880:	d008      	beq.n	800e894 <memmove+0x28>
 800e882:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e88a:	e7f8      	b.n	800e87e <memmove+0x12>
 800e88c:	4402      	add	r2, r0
 800e88e:	4601      	mov	r1, r0
 800e890:	428a      	cmp	r2, r1
 800e892:	d100      	bne.n	800e896 <memmove+0x2a>
 800e894:	bd10      	pop	{r4, pc}
 800e896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e89a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e89e:	e7f7      	b.n	800e890 <memmove+0x24>

0800e8a0 <_fstat_r>:
 800e8a0:	b538      	push	{r3, r4, r5, lr}
 800e8a2:	4d07      	ldr	r5, [pc, #28]	@ (800e8c0 <_fstat_r+0x20>)
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	4608      	mov	r0, r1
 800e8aa:	4611      	mov	r1, r2
 800e8ac:	602b      	str	r3, [r5, #0]
 800e8ae:	f7f4 fcbc 	bl	800322a <_fstat>
 800e8b2:	1c43      	adds	r3, r0, #1
 800e8b4:	d102      	bne.n	800e8bc <_fstat_r+0x1c>
 800e8b6:	682b      	ldr	r3, [r5, #0]
 800e8b8:	b103      	cbz	r3, 800e8bc <_fstat_r+0x1c>
 800e8ba:	6023      	str	r3, [r4, #0]
 800e8bc:	bd38      	pop	{r3, r4, r5, pc}
 800e8be:	bf00      	nop
 800e8c0:	20005e5c 	.word	0x20005e5c

0800e8c4 <_isatty_r>:
 800e8c4:	b538      	push	{r3, r4, r5, lr}
 800e8c6:	4d06      	ldr	r5, [pc, #24]	@ (800e8e0 <_isatty_r+0x1c>)
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	4608      	mov	r0, r1
 800e8ce:	602b      	str	r3, [r5, #0]
 800e8d0:	f7f4 fcb0 	bl	8003234 <_isatty>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	d102      	bne.n	800e8de <_isatty_r+0x1a>
 800e8d8:	682b      	ldr	r3, [r5, #0]
 800e8da:	b103      	cbz	r3, 800e8de <_isatty_r+0x1a>
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	bd38      	pop	{r3, r4, r5, pc}
 800e8e0:	20005e5c 	.word	0x20005e5c

0800e8e4 <_sbrk_r>:
 800e8e4:	b538      	push	{r3, r4, r5, lr}
 800e8e6:	4d06      	ldr	r5, [pc, #24]	@ (800e900 <_sbrk_r+0x1c>)
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	4608      	mov	r0, r1
 800e8ee:	602b      	str	r3, [r5, #0]
 800e8f0:	f7f4 fca4 	bl	800323c <_sbrk>
 800e8f4:	1c43      	adds	r3, r0, #1
 800e8f6:	d102      	bne.n	800e8fe <_sbrk_r+0x1a>
 800e8f8:	682b      	ldr	r3, [r5, #0]
 800e8fa:	b103      	cbz	r3, 800e8fe <_sbrk_r+0x1a>
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	bd38      	pop	{r3, r4, r5, pc}
 800e900:	20005e5c 	.word	0x20005e5c

0800e904 <__assert_func>:
 800e904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e906:	4614      	mov	r4, r2
 800e908:	461a      	mov	r2, r3
 800e90a:	4b09      	ldr	r3, [pc, #36]	@ (800e930 <__assert_func+0x2c>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4605      	mov	r5, r0
 800e910:	68d8      	ldr	r0, [r3, #12]
 800e912:	b14c      	cbz	r4, 800e928 <__assert_func+0x24>
 800e914:	4b07      	ldr	r3, [pc, #28]	@ (800e934 <__assert_func+0x30>)
 800e916:	9100      	str	r1, [sp, #0]
 800e918:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e91c:	4906      	ldr	r1, [pc, #24]	@ (800e938 <__assert_func+0x34>)
 800e91e:	462b      	mov	r3, r5
 800e920:	f000 f870 	bl	800ea04 <fiprintf>
 800e924:	f000 f880 	bl	800ea28 <abort>
 800e928:	4b04      	ldr	r3, [pc, #16]	@ (800e93c <__assert_func+0x38>)
 800e92a:	461c      	mov	r4, r3
 800e92c:	e7f3      	b.n	800e916 <__assert_func+0x12>
 800e92e:	bf00      	nop
 800e930:	20000104 	.word	0x20000104
 800e934:	08010f02 	.word	0x08010f02
 800e938:	08010f0f 	.word	0x08010f0f
 800e93c:	08010f3d 	.word	0x08010f3d

0800e940 <_calloc_r>:
 800e940:	b570      	push	{r4, r5, r6, lr}
 800e942:	fba1 5402 	umull	r5, r4, r1, r2
 800e946:	b934      	cbnz	r4, 800e956 <_calloc_r+0x16>
 800e948:	4629      	mov	r1, r5
 800e94a:	f7fe ffb5 	bl	800d8b8 <_malloc_r>
 800e94e:	4606      	mov	r6, r0
 800e950:	b928      	cbnz	r0, 800e95e <_calloc_r+0x1e>
 800e952:	4630      	mov	r0, r6
 800e954:	bd70      	pop	{r4, r5, r6, pc}
 800e956:	220c      	movs	r2, #12
 800e958:	6002      	str	r2, [r0, #0]
 800e95a:	2600      	movs	r6, #0
 800e95c:	e7f9      	b.n	800e952 <_calloc_r+0x12>
 800e95e:	462a      	mov	r2, r5
 800e960:	4621      	mov	r1, r4
 800e962:	f7fe f803 	bl	800c96c <memset>
 800e966:	e7f4      	b.n	800e952 <_calloc_r+0x12>

0800e968 <__ascii_mbtowc>:
 800e968:	b082      	sub	sp, #8
 800e96a:	b901      	cbnz	r1, 800e96e <__ascii_mbtowc+0x6>
 800e96c:	a901      	add	r1, sp, #4
 800e96e:	b142      	cbz	r2, 800e982 <__ascii_mbtowc+0x1a>
 800e970:	b14b      	cbz	r3, 800e986 <__ascii_mbtowc+0x1e>
 800e972:	7813      	ldrb	r3, [r2, #0]
 800e974:	600b      	str	r3, [r1, #0]
 800e976:	7812      	ldrb	r2, [r2, #0]
 800e978:	1e10      	subs	r0, r2, #0
 800e97a:	bf18      	it	ne
 800e97c:	2001      	movne	r0, #1
 800e97e:	b002      	add	sp, #8
 800e980:	4770      	bx	lr
 800e982:	4610      	mov	r0, r2
 800e984:	e7fb      	b.n	800e97e <__ascii_mbtowc+0x16>
 800e986:	f06f 0001 	mvn.w	r0, #1
 800e98a:	e7f8      	b.n	800e97e <__ascii_mbtowc+0x16>

0800e98c <_realloc_r>:
 800e98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e990:	4607      	mov	r7, r0
 800e992:	4614      	mov	r4, r2
 800e994:	460d      	mov	r5, r1
 800e996:	b921      	cbnz	r1, 800e9a2 <_realloc_r+0x16>
 800e998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	4611      	mov	r1, r2
 800e99e:	f7fe bf8b 	b.w	800d8b8 <_malloc_r>
 800e9a2:	b92a      	cbnz	r2, 800e9b0 <_realloc_r+0x24>
 800e9a4:	f7fe ff14 	bl	800d7d0 <_free_r>
 800e9a8:	4625      	mov	r5, r4
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b0:	f000 f841 	bl	800ea36 <_malloc_usable_size_r>
 800e9b4:	4284      	cmp	r4, r0
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	d802      	bhi.n	800e9c0 <_realloc_r+0x34>
 800e9ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9be:	d8f4      	bhi.n	800e9aa <_realloc_r+0x1e>
 800e9c0:	4621      	mov	r1, r4
 800e9c2:	4638      	mov	r0, r7
 800e9c4:	f7fe ff78 	bl	800d8b8 <_malloc_r>
 800e9c8:	4680      	mov	r8, r0
 800e9ca:	b908      	cbnz	r0, 800e9d0 <_realloc_r+0x44>
 800e9cc:	4645      	mov	r5, r8
 800e9ce:	e7ec      	b.n	800e9aa <_realloc_r+0x1e>
 800e9d0:	42b4      	cmp	r4, r6
 800e9d2:	4622      	mov	r2, r4
 800e9d4:	4629      	mov	r1, r5
 800e9d6:	bf28      	it	cs
 800e9d8:	4632      	movcs	r2, r6
 800e9da:	f7fe f892 	bl	800cb02 <memcpy>
 800e9de:	4629      	mov	r1, r5
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	f7fe fef5 	bl	800d7d0 <_free_r>
 800e9e6:	e7f1      	b.n	800e9cc <_realloc_r+0x40>

0800e9e8 <__ascii_wctomb>:
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	4608      	mov	r0, r1
 800e9ec:	b141      	cbz	r1, 800ea00 <__ascii_wctomb+0x18>
 800e9ee:	2aff      	cmp	r2, #255	@ 0xff
 800e9f0:	d904      	bls.n	800e9fc <__ascii_wctomb+0x14>
 800e9f2:	228a      	movs	r2, #138	@ 0x8a
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e9fa:	4770      	bx	lr
 800e9fc:	700a      	strb	r2, [r1, #0]
 800e9fe:	2001      	movs	r0, #1
 800ea00:	4770      	bx	lr
	...

0800ea04 <fiprintf>:
 800ea04:	b40e      	push	{r1, r2, r3}
 800ea06:	b503      	push	{r0, r1, lr}
 800ea08:	4601      	mov	r1, r0
 800ea0a:	ab03      	add	r3, sp, #12
 800ea0c:	4805      	ldr	r0, [pc, #20]	@ (800ea24 <fiprintf+0x20>)
 800ea0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea12:	6800      	ldr	r0, [r0, #0]
 800ea14:	9301      	str	r3, [sp, #4]
 800ea16:	f7ff fcd3 	bl	800e3c0 <_vfiprintf_r>
 800ea1a:	b002      	add	sp, #8
 800ea1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea20:	b003      	add	sp, #12
 800ea22:	4770      	bx	lr
 800ea24:	20000104 	.word	0x20000104

0800ea28 <abort>:
 800ea28:	b508      	push	{r3, lr}
 800ea2a:	2006      	movs	r0, #6
 800ea2c:	f000 f834 	bl	800ea98 <raise>
 800ea30:	2001      	movs	r0, #1
 800ea32:	f7f4 fbd3 	bl	80031dc <_exit>

0800ea36 <_malloc_usable_size_r>:
 800ea36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea3a:	1f18      	subs	r0, r3, #4
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	bfbc      	itt	lt
 800ea40:	580b      	ldrlt	r3, [r1, r0]
 800ea42:	18c0      	addlt	r0, r0, r3
 800ea44:	4770      	bx	lr

0800ea46 <_raise_r>:
 800ea46:	291f      	cmp	r1, #31
 800ea48:	b538      	push	{r3, r4, r5, lr}
 800ea4a:	4605      	mov	r5, r0
 800ea4c:	460c      	mov	r4, r1
 800ea4e:	d904      	bls.n	800ea5a <_raise_r+0x14>
 800ea50:	2316      	movs	r3, #22
 800ea52:	6003      	str	r3, [r0, #0]
 800ea54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea58:	bd38      	pop	{r3, r4, r5, pc}
 800ea5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ea5c:	b112      	cbz	r2, 800ea64 <_raise_r+0x1e>
 800ea5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea62:	b94b      	cbnz	r3, 800ea78 <_raise_r+0x32>
 800ea64:	4628      	mov	r0, r5
 800ea66:	f000 f831 	bl	800eacc <_getpid_r>
 800ea6a:	4622      	mov	r2, r4
 800ea6c:	4601      	mov	r1, r0
 800ea6e:	4628      	mov	r0, r5
 800ea70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea74:	f000 b818 	b.w	800eaa8 <_kill_r>
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d00a      	beq.n	800ea92 <_raise_r+0x4c>
 800ea7c:	1c59      	adds	r1, r3, #1
 800ea7e:	d103      	bne.n	800ea88 <_raise_r+0x42>
 800ea80:	2316      	movs	r3, #22
 800ea82:	6003      	str	r3, [r0, #0]
 800ea84:	2001      	movs	r0, #1
 800ea86:	e7e7      	b.n	800ea58 <_raise_r+0x12>
 800ea88:	2100      	movs	r1, #0
 800ea8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ea8e:	4620      	mov	r0, r4
 800ea90:	4798      	blx	r3
 800ea92:	2000      	movs	r0, #0
 800ea94:	e7e0      	b.n	800ea58 <_raise_r+0x12>
	...

0800ea98 <raise>:
 800ea98:	4b02      	ldr	r3, [pc, #8]	@ (800eaa4 <raise+0xc>)
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	6818      	ldr	r0, [r3, #0]
 800ea9e:	f7ff bfd2 	b.w	800ea46 <_raise_r>
 800eaa2:	bf00      	nop
 800eaa4:	20000104 	.word	0x20000104

0800eaa8 <_kill_r>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	4d07      	ldr	r5, [pc, #28]	@ (800eac8 <_kill_r+0x20>)
 800eaac:	2300      	movs	r3, #0
 800eaae:	4604      	mov	r4, r0
 800eab0:	4608      	mov	r0, r1
 800eab2:	4611      	mov	r1, r2
 800eab4:	602b      	str	r3, [r5, #0]
 800eab6:	f7f4 fb89 	bl	80031cc <_kill>
 800eaba:	1c43      	adds	r3, r0, #1
 800eabc:	d102      	bne.n	800eac4 <_kill_r+0x1c>
 800eabe:	682b      	ldr	r3, [r5, #0]
 800eac0:	b103      	cbz	r3, 800eac4 <_kill_r+0x1c>
 800eac2:	6023      	str	r3, [r4, #0]
 800eac4:	bd38      	pop	{r3, r4, r5, pc}
 800eac6:	bf00      	nop
 800eac8:	20005e5c 	.word	0x20005e5c

0800eacc <_getpid_r>:
 800eacc:	f7f4 bb7c 	b.w	80031c8 <_getpid>

0800ead0 <_init>:
 800ead0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ead2:	bf00      	nop
 800ead4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ead6:	bc08      	pop	{r3}
 800ead8:	469e      	mov	lr, r3
 800eada:	4770      	bx	lr

0800eadc <_fini>:
 800eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eade:	bf00      	nop
 800eae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eae2:	bc08      	pop	{r3}
 800eae4:	469e      	mov	lr, r3
 800eae6:	4770      	bx	lr
